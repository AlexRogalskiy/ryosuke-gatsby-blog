webpackJsonp([0xbbcba56f647],{540:function(n,a){n.exports={data:{blog:{html:'<p>Laravel makes it incredibly easy to quickly create powerful backend application and APIs. Today we\'ll be creating an API for an event directory and ticketing platform (like Eventbrite). This API could be used by any frontend or backend application, and in the next part of the tutorial, we\'ll be creating a ReactJS based admin dashboard that uses this API to browse, create, edit, and delete posts.</p>\n<p>This project will be based off a brand I work, <a href="http://seshsource.com">SeshSource</a>, which is an event ticketing platform for specifically cannabis-centric events. We\'ll be creating essentially a mirror of the current architecture of SeshSource, just in Laravel, instead of Wordpress + plugins.</p>\n<h2>Necessary Features (MVP)</h2>\n<p>I started by outlining features we\'d want for the MVP - or minimum viable product, like browsing events to purchasing tickets:</p>\n<h3>Directory</h3>\n<ul>\n<li>Events searchable by date</li>\n<li>Events shown by location or category</li>\n<li>User profiles for event organizers</li>\n<li>Calendar view with events</li>\n<li>List/card view</li>\n<li>List of all cities, states, etc + archive pages</li>\n</ul>\n<h3>E-Commerce</h3>\n<ul>\n<li>Buy free or paid tickets</li>\n<li>Generate PDF of ticket</li>\n<li>Email PDF to user</li>\n<li>Email business about new purchase</li>\n<li>Mobile-friendly web-app to scan tickets at event</li>\n</ul>\n<h3>Organizer Tools</h3>\n<ul>\n<li>Dashboard for managing events</li>\n<li>Create events</li>\n<li>Edit event</li>\n<li>Delete event</li>\n<li>Create ticket types for specific events (free, VIP, etc)</li>\n<li>See (+ print) list of event attendeees</li>\n<li>See (+ print) list of orders</li>\n</ul>\n<p>Now that we know what we want out of our API, let\'s start coding it!</p>\n<h2>Setup a Laravel project with Docker</h2>\n<p>Here\'s how I spin up a new Laravel project and use Docker for local development -- <em>without pulling all my hair out</em>:</p>\n<ol>\n<li><code class="language-text">composer create-project --prefer-dist laravel/laravel seshsource-api</code></li>\n<li><code class="language-text">git clone https://github.com/Laradock/laradock.git</code></li>\n<li><code class="language-text">cd laradock</code></li>\n<li>Copy the example environment file into a real one: <code class="language-text">cp env-example .env</code></li>\n<li>\n<p>Change the Laravel root ENV to use Laradock as host (<em>Laravel uses localhost, but Laradock accesses each service inside the Docker container using the service name</em>):</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">DB_HOST=mysql\nDB_DATABASE=default\nDB_USERNAME=default\nREDIS_HOST=redis\nQUEUE_HOST=beanstalkd</code></pre>\n      </div>\n</li>\n<li><code class="language-text">docker-compose up -d nginx mysql phpmyadmin redis workspace</code></li>\n</ol>\n<p>You should have your Laravel project deployed locally on a Docker development server! <em>Pretty simple right? üòÅ</em></p>\n<h2>OAuth2.0 Server in 4 steps or less</h2>\n<p>Let\'s setup Laravel with authentication and add OAuth2.0 support using the Passport package:</p>\n<ol>\n<li><code class="language-text">composer require laravel/passport</code> inside the project root</li>\n<li><code class="language-text">docker-compose exec workspace php artisan migrate</code> inside the laradock folder (<code class="language-text">cd laradock</code>)</li>\n<li><code class="language-text">docker-compose exec workspace php artisan passport:install</code></li>\n<li>Follow <a href="https://laravel.com/docs/5.6/passport">the guide in Laravel docs for adding traits to User class</a></li>\n<li><code class="language-text">docker-compose exec workspace php artisan make:auth</code></li>\n<li><code class="language-text">docker-compose exec workspace php artisan app:name SeshSource</code> - Here is where you\'d set your application\'s name. It\'ll be used across the entire app\'s \'namespace\', so referencing models will look like: <code class="language-text">use SeshSource\\Events</code>.</li>\n</ol>\n<h2>UUIDs</h2>\n<p>I like using UUIDs as opposed to direct IDs. If you\'re using anything before Laravel 5.6, install this library. Otherwise, Laravel 5.6 and beyond come pre-installed with a <code class="language-text">uuid()</code> <a href="https://laravel.com/docs/5.6/helpers#method-str-uuid">helper method</a>. You\'ll still need to create a trait, but you won\'t need the dependency.</p>\n<ol>\n<li><code class="language-text">composer require webpatser/laravel-uuid</code></li>\n<li>Add this to config/app.php file where the aliases array resides: <code class="language-text">&#39;Uuid&#39; =&gt; Webpatser\\Uuid\\Uuid::class,</code></li>\n</ol>\n<p>Now we just use <code class="language-text">$table-&gt;uuid(&#39;id&#39;); $table-&gt;primary(&#39;id&#39;);</code> in the migrations instead of <code class="language-text">$table-&gt;increments(&#39;id&#39;);</code>.</p>\n<p>Make sure to remove auto-increment from any model using UUIDs:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code class="language-php"><span class="token comment">/**\n * Indicates if the IDs are auto-incrementing.\n *\n * @var bool\n */</span>\n<span class="token keyword">public</span> <span class="token variable">$incrementing</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Create a new Trait to handle generating the UUID when we need to create new posts (app/Traits/Uuid.php):</p>\n<h3>Dependency version</h3>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code class="language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">SeshSource</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Webpatser<span class="token punctuation">\\</span>Uuid<span class="token punctuation">\\</span>Uuid</span><span class="token punctuation">;</span>\n<span class="token keyword">trait</span> <span class="token class-name">Uuids</span>\n<span class="token punctuation">{</span>\n\n    <span class="token comment">/**\n     * Boot function from laravel.\n     */</span>\n    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">creating</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$model</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token variable">$model</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token variable">$model</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getKeyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">=</span> Uuid<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">string</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token delimiter important">?></span>\n</code></pre>\n      </div>\n<h3>Laravel 5.6 UUID</h3>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code class="language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">SeshSource<span class="token punctuation">\\</span>Traits</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Str</span><span class="token punctuation">;</span>\n\n<span class="token keyword">trait</span> <span class="token class-name">Uuids</span>\n<span class="token punctuation">{</span>\n\n    <span class="token comment">/**\n     * Boot function from laravel.\n     */</span>\n    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">creating</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$model</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token variable">$model</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token variable">$model</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getKeyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> Str<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token delimiter important">?></span>\n</code></pre>\n      </div>\n<p>Inside all UUID models add the trait:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">SeshSource<span class="token punctuation">\\</span>Traits<span class="token punctuation">\\</span>Uuids</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Authenticatable</span>\n<span class="token punctuation">{</span>\n<span class="token keyword">use</span> <span class="token package">Uuids</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h2>Migrations and Models</h2>\n<p>Laravel makes it simple in a single command to create <strong>models</strong>, which help us interact with data, as well as the <strong>migrations</strong> - PHP statements that create the database tables for us (no SQL required!). We\'ll create 10 models and DB tables that will store all our website\'s data.</p>\n<p>I won\'t go into too much detail about the decision making of the structure, but it\'s essentially based off the Wordpress DB structure -- combined with the WooCommerce and Tickera plugin\'s DB structure. Events are stored in a table, and any extra "meta" data is stored in a pivot table. It\'s similar with the shopping cart "orders". We have a table dedicated to Orders, and a pivot table for each individual line item (with price and quantities). We use the a pivot table instead of storing an entire shopping cart in a single column (serialized in JSON, comma separated IDs, etc) - this allows us to leverage Laravel\'s relationships to efficiently eager load any related data.</p>\n<p>Run these commands in your project root to create the models and migrations:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">php artisan make:model Events -m\nphp artisan make:model EventMeta -m\nphp artisan make:model TicketTypes -m\nphp artisan make:model TicketTemplates -m\nphp artisan make:model Tickets -m\nphp artisan make:model UserMeta -m\nphp artisan make:model Orders -m\nphp artisan make:model OrderItems -m\nphp artisan make:model CheckIns -m\nphp artisan make:model Reviews -m</code></pre>\n      </div>\n<p>Add the UUIDs to all the models and migrations. You can opt out for the meta tables, but things like Orders and Events should have UUIDs for security purposes.</p>\n<p><strong>Example model:</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code class="language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">SeshSource</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">SeshSource<span class="token punctuation">\\</span>Traits<span class="token punctuation">\\</span>Uuids</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">EventMeta</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">use</span> <span class="token package">Uuids</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * Indicates if the IDs are auto-incrementing.\n     *\n     * @var bool\n     */</span>\n    <span class="token keyword">public</span> <span class="token variable">$incrementing</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p><strong>Example migration:</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">CreateEventMetaTable</span> <span class="token keyword">extends</span> <span class="token class-name">Migration</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * Run the migrations.\n     *\n     * @return void\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Schema<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'event_meta\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>Blueprint <span class="token variable">$table</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token variable">$table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'id\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n            <span class="token variable">$table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">primary</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'id\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token variable">$table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">timestamps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Reset the database and migrate the new structure:</p>\n<p><code class="language-text">docker-compose exec workspace php artisan migrate:fresh</code></p>\n<blockquote>\n<p>If you have any issues with "foreign IDs", it probably means a migration with relationships was run before the related table was created. Rename your migrations to make sure any tables that are related are created before any pivot tables.</p>\n</blockquote>\n<h2>Authentication using the User Model</h2>\n<p>If you noticed in the migrations we added a \'type\' to the user table (<code class="language-text">database/migrations/2014_10_12_000000_create_users_table.php</code>). That\'s where we can tell if a logged in user is a customer, event organizer, or admin. To make it easier to determine if the user has access to admin or organizer-level features, we add a check to the User model for each:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code class="language-php">   <span class="token comment">/**\n     * Determines if user is admin or not (true or false)\n     *\n     * @return boolean\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">isAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">type</span> <span class="token operator">==</span> <span class="token single-quoted-string string">\'admin\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * Determines if user is organizer or not (true or false)\n     *\n     * @return boolean\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">isOrganizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">type</span> <span class="token operator">==</span> <span class="token single-quoted-string string">\'organizer\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>Creating API controllers</h2>\n<p>Now that we have our models in place, we can handle the controller part of our application. For now we\'ll need 5 controllers, and we\'ll use Laravel\'s artisan CLI to make <a href="https://laravel.com/docs/5.6/controllers#resource-controllers">API resource controllers</a>. This bootstraps a controller for us with all the necessary methods we need for an standard API (index, store, update, delete).</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">php artisan make:controller &#39;Api/EventsController&#39; --api\nphp artisan make:controller &#39;Api/UsersController&#39; --api\nphp artisan make:controller &#39;Api/ReviewsController&#39; --api\nphp artisan make:controller &#39;Api/OrdersController&#39; --api\nphp artisan make:controller &#39;Api/CheckInsController&#39; --api</code></pre>\n      </div>\n<p>For the index methods, we just use the appropriate model and use the paginate method (<code class="language-text">Events::paginate(10)</code>). Later we\'ll add filtering using query params (changing order, specifying categories, etc).</p>\n<p>For the show methods, we use the appropriate model again, and use the <code class="language-text">findOrFail()</code> method to grab the <code class="language-text">$id</code>: <code class="language-text">$event = Events::findOrFail($id);</code>.</p>\n<blockquote>\n<p>To <a href="https://laravel.com/docs/5.6/responses#json-responses">return a JSON response using Laravel</a>, just use the <code class="language-text">json()</code> method on the <code class="language-text">response()</code> object: <code class="language-text">return response()-&gt;json($events);</code></p>\n</blockquote>\n<p>For the <code class="language-text">store()</code> methods, we create a validator for each one (<code class="language-text">php artisan make:request StoreEvents</code>). The validator checks the POST request, and also authenticates the user in the <code class="language-text">authorize()</code> method using the <code class="language-text">isAdmin()</code> method on the User model.</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code class="language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">SeshSource<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Requests</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>FormRequest</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">StoreEvents</span> <span class="token keyword">extends</span> <span class="token class-name">FormRequest</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">authorize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">[</span>\n            <span class="token single-quoted-string string">\'title\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token single-quoted-string string">\'required|unique:events|max:255\'</span><span class="token punctuation">,</span>\n            <span class="token single-quoted-string string">\'start_date\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token single-quoted-string string">\'required|date\'</span><span class="token punctuation">,</span>\n            <span class="token single-quoted-string string">\'end_date\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token single-quoted-string string">\'required|date\'</span><span class="token punctuation">,</span>\n            <span class="token single-quoted-string string">\'street_address\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token single-quoted-string string">\'required\'</span><span class="token punctuation">,</span>\n            <span class="token single-quoted-string string">\'city\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token single-quoted-string string">\'required\'</span><span class="token punctuation">,</span>\n            <span class="token single-quoted-string string">\'state\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token single-quoted-string string">\'required\'</span><span class="token punctuation">,</span>\n            <span class="token single-quoted-string string">\'email\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token single-quoted-string string">\'email\'</span><span class="token punctuation">,</span>\n            <span class="token single-quoted-string string">\'event_logo\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token single-quoted-string string">\'image\'</span><span class="token punctuation">,</span>\n            <span class="token single-quoted-string string">\'featured_img\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token single-quoted-string string">\'image\'</span>\n        <span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>Passport doesn\'t support UUID user IDs</h2>\n<p>Here\'s a quick fix if you have any issues with creating Client IDs for OAuth2.0 authenticated apps using Passport. </p>\n<p>Since we swapped the user ID for a UUID instead of incrementing integer, Passport creates a table called <code class="language-text">oauth_access_tokens</code> that references an incrementing ID, instead of UUID. To get it working, we have to create a new migration that drops the column and creates a new column.</p>\n<blockquote>\n<p>Normally we\'d just update the column, but the <code class="language-text">doctrine\\dbal</code> library used by Laravel doesn\'t support UUIDs. </p>\n</blockquote>\n<ol>\n<li>Drop the user id column (since Laravel\'s dbal dependency doesn\'t support changing columns to uuid) <code class="language-text">php artisan make:migration drop_user_id_on_oauth_access_tokens</code>:</li>\n</ol>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code class="language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Schema</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Schema<span class="token punctuation">\\</span>Blueprint</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Migrations<span class="token punctuation">\\</span>Migration</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">DropUserIdOnOauthAccessTokens</span> <span class="token keyword">extends</span> <span class="token class-name">Migration</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * Run the migrations.\n     *\n     * @return void\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Schema<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'oauth_access_tokens\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>Blueprint <span class="token variable">$table</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token variable">$table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dropColumn</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'user_id\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * Reverse the migrations.\n     *\n     * @return void\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Schema<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'oauth_access_tokens\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>Blueprint <span class="token variable">$table</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token variable">$table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dropColumn</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'user_id\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ol start="3">\n<li>Add migration to insert the user ID column as UUID <code class="language-text">php artisan make:migration update_oauth_access_tokens_with_uuids</code>:</li>\n</ol>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code class="language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Schema</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Schema<span class="token punctuation">\\</span>Blueprint</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Migrations<span class="token punctuation">\\</span>Migration</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">UpdateOauthAccessTokensWithUuids</span> <span class="token keyword">extends</span> <span class="token class-name">Migration</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * Run the migrations.\n     *\n     * @return void\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Schema<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'oauth_access_tokens\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>Blueprint <span class="token variable">$table</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token variable">$table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'user_id\'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token variable">$table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">primary</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'user_id\'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * Reverse the migrations.\n     *\n     * @return void\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Schema<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'oauth_access_tokens\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>Blueprint <span class="token variable">$table</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token variable">$table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">integer</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'user_id\'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Reset the database (again) and migrate the new structure:</p>\n<p><code class="language-text">docker-compose exec workspace php artisan migrate:fresh</code></p>\n<h2><a href="https://github.com/barryvdh/laravel-cors">Enable CORS</a></h2>\n<p>Install CORS dependency and add to Kernel.php. This will allow you to create an app on the same server and enable communication to the API. When we run this API, it\'ll deploy to <code class="language-text">http://localhost/</code>. And when we create a React app for the frontend (to display data), it\'ll deploy to <code class="language-text">http://localhost:3000</code>. Since it\'s on the same server, but different ports, you\'ll receive a cross-domain reference error. </p>\n<blockquote>\n<p>Enabling CORS on the API endpoints allows us anyone to access the API on any server. So if you\'re going to deploy to production, make sure to limit the hosts to servers you trust (unless your API is public).</p>\n</blockquote>\n<h2>API in a day</h2>\n<p>And that\'s about it, your API is ready for consumption by another application! </p>\n<p>In the next part of this series we\'ll explore how to create a server-side rendered ReactJS admin dashboard using NextJS, styled with Material UI, and authenticated using our OAuth2 API. That\'s a lot of words and tech in one sentence, and the article itself be more than a mouthful to swallow, but I\'ll try my best to make it as simple as possible! üëç</p>\n<p>Stay tuned! üôà\nRyo</p>\n<hr>\n<p><strong>References</strong>:</p>\n<ul>\n<li><a href="https://laravel.com/docs/5.6/installation">Laravel installation</a></li>\n<li><a href="http://laradock.io/documentation/">http://laradock.io/documentation/</a></li>\n<li><a href="https://medium.com/@steveazz/setting-up-uuids-in-laravel-5-552412db2088">https://medium.com/@steveazz/setting-up-uuids-in-laravel-5-552412db2088</a></li>\n<li><a href="https://github.com/webpatser/laravel-uuid">https://github.com/webpatser/laravel-uuid</a></li>\n<li><a href="https://laravel.com/docs/5.0/configuration#after-installation">Naming your Laravel application</a></li>\n<li><a href="https://stackoverflow.com/questions/41376928/laravel-5-3-passport-jwt-authentication">Quickly creating JWT tokens using Laravel Passport</a></li>\n<li><a href="https://laracasts.com/discuss/channels/eloquent/uuid-type-change-to-nullable-through-migrations-not-working">Doctrine doesn\'t support changing MySQL columns to UUID</a></li>\n<li><a href="https://github.com/barryvdh/laravel-cors">Enable CORS</a></li>\n<li><a href="https://github.com/zeit/next.js/issues/153#issuecomment-257924301">NextJS login with protected routes example</a></li>\n</ul>',
frontmatter:{title:"Creating an event ticketing service (Laravel API + ReactJS + NextJS + Material UI)",cover_image:{publicURL:"/static/Laravel-API-ReactJS-NextJS-Material-UI-1920px-b75fd7f556f9e1971fc8c520fd0a45f1.jpg",childImageSharp:{sizes:{tracedSVG:"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='267' viewBox='0 0 400 267' version='1'%3E%3Cpath d='M0 72a597 597 0 0 0 0 81v7l3 1 4 1H0v66h4l6-2c4-2 5-1 10 6l5 6 6 6c0 4 2 4 4 3 1-2 2-2 3-1l6 3c6 4 9 7 8 8-1 3-3 8-2 9a3739 3739 0 0 0 212-3l4-1 3-2c1-1 1-2-1-4l-3-4-3 3c-3 4-4 4-8 3-6-1-10-4-9-6v-4l1-2 1 1 1 1c1-1 8 5 8 7h1l1-2c-1-3 0-4 2-5s2-1 1-2h-2l-4 1c-2 0-15-6-14-7l-2-5-1-5c2 0 13 8 15 10s2 2 4 1h5c1 1 3 1 6-1h6l3-1c2-2 3-1 7 3 4 5 5 5 13 5h6l-3-4c-1-2-3-3-10-4-9-2-15-5-14-7l-2-4c-2-2-3-3-2-4 1-3 11-9 14-9 4 0 4-1 1-4-2-2-2-2 0-4l1-8v-8h5l3 4a558 558 0 0 1 19 19c3 3 3 3 5 1h1l2 1v-1c-3-1 2-9 6-9l5-4 4-4 1-1 1-1 3-2c1-2 4-3 7 0 2 1 2 1 2-1l1-1c2 0 2 0 0-2-1-2-1-2 2-2l4-1-2-1c-2 0-2-1-1-4 1-2 2-4 1-8 0-7 2-10 5-7 1 2 3 2 4 2 2-1 3-4 1-6v-2a63 63 0 0 1 17-16l4-1c4 0 4 0 2-1-2-2 0-7 2-7v-1c-1-2 0-6 2-6l1-1 1-1v2l2 2v5a2626 2626 0 0 0 3-64V0h-36a159 159 0 0 0-37 1L164 0H0v72m377-59c-1 3-2 3-6 3-3 0-4 0-5 4-2 5-2 5-4 0l-2-3-4 1c-3 0-4 0-4 2l-1 1-1 2c-1 4-3 2-2-2l-1-5-3-1-2-2v2l-3 1c-2 0-5 3-5 7l-2 1v-7l-2 1v3l-1-3c0-2-1-2-5-2h-4v4l-1 4c-1 0-2 1-1 2l-1 1c-2 0 1 5 5 8 3 3 5 4 5 2 0-1 6-1 7 1l-2 1c-4 1-4 1-1 5l5 4 6 5 6 3c1 0 2 1 2 3l4 4 6 5c2 3 10 3 11 0 0-4 2-3 4 0 5 8 15 9 21 3l4-3V16h-3c-5 0-7-1-6-3h-2l-2 3c1 1-1 3-2 3l-1-2c1-6 0-7-3-7-2 0-3 1-4 3m-61 73l-1 4-1 3-5 5 3 4 1 2-1 1 1 1 2 1c0 2 3 5 4 5l1-1 1-2c2-1 2-1 5 1 4 2 6 1 6-4 0-2 0-3 1-2l1-1 1-1c3-2 3-4 0-7l-3-5c0-4-3-6-6-4-2 1-3 2-5 0h-5m-34 17c-1 2-2 2-4 2-3 0-4 1-5 2v2c2 0 2 0 1 2s-2 2-3 2v-3h-2l-3 2c-5 1-5 5-1 7h5l3-1h3l1-2 1-1c2 0 3-2 3-4l2-5v-3c-1-2-1-2-1 0m7 8l-4 4-14 19-3 4-3-5c-6-8-9-12-10-11l5 10c4 5 6 9 5 10a1628 1628 0 0 0-10 15c-2 1-5 0-6-1h-1l-9 1h-9v-16l7 1c8 0 14-1 14-2l-10-1h-11v-14h10l12-1c1-2 0-2-12-2h-13v38h15c14 0 15-1 16-3a190 190 0 0 1 9-12c1-3 1-3 8 7l7 8c1 0 1-2-1-4v-4c-2 0-4-2-5-5l-4-5c-2-1 1-6 11-20l9-13c2-3 0-2-3 2m-232-2c-9 1-9 1-6 8a178 178 0 0 1 13 31l4 4c2 6 2 6 14 3l11-2 6 10c6 11 7 11 13 9l16-6c16-6 15-5 8-14l-6-8 6-2c7-2 12-7 9-10h-2l-1 3c-2 1-5-4-4-6l-1-2c-1 1-2 0-4-1-3-3-3-3-10-2l-8 2 3 8 5 7-9 2a503 503 0 0 0-18 4l-11-17-12-20c-1-2-1-2-16-1m4 3l-7 1a405 405 0 0 0 20 39l17-3a525 525 0 0 0-23-38l-7 1m271 11c0 5 0 7 2 9s3 1 3-3c0-5 0-4 4-2 3 2 3 2 7 0 3-2 3-2 3 0l-2 1-1 1h-1l-1 1-1 1-1 4c0 4 6 8 10 5h4c2 0 2 0 1-1 0-2 0-2 2-3 2 0 2 0 2-5 0-7 0-6-2-4l-2 3c0 2-6 6-9 6-1-1-1-2 2-3 3-3 4-3 4-9 0-7 0-7-7-3l-5 2-5-3c-7-4-7-4-7 3m-46-1l-2 1c0 1 3 2 8 2h5v17l1 17c1 3 2-1 2-17l1-17h6l6-1c0-2-22-3-27-2m-90 19c0 15 0 18 2 18l1-5c0-6 2-8 4-6s3 1 2-1l-4-2c-2 0-2-1-2-9v-9l2 3a124 124 0 0 1 16 24l7 8a1945 1945 0 0 0-5-11 1399 1399 0 0 0-21-29c-2 0-2 2-2 19m-73-13c-2 1-2 1-1 2l2 3h2v3c-2 3 1 4 6 3 4-1 4-1 2-3l-3-1c-2-1-2-1 0-1 3 0 4-2 1-5-2-2-6-3-9-1m-8 19a662 662 0 0 1-17 5l10 15 28-9-3-4-5-7-2-3-11 3m91 4l-1 3c-2 1-1 4 2 8 2 4 2 4 1 9-2 5-2 5 0 8 3 5 4 3 6-12 0-7 0-7-3-13-5-6-5-6-5-3m190 48l-2 1-2 1h-1c0-1-3 0-5 2s-2 2-1 4l6 1 4 1 3 1c2 1 2 1 2-5s0-7-2-7l-2 1m-248 15l-1 6-1 3c-2 2-2 10 0 12 2 3 4 10 3 18 0 4 0 5 1 3l3-2c2 0 3-1 4-3l3-7 3-4-5-5-5-5-1-8-1-10c-1-1-2 0-3 2m176 28l-4 5c-3 3-1 5 7 5l5 1 2 1c3 0 1-4-3-6-1-1-3-3-3-5-1-4-2-4-4-1m-48 1l-5 1c-7 1-7 1-3 4l2 5 2 3 4 3c1 1 1 1 1-1 0-3 4-7 7-7l2 1c0 3 2 3 5 2 4-2 4-4-1-5l-6-2a621 621 0 0 1-8-4' fill='lightgray' fill-rule='evenodd'/%3E%3C/svg%3E",src:"/static/Laravel-API-ReactJS-NextJS-Material-UI-1920px-b75fd7f556f9e1971fc8c520fd0a45f1-4e8db.jpg",srcSet:"/static/Laravel-API-ReactJS-NextJS-Material-UI-1920px-b75fd7f556f9e1971fc8c520fd0a45f1-7cc04.jpg 310w,\n/static/Laravel-API-ReactJS-NextJS-Material-UI-1920px-b75fd7f556f9e1971fc8c520fd0a45f1-69042.jpg 620w,\n/static/Laravel-API-ReactJS-NextJS-Material-UI-1920px-b75fd7f556f9e1971fc8c520fd0a45f1-4e8db.jpg 1240w,\n/static/Laravel-API-ReactJS-NextJS-Material-UI-1920px-b75fd7f556f9e1971fc8c520fd0a45f1-50ab1.jpg 1860w,\n/static/Laravel-API-ReactJS-NextJS-Material-UI-1920px-b75fd7f556f9e1971fc8c520fd0a45f1-e738f.jpg 1920w"}}},date:"02 June, 2018",tags:["api","laravel","react","nextjs","material ui","ssr","full stack","backend","frontend"],section:"blog"},fields:{slug:"/blog/2018/create-ticketing-service-using-laravel-nextjs-part-1/"}},relatedPosts:null},pathContext:{tag:"material ui",slug:"/blog/2018/create-ticketing-service-using-laravel-nextjs-part-1/"}}}});
//# sourceMappingURL=path---blog-2018-create-ticketing-service-using-laravel-nextjs-part-1-613d452b637b2159b3f9.js.map