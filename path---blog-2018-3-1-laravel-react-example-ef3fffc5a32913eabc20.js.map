{"version":3,"sources":["webpack:///path---blog-2018-3-1-laravel-react-example-ef3fffc5a32913eabc20.js","webpack:///./.cache/json/blog-2018-3-1-laravel-react-example.json"],"names":["webpackJsonp","426","module","exports","data","blog","html","frontmatter","title","cover_image","childImageSharp","sizes","tracedSVG","src","srcSet","date","tags","fields","slug","relatedPosts","pathContext","tag"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,KAAA;AAA2ynCC,aAA0jHC,MAAA,uDAAAC,aAA8EC,iBAAmBC,OAASC,UAAA,4nCAAAC,IAAA,gGAAAC,OAAA,yZAA+oDC,KAAA,iBAAAC,MAAA,mFAAmHC,QAAWC,KAAA,0CAAgDC,aAAA,MAAqBC,aAAgBC,IAAA,WAAAH,KAAA","file":"path---blog-2018-3-1-laravel-react-example-ef3fffc5a32913eabc20.js","sourcesContent":["webpackJsonp([169244524746636],{\n\n/***/ 426:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"blog\":{\"html\":\"<p>We'll be creating a blog using <a href=\\\"https://www.gatsbyjs.org\\\">GatsbyJS</a>, a static site generator for <a href=\\\"https://reactjs.org/\\\">React</a>. GatsbyJS takes your content, either static files or external data from an API, and generates pages that are hardcoded with the data. Rather than calling the API for your latest blog posts for each request, all your posts are pre-cached into separate HTML files. This allows you to serve your entire website over a CDN. And without any external API calls or even server-side rendering, the website loads lightning fast -- and is offline-friendly.</p>\\n<p>Today we'll be creating a static blog generated by GatsbyJS, written in Markdown, and we'll deploy on Github Pages to host the website. </p>\\n<h2>But first, what is GatsbyJS?</h2>\\n<p><strong>GatsbyJS</strong> is a generator that allows you to code React apps that get compiled into static assets (HTML + JS). Each <strong>page</strong> is a technically React <strong>component</strong> that gets converted into an HTML and JS file when it's time to build the production site. If you've ever worked with a generator like <a href=\\\"https://jekyllrb.com/\\\">Jekyll</a>, which converts code like <em>Liquid</em> and <em>Markdown</em> into HTML, you'll be familiar with this kind of concept.</p>\\n<p>What makes GatsbyJS special is it's implementation of <strong><a href=\\\"https://graphql.org/\\\">GraphQL</a></strong>. All of your content is served through a GraphQL server on the development side. When it comes time to compile the static assets, GatsbyJS queries the GraphQL server for the data and inserts it into your HTML files. </p>\\n<h2>And what the heck is a JAMstack?</h2>\\n<p>Static websites are growing in popularity with the <a href=\\\"jamstack.org\\\">JAMstack revolution</a>. JAM stands for Javascript, API, and Markup. What it basically means is your site is only comprised of:</p>\\n<ul>\\n<li><strong>Javascript</strong> (usually a framework like React)</li>\\n<li><strong>API</strong> (like an RSS feed, or JSON API endpoint) <em>optional</em> </li>\\n<li><strong>Markup</strong> (HTML, CSS, any media like images)</li>\\n</ul>\\n<p>The goal is to create a website is comprised of only client-side HTML + CSS + JS. No need to install <em>Node</em>, <em>Ruby</em>, <em>PHP</em>, or any other server-side language. This means we could even deploy this directly on a CDN like <em>S3</em> on <em>AWS</em> or <a href=\\\"http://netlify.com\\\"><em>Netlify</em></a>.</p>\\n<blockquote>\\n<p>When a website is made this simple, you can deploy it nearly anywhere, since most servers support HTML, CSS, and JS. </p>\\n</blockquote>\\n<p>There are plenty of benefits to making your website static, from <strong>lighting fast load times</strong> to <strong>decreased server load</strong>, and Gatsby makes it <em>fairly</em> easy to pump out your own. You can find a great <a href=\\\"https://www.gatsbyjs.org/tutorial/\\\"><em>'Getting Started'</em> guide</a> on the official GatsbyJS site, as well as many of the concepts we convey in this tutorial. If you get lost, I'd poke around there and see if it helps paint a clearer picture.</p>\\n<p>Let's build and deploy a static blog!</p>\\n<h2>Installing Gatsby</h2>\\n<h3>Using the CLI</h3>\\n<p>You can either install Gatsby using their CLI, which is recommended:</p>\\n<p><code class=\\\"language-text\\\">npm install --global gatsby-cli</code></p>\\n<p>Then run this command in the folder where you want the project:</p>\\n<p><code class=\\\"language-text\\\">gatsby new gatsby-blog</code></p>\\n<h3>Classic Git Way</h3>\\n<p>Or you can <a href=\\\"https://github.com/gatsbyjs/gatsby\\\">clone the repo from Github</a> and run an NPM install:</p>\\n<p><code class=\\\"language-text\\\">git clone https://github.com/gatsbyjs/gatsby.git gatsby-blog &amp;&amp; cd gatsby-blog &amp;&amp; npm install</code></p>\\n<p>Note if you opt against installing the CLI, you'll have to run NPM scripts instead of <code class=\\\"language-text\\\">gatsby</code> commands when building for development or production.</p>\\n<h2>Spin up the server</h2>\\n<p>Run the following command to start up your GatsbyJS blog locally:</p>\\n<p><code class=\\\"language-text\\\">gatsby develop</code></p>\\n<p>This command runs the build process, compiling the code into static assets, and gives you access to your GatsbyJS site at <a href=\\\"http://localhost:8000/\\\">http://localhost:8000/</a>. And to make development easier, when you update your code while this is running, it'll re-compile -- allowing you to refresh and see changes instantly.</p>\\n<h2>Creating the content</h2>\\n<p>Our blog will use Markdown files to contain and display our posts. We'll be using the standard Markdown format with a top header. Make a new file in <code class=\\\"language-text\\\">src/blog/first-blog-post.md</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\"><span class=\\\"token hr punctuation\\\">---</span>\\ntitle: My first blog post\\n<span class=\\\"token title important\\\">date: \\\"2018-04-20\\\"\\n<span class=\\\"token punctuation\\\">---</span></span>\\n\\nDo you enjoy Gabe the Dog? He is the immortal lead singer of Bork, a European band that does covers of popular pop songs from the 80s, 90s, and today.\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>iframe</span> <span class=\\\"token attr-name\\\">width</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>560<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">height</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>315<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://www.youtube.com/embed/c--etqIJcow?ecver=1<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">frameborder</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>0<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">allowfullscreen</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>iframe</span><span class=\\\"token punctuation\\\">></span></span>\\n</code></pre>\\n      </div>\\n<p>Now that we have some content, let's display it on the website.</p>\\n<h2>Grabbing our Markdown files</h2>\\n<p>GatsbyJS uses components to create pages, so we could literally just create new JS files for each blog post. But that's messy and inefficient. So what do we do instead? Gatsby offers the ability to create <em>source</em> plugins that pull data from certain endpoints, like RSS, Medium, or Github. We're going to make Markdown in the same folder as the Gatsby project, so we'll be using the Filesystem source plugin to grab files locally.</p>\\n<p>We'll also install a <em>transformer</em> plugin, which takes GraphQL data and processes it. In our particular case, we want to take our data and process the Markdown into HTML. Run the following command to install that plugin:</p>\\n<p><code class=\\\"language-text\\\">npm install --save gatsby-source-filesystem gatsby-transformer-remark</code></p>\\n<p>And add the following JSON to your config to enable both plugins. If you look close at the <code class=\\\"language-text\\\">path</code> property of the filesystem plugin, we load our blog articles from the blog folder:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\">plugins<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    // react-helmet is included by default with gatsby\\n    `gatsby-plugin-react-helmet`<span class=\\\"token punctuation\\\">,</span>\\n    `gatsby-transformer-remark`<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      resolve<span class=\\\"token operator\\\">:</span> `gatsby-source-filesystem`<span class=\\\"token punctuation\\\">,</span>\\n      options<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        name<span class=\\\"token operator\\\">:</span> `src`<span class=\\\"token punctuation\\\">,</span>\\n        path<span class=\\\"token operator\\\">:</span> `$<span class=\\\"token punctuation\\\">{</span>__dirname<span class=\\\"token punctuation\\\">}</span>/src/blog/`<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n</code></pre>\\n      </div>\\n<p>Restart your development server to commit the changes (hit CTRL + C to terminate the server and then run <code class=\\\"language-text\\\">gatsby develop</code> again). Now run this GraphQL query on your local <a href=\\\"http://localhost:8000/___graphql\\\">GraphiQL development panel</a>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token punctuation\\\">{</span>\\n allFile <span class=\\\"token punctuation\\\">{</span>\\n  edges <span class=\\\"token punctuation\\\">{</span>\\n    node <span class=\\\"token punctuation\\\">{</span>\\n      name\\n      extension\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Enter the query and hit CMD + Enter. You should see a JSON object on the right side with the blog post we just made.</p>\\n<h2>Making pages dynamically</h2>\\n<p>We could easily start querying this data on our pages and displaying our posts:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react\\\"</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// displays an object of the query data in console</span>\\n  <span class=\\\"token comment\\\">// simply access what you need using a map function</span>\\n  <span class=\\\"token comment\\\">// data.allFile.edges.map()</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>Hello world<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> query <span class=\\\"token operator\\\">=</span> graphql<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n  query MyFilesQuery {\\n    allFile {\\n      edges {\\n        node {\\n          relativePath\\n          prettySize\\n          extension\\n          birthTime(fromNow: true)\\n        }\\n      }\\n    }\\n  }\\n`</span></span>\\n</code></pre>\\n      </div>\\n<p>Which makes for a great frontpage with a list of all of our posts, but we end up at the same dilemma as before. If we want separate pages for each blog post, we have to make new components to query each page individually. That's where the GatsbyJS API comes in.</p>\\n<p>GatsbyJS is capable of taking a GraphQL query and creating pages for every object based off a template. So for every Markdown file we create, when we build our GatsbyJS website, we'll get an HTML file with the Markdown parsed into readable text.</p>\\n<p>Paste this into your <code class=\\\"language-text\\\">gatsby-node.js</code> file.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`path`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> createFilePath <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`gatsby-source-filesystem`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nexports<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onCreateNode</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> node<span class=\\\"token punctuation\\\">,</span> getNode<span class=\\\"token punctuation\\\">,</span> boundActionCreators <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> createNodeField <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> boundActionCreators\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>internal<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">===</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`MarkdownRemark`</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">const</span> slug <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createFilePath</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> node<span class=\\\"token punctuation\\\">,</span> getNode<span class=\\\"token punctuation\\\">,</span> basePath<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`pages`</span></span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token function\\\">createNodeField</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n            node<span class=\\\"token punctuation\\\">,</span>\\n            name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`slug`</span></span><span class=\\\"token punctuation\\\">,</span>\\n            value<span class=\\\"token punctuation\\\">:</span> slug<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nexports<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">createPages</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> graphql<span class=\\\"token punctuation\\\">,</span> boundActionCreators <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> createPage <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> boundActionCreators\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">graphql</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n      {\\n        allMarkdownRemark {\\n          edges {\\n            node {\\n              fields {\\n                slug\\n              }\\n            }\\n          }\\n        }\\n      }\\n    `</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>result <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n                result<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span>allMarkdownRemark<span class=\\\"token punctuation\\\">.</span>edges<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> node <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token function\\\">createPage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n                        path<span class=\\\"token punctuation\\\">:</span> node<span class=\\\"token punctuation\\\">.</span>fields<span class=\\\"token punctuation\\\">.</span>slug<span class=\\\"token punctuation\\\">,</span>\\n                        component<span class=\\\"token punctuation\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`./src/templates/blog-post.js`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n                        context<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n                            <span class=\\\"token comment\\\">// Data passed to context is available in page queries as GraphQL variables.</span>\\n                            slug<span class=\\\"token punctuation\\\">:</span> node<span class=\\\"token punctuation\\\">.</span>fields<span class=\\\"token punctuation\\\">.</span>slug<span class=\\\"token punctuation\\\">,</span>\\n                        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n                    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>First, we'll create slugs based off our Markdown file names, and add them to the GraphQL query results. Then we'll use the <code class=\\\"language-text\\\">createPages</code> API to make new pages based off a GraphQL query for the Markdown posts. Then we'll use the <code class=\\\"language-text\\\">createPage</code> function to actually generate the page based off the new file path and component that'll act as the template.</p>\\n<p>When Gatsby runs the build process, it'll run this script as well, which will trigger the creation of pages.</p>\\n<p>There's not much to explain here since this is just very API specific code. It's simple enough to be self-explanatory, and anything that's unclear is probably opinionated decisions from the API.</p>\\n<h2>The Blog Template</h2>\\n<p>Now that our blog posts are ready to get converted into static pages, let's actually create the template we referenced above <code class=\\\"language-text\\\">./src/templates/blog-post.js</code>. Make a new file there and paste this into it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> post <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">.</span>markdownRemark<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>post<span class=\\\"token punctuation\\\">.</span>frontmatter<span class=\\\"token punctuation\\\">.</span>title<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token operator\\\">&lt;</span>div dangerouslySetInnerHTML<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> __html<span class=\\\"token punctuation\\\">:</span> post<span class=\\\"token punctuation\\\">.</span>html <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> query <span class=\\\"token operator\\\">=</span> graphql<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n  query BlogPostQuery($slug: String!) {\\n    markdownRemark(fields: { slug: { eq: $slug } }) {\\n      html\\n      frontmatter {\\n        title\\n      }\\n    }\\n  }\\n`</span></span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>Show me the posts!</h2>\\n<p>We've got our blog posts as Markdown ready to get converted, we have the React template, the only thing left is linking to the posts.</p>\\n<p>Head over to your <code class=\\\"language-text\\\">index.js</code> file and paste the following:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> Link <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"gatsby-link\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>h1 style<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span>display<span class=\\\"token punctuation\\\">:</span>  <span class=\\\"token string\\\">'inline-block'</span><span class=\\\"token punctuation\\\">,</span> borderBottom<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'1px solid'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n        Amazing Pandas Eating Things\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>h4<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>data<span class=\\\"token punctuation\\\">.</span>allMarkdownRemark<span class=\\\"token punctuation\\\">.</span>totalCount<span class=\\\"token punctuation\\\">}</span> Posts<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h4<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token punctuation\\\">{</span>data<span class=\\\"token punctuation\\\">.</span>allMarkdownRemark<span class=\\\"token punctuation\\\">.</span>edges<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> node <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token operator\\\">&lt;</span>div key<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>node<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n          <span class=\\\"token operator\\\">&lt;</span>Link\\n            to<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>node<span class=\\\"token punctuation\\\">.</span>fields<span class=\\\"token punctuation\\\">.</span>slug<span class=\\\"token punctuation\\\">}</span>\\n            css<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> textDecoration<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`none`</span></span><span class=\\\"token punctuation\\\">,</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`inherit`</span></span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token operator\\\">&lt;</span>h3 style<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> marginBottom<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'4px'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n              <span class=\\\"token punctuation\\\">{</span>node<span class=\\\"token punctuation\\\">.</span>frontmatter<span class=\\\"token punctuation\\\">.</span>title<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\" \\\"</span><span class=\\\"token punctuation\\\">}</span>\\n              <span class=\\\"token operator\\\">&lt;</span>span style<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span>color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"#BBB\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>— <span class=\\\"token punctuation\\\">{</span>node<span class=\\\"token punctuation\\\">.</span>frontmatter<span class=\\\"token punctuation\\\">.</span>date<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>span<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h3<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>node<span class=\\\"token punctuation\\\">.</span>excerpt<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> query <span class=\\\"token operator\\\">=</span> graphql<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n  query IndexQuery {\\n    allMarkdownRemark(sort: {fields: [frontmatter___date], order: DESC}) {\\n      totalCount\\n      edges {\\n        node {\\n          id\\n          frontmatter {\\n            title\\n            date(formatString: \\\"DD MMMM, YYYY\\\")\\n          }\\n          fields {\\n            slug\\n          }\\n          excerpt\\n        }\\n      }\\n    }\\n  }\\n`</span></span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>We query using the MarkdownRemark endpoint and grab the titles, slugs, and excerpts of our latest blog posts. Then we loop through the data to show the data, while using the <code class=\\\"language-text\\\">&lt;Link&gt;</code> component to link directly to the blog post (using the slug). </p>\\n<blockquote>\\n<p>Dont forget, you can always test out the query in the GraphiQL dev panel to make sure you have the right properties.</p>\\n</blockquote>\\n<p>If you restart your dev server at this point, you should see a list of the Markdown files you created. And if you click them, they'll take you to another page with the complete blog post. </p>\\n<p><strong>Congratulations!</strong> You've built your first static blog. You can stop here and just run <code class=\\\"language-text\\\">gatsby build</code> to make a production-ready version of your blog available in the <code class=\\\"language-text\\\">public</code> folder. Upload that directly to your FTP or web host and you're good to go. </p>\\n<p><strong>But why stop there?</strong> One of the principles of the JAMstack is using <strong>Git</strong> for version control. This allows you, or any dev on your team, to easily clone the website's repository and create an exact replica of the entire website. It also allows you to quickly push new changes to the server, rather than uploading files individually through an FTP. </p>\\n<h2>Let's git started</h2>\\n<p>If you haven't already installed Git on your computer, head over to the official website and download it. Then open up Terminal, <code class=\\\"language-text\\\">cd</code> to your project's root, and run the following command:</p>\\n<p><code class=\\\"language-text\\\">git init</code></p>\\n<p>This creates a new Git repository in your folder. Now let's commit all the changes we've made to the new repository:</p>\\n<p><code class=\\\"language-text\\\">git add -A &amp;&amp; git commit -m &quot;Your Message&quot;</code></p>\\n<p>This takes all the files in the folder and adds them to the Git repo. When you make changes, you'll be able to track the differences between previous versions before each commit (<code class=\\\"language-text\\\">git diff</code>). The message you leave usually hints at what kind of changes were made to the code. In this case, something like \\\"Initial commit\\\" or \\\"1.0\\\" is appropriate.</p>\\n<h2>Connect with Github</h2>\\n<p>Connecting with Github allows you to promote the highest accessibility for developers looking to access the website's source code, and to take advantage of Github's free hosting](<a href=\\\"https://pages.github.com/\\\">https://pages.github.com/</a>). You'll sign up for a Github account if you don't already have one, create a public repo, and push (or upload) the project files to Github through Git commands.</p>\\n<h3>Sign up on Github</h3>\\n<ol>\\n<li>Create a new account on <a href=\\\"http://github.com\\\">Github</a></li>\\n<li>Login to your account.</li>\\n<li>Click the plus sign in the top menu and click \\\"New repository\\\" from the dropdown.</li>\\n<li>Name your repo anything you'd like, then click the big green \\\"Create repository\\\" button.</li>\\n</ol>\\n<h3>Sync up your repo with Github</h3>\\n<p>To make syncing up to Github a single click we'll install <code class=\\\"language-text\\\">gh-pages</code>. This is a Github Pages package that pushes changes to Github and updates the page. Run the following command to install the package:</p>\\n<p><code class=\\\"language-text\\\">npm install --only=dev gh-pages</code></p>\\n<p>You'll also need to modify the <code class=\\\"language-text\\\">package.json</code> with a new script. This script runs the <code class=\\\"language-text\\\">gatsby build</code> process, then runs the <code class=\\\"language-text\\\">gh-pages</code> command to deploy to Github:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\">  <span class=\\\"token punctuation\\\">{</span>\\n        scripts<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token property\\\">\\\"deploy\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"gatsby build --prefix-paths &amp;&amp; gh-pages -d public\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>And since Github Pages hosts the blog in a subdirectory (e.g. <code class=\\\"language-text\\\">yourname.github.io/this-subdirectory/</code>), we have to add a path prefix to the configuration <code class=\\\"language-text\\\">gatsby-config.js</code> to let GatsbyJS know it's not in the root:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  siteMetadata<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    title<span class=\\\"token operator\\\">:</span> `Your site Name`<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  pathPrefix<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"/your-repo-name\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>Deploy!</h3>\\n<p>Go to your new repo on Github, click the Clone button, and copy the URL (ending in .git). Then run the following command to add a \\\"remote\\\" repo to your local git repo:</p>\\n<p><code class=\\\"language-text\\\">git remote add origin http://github.com/username/repo-name.git</code></p>\\n<p>Now we can build the site and push it to Github. Type in the following command, enter in your Github password when prompted, and profit!:</p>\\n<p><code class=\\\"language-text\\\">npm run deploy</code></p>\\n<p>The <code class=\\\"language-text\\\">public</code> folder of your blog will be uploaded to the <code class=\\\"language-text\\\">gh-pages</code> branch of your repo. If you click the dropdown labeled <strong>Branch: master</strong> you should see the gh-pages branch.</p>\\n<h3>Browse your blog</h3>\\n<p>Head back over to your repository on Github and see if you successfully pushed (or uploaded) your files. If it worked, head over to the project settings page. Here, you'll want to make sure Github Pages is enabled and that it's set to the <code class=\\\"language-text\\\">gh-pages</code> branch.</p>\\n<p>You should be able to access the blog by going to <a href=\\\"http://yourusername.github.io/repo-name/\\\">http://yourusername.github.io/repo-name/</a>.</p>\\n<h2>Maybe not the Wordpress 5-minute install</h2>\\n<p>It might not be the most lightning fast blog creation out there, between the time it takes to install <code class=\\\"language-text\\\">npm</code> packages and the time you waste fussing with <code class=\\\"language-text\\\">git</code>. Though you have to admit that in a fairly short time span we were able to create a static blog ecosystem that deploys instantly. It's incredible to see the potential of GatsbyJS, and the different kind of experiences you can create compared to standard CMS platforms like Wordpress or Drupal.</p>\\n<p>If you've ever been thinking about taking the leap into a progressive web application (PWA), you want to try static, or you've just been interested in migrating off Wordpress -- I hope this guide helped you discover an alternative to the mainstream blogging experience.</p>\\n<h2>The potential is endless</h2>\\n<p>This is the first part in a series of articles we'll be writing featuring GatsbyJS. We've just dipped our toe in the water here, there's a wealth of plugins and potential we've yet to explore with this framework. We'll be looking into creating projects that explore or push the limitations of the JAMstack, from a portfolio site using the Behance API, to a static e-commerce store using Stripe, to building a true JAM app on a CDN with automatic and atomic builds.</p>\\n<p>Keep an eye on the <a href=\\\"http://stayregular.net/blog/tag:gatsbyjs\\\">#GatsbyJS</a> tag to see our next post!</p>\\n<hr>\\n<p><strong>Keep Reading:</strong></p>\\n<ul>\\n<li><a href=\\\"http://kbroman.org/github_tutorial/pages/init.html\\\">Git guide - Start a new git repository</a></li>\\n<li><a href=\\\"https://jamstack.org/best-practices/\\\">JAMstack.org</a></li>\\n<li><a href=\\\"https://www.gatsbyjs.org\\\">GatsbyJS</a></li>\\n<li><a href=\\\"https://www.gatsbyjs.org/tutorial/\\\">GatsbyJS Tutorials</a></li>\\n<li><a href=\\\"https://www.gatsbyjs.org/packages/\\\">GatsbyJS Plugins</a></li>\\n<li><a href=\\\"https://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/\\\">How GatsbyJS Works with Github Pages</a></li>\\n<li><a href=\\\"https://www.gatsbyjs.org/packages/gatsby-source-filesystem/?=filesy\\\">gatsby-source-filesystem</a></li>\\n<li><a href=\\\"https://www.gatsbyjs.org/packages/gatsby-transformer-remark/?=remark\\\">gatsby-transformer-remark</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Deploy a Static React Blog using GatsbyJS and Github\",\"cover_image\":{\"childImageSharp\":{\"sizes\":{\"tracedSVG\":\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='268' viewBox='0 0 400 268' version='1'%3E%3Cpath d='M0 134v134h401V0H0v134m95-45l-15 15-3 25-4 26 18 19 19 18 20-14 22-15c1-1-1-3-13-15l-14-15 11-10 10-11-36-37-15 14m177 0c-12 3-27 12-35 21-12 13-10 23 10 36 7 5 7 5 2 7-17 8-22 27-7 27 13 0 21-10 20-23-1-5-1-6 2-7l3-2-1 5c-1 14 7 21 13 10l1-3 1 2 2 4c3 2 5-1 12-14l5-11 2 5c2 6 3 5-1 9-7 8-7 10-2 10 7 0 13-6 12-12-1-4 0-5 2-10 4-6 4-6 6-1 1 5 1 5-2 8-8 9-2 15 7 7 4-3 4-4 4-7v-4l7-1c7 0 8 0 12 3 5 3 6 7 3 10-2 3 0 4 2 2 4-4 2-12-4-17-5-3-14-3-19-1-4 2-6-2-6-10l1-6h-3c-4 0-6 3-6 6l-1 3-3 5c-4 6-5 4-5-5 0-5 0-5-2-5l-4 1-6 15c-7 14-9 17-6 6a2464 2464 0 0 0 0-10l-2-4c-1-5-7-5-13 1l-10 6c-5 3-5 3-7 1l-8-7c-15-12-12-23 11-36 19-11 42-11 42 0 0 14-27 27-39 20-5-3-5 0-1 4 3 2 5 2 11 2 21 0 36-11 36-28 0-5-5-11-11-13-5-1-19-1-25 1m-84 43l-1 4c0 3 0 3-4 3-2 0-3 1-3 2s1 2 3 2c4 0 4 0 4 3s1 4 2 4c2 1 2 0 2-3s0-4 2-4l3-1h2l1-1c0-2-1-2-4-2-4 0-4 0-4-4 0-3-2-5-3-3m90 10c-4 5-5 8-5 14 0 8 2 7 6-5s4-15-1-9m-28 16c-6 4-8 7-8 11 0 3 0 4 2 4 6 0 13-8 13-15 0-5-1-5-7 0' fill='lightgray' fill-rule='evenodd'/%3E%3C/svg%3E\",\"src\":\"/ryosuke-gatsby-blog/static/bulma-css-framework@1x-53d5bab8a2cf7b6967a74c098c1e42d9-4e8db.jpg\",\"srcSet\":\"/ryosuke-gatsby-blog/static/bulma-css-framework@1x-53d5bab8a2cf7b6967a74c098c1e42d9-7cc04.jpg 310w,\\n/ryosuke-gatsby-blog/static/bulma-css-framework@1x-53d5bab8a2cf7b6967a74c098c1e42d9-69042.jpg 620w,\\n/ryosuke-gatsby-blog/static/bulma-css-framework@1x-53d5bab8a2cf7b6967a74c098c1e42d9-4e8db.jpg 1240w,\\n/ryosuke-gatsby-blog/static/bulma-css-framework@1x-53d5bab8a2cf7b6967a74c098c1e42d9-a86c7.jpg 1812w\"}}},\"date\":\"21 March, 2018\",\"tags\":[\"design\",\"development\",\"react\",\"github\",\"gatsbyjs\",\"ssg\",\"static site generator\"]},\"fields\":{\"slug\":\"/blog/2018-3-1-laravel-react-example/\"}},\"relatedPosts\":null},\"pathContext\":{\"tag\":\"gatsbyjs\",\"slug\":\"/blog/2018-3-1-laravel-react-example/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-2018-3-1-laravel-react-example-ef3fffc5a32913eabc20.js","module.exports = {\"data\":{\"blog\":{\"html\":\"<p>We'll be creating a blog using <a href=\\\"https://www.gatsbyjs.org\\\">GatsbyJS</a>, a static site generator for <a href=\\\"https://reactjs.org/\\\">React</a>. GatsbyJS takes your content, either static files or external data from an API, and generates pages that are hardcoded with the data. Rather than calling the API for your latest blog posts for each request, all your posts are pre-cached into separate HTML files. This allows you to serve your entire website over a CDN. And without any external API calls or even server-side rendering, the website loads lightning fast -- and is offline-friendly.</p>\\n<p>Today we'll be creating a static blog generated by GatsbyJS, written in Markdown, and we'll deploy on Github Pages to host the website. </p>\\n<h2>But first, what is GatsbyJS?</h2>\\n<p><strong>GatsbyJS</strong> is a generator that allows you to code React apps that get compiled into static assets (HTML + JS). Each <strong>page</strong> is a technically React <strong>component</strong> that gets converted into an HTML and JS file when it's time to build the production site. If you've ever worked with a generator like <a href=\\\"https://jekyllrb.com/\\\">Jekyll</a>, which converts code like <em>Liquid</em> and <em>Markdown</em> into HTML, you'll be familiar with this kind of concept.</p>\\n<p>What makes GatsbyJS special is it's implementation of <strong><a href=\\\"https://graphql.org/\\\">GraphQL</a></strong>. All of your content is served through a GraphQL server on the development side. When it comes time to compile the static assets, GatsbyJS queries the GraphQL server for the data and inserts it into your HTML files. </p>\\n<h2>And what the heck is a JAMstack?</h2>\\n<p>Static websites are growing in popularity with the <a href=\\\"jamstack.org\\\">JAMstack revolution</a>. JAM stands for Javascript, API, and Markup. What it basically means is your site is only comprised of:</p>\\n<ul>\\n<li><strong>Javascript</strong> (usually a framework like React)</li>\\n<li><strong>API</strong> (like an RSS feed, or JSON API endpoint) <em>optional</em> </li>\\n<li><strong>Markup</strong> (HTML, CSS, any media like images)</li>\\n</ul>\\n<p>The goal is to create a website is comprised of only client-side HTML + CSS + JS. No need to install <em>Node</em>, <em>Ruby</em>, <em>PHP</em>, or any other server-side language. This means we could even deploy this directly on a CDN like <em>S3</em> on <em>AWS</em> or <a href=\\\"http://netlify.com\\\"><em>Netlify</em></a>.</p>\\n<blockquote>\\n<p>When a website is made this simple, you can deploy it nearly anywhere, since most servers support HTML, CSS, and JS. </p>\\n</blockquote>\\n<p>There are plenty of benefits to making your website static, from <strong>lighting fast load times</strong> to <strong>decreased server load</strong>, and Gatsby makes it <em>fairly</em> easy to pump out your own. You can find a great <a href=\\\"https://www.gatsbyjs.org/tutorial/\\\"><em>'Getting Started'</em> guide</a> on the official GatsbyJS site, as well as many of the concepts we convey in this tutorial. If you get lost, I'd poke around there and see if it helps paint a clearer picture.</p>\\n<p>Let's build and deploy a static blog!</p>\\n<h2>Installing Gatsby</h2>\\n<h3>Using the CLI</h3>\\n<p>You can either install Gatsby using their CLI, which is recommended:</p>\\n<p><code class=\\\"language-text\\\">npm install --global gatsby-cli</code></p>\\n<p>Then run this command in the folder where you want the project:</p>\\n<p><code class=\\\"language-text\\\">gatsby new gatsby-blog</code></p>\\n<h3>Classic Git Way</h3>\\n<p>Or you can <a href=\\\"https://github.com/gatsbyjs/gatsby\\\">clone the repo from Github</a> and run an NPM install:</p>\\n<p><code class=\\\"language-text\\\">git clone https://github.com/gatsbyjs/gatsby.git gatsby-blog &amp;&amp; cd gatsby-blog &amp;&amp; npm install</code></p>\\n<p>Note if you opt against installing the CLI, you'll have to run NPM scripts instead of <code class=\\\"language-text\\\">gatsby</code> commands when building for development or production.</p>\\n<h2>Spin up the server</h2>\\n<p>Run the following command to start up your GatsbyJS blog locally:</p>\\n<p><code class=\\\"language-text\\\">gatsby develop</code></p>\\n<p>This command runs the build process, compiling the code into static assets, and gives you access to your GatsbyJS site at <a href=\\\"http://localhost:8000/\\\">http://localhost:8000/</a>. And to make development easier, when you update your code while this is running, it'll re-compile -- allowing you to refresh and see changes instantly.</p>\\n<h2>Creating the content</h2>\\n<p>Our blog will use Markdown files to contain and display our posts. We'll be using the standard Markdown format with a top header. Make a new file in <code class=\\\"language-text\\\">src/blog/first-blog-post.md</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\"><span class=\\\"token hr punctuation\\\">---</span>\\ntitle: My first blog post\\n<span class=\\\"token title important\\\">date: \\\"2018-04-20\\\"\\n<span class=\\\"token punctuation\\\">---</span></span>\\n\\nDo you enjoy Gabe the Dog? He is the immortal lead singer of Bork, a European band that does covers of popular pop songs from the 80s, 90s, and today.\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>iframe</span> <span class=\\\"token attr-name\\\">width</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>560<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">height</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>315<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>https://www.youtube.com/embed/c--etqIJcow?ecver=1<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">frameborder</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>0<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">allowfullscreen</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>iframe</span><span class=\\\"token punctuation\\\">></span></span>\\n</code></pre>\\n      </div>\\n<p>Now that we have some content, let's display it on the website.</p>\\n<h2>Grabbing our Markdown files</h2>\\n<p>GatsbyJS uses components to create pages, so we could literally just create new JS files for each blog post. But that's messy and inefficient. So what do we do instead? Gatsby offers the ability to create <em>source</em> plugins that pull data from certain endpoints, like RSS, Medium, or Github. We're going to make Markdown in the same folder as the Gatsby project, so we'll be using the Filesystem source plugin to grab files locally.</p>\\n<p>We'll also install a <em>transformer</em> plugin, which takes GraphQL data and processes it. In our particular case, we want to take our data and process the Markdown into HTML. Run the following command to install that plugin:</p>\\n<p><code class=\\\"language-text\\\">npm install --save gatsby-source-filesystem gatsby-transformer-remark</code></p>\\n<p>And add the following JSON to your config to enable both plugins. If you look close at the <code class=\\\"language-text\\\">path</code> property of the filesystem plugin, we load our blog articles from the blog folder:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\">plugins<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    // react-helmet is included by default with gatsby\\n    `gatsby-plugin-react-helmet`<span class=\\\"token punctuation\\\">,</span>\\n    `gatsby-transformer-remark`<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      resolve<span class=\\\"token operator\\\">:</span> `gatsby-source-filesystem`<span class=\\\"token punctuation\\\">,</span>\\n      options<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        name<span class=\\\"token operator\\\">:</span> `src`<span class=\\\"token punctuation\\\">,</span>\\n        path<span class=\\\"token operator\\\">:</span> `$<span class=\\\"token punctuation\\\">{</span>__dirname<span class=\\\"token punctuation\\\">}</span>/src/blog/`<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n</code></pre>\\n      </div>\\n<p>Restart your development server to commit the changes (hit CTRL + C to terminate the server and then run <code class=\\\"language-text\\\">gatsby develop</code> again). Now run this GraphQL query on your local <a href=\\\"http://localhost:8000/___graphql\\\">GraphiQL development panel</a>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-graphql\\\"><code class=\\\"language-graphql\\\"><span class=\\\"token punctuation\\\">{</span>\\n allFile <span class=\\\"token punctuation\\\">{</span>\\n  edges <span class=\\\"token punctuation\\\">{</span>\\n    node <span class=\\\"token punctuation\\\">{</span>\\n      name\\n      extension\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Enter the query and hit CMD + Enter. You should see a JSON object on the right side with the blog post we just made.</p>\\n<h2>Making pages dynamically</h2>\\n<p>We could easily start querying this data on our pages and displaying our posts:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react\\\"</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// displays an object of the query data in console</span>\\n  <span class=\\\"token comment\\\">// simply access what you need using a map function</span>\\n  <span class=\\\"token comment\\\">// data.allFile.edges.map()</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>Hello world<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> query <span class=\\\"token operator\\\">=</span> graphql<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n  query MyFilesQuery {\\n    allFile {\\n      edges {\\n        node {\\n          relativePath\\n          prettySize\\n          extension\\n          birthTime(fromNow: true)\\n        }\\n      }\\n    }\\n  }\\n`</span></span>\\n</code></pre>\\n      </div>\\n<p>Which makes for a great frontpage with a list of all of our posts, but we end up at the same dilemma as before. If we want separate pages for each blog post, we have to make new components to query each page individually. That's where the GatsbyJS API comes in.</p>\\n<p>GatsbyJS is capable of taking a GraphQL query and creating pages for every object based off a template. So for every Markdown file we create, when we build our GatsbyJS website, we'll get an HTML file with the Markdown parsed into readable text.</p>\\n<p>Paste this into your <code class=\\\"language-text\\\">gatsby-node.js</code> file.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`path`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> createFilePath <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`gatsby-source-filesystem`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nexports<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onCreateNode</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> node<span class=\\\"token punctuation\\\">,</span> getNode<span class=\\\"token punctuation\\\">,</span> boundActionCreators <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> createNodeField <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> boundActionCreators\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>internal<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">===</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`MarkdownRemark`</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">const</span> slug <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createFilePath</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> node<span class=\\\"token punctuation\\\">,</span> getNode<span class=\\\"token punctuation\\\">,</span> basePath<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`pages`</span></span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token function\\\">createNodeField</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n            node<span class=\\\"token punctuation\\\">,</span>\\n            name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`slug`</span></span><span class=\\\"token punctuation\\\">,</span>\\n            value<span class=\\\"token punctuation\\\">:</span> slug<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nexports<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">createPages</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> graphql<span class=\\\"token punctuation\\\">,</span> boundActionCreators <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> createPage <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> boundActionCreators\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">graphql</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n      {\\n        allMarkdownRemark {\\n          edges {\\n            node {\\n              fields {\\n                slug\\n              }\\n            }\\n          }\\n        }\\n      }\\n    `</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>result <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n                result<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span>allMarkdownRemark<span class=\\\"token punctuation\\\">.</span>edges<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> node <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token function\\\">createPage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n                        path<span class=\\\"token punctuation\\\">:</span> node<span class=\\\"token punctuation\\\">.</span>fields<span class=\\\"token punctuation\\\">.</span>slug<span class=\\\"token punctuation\\\">,</span>\\n                        component<span class=\\\"token punctuation\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`./src/templates/blog-post.js`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n                        context<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n                            <span class=\\\"token comment\\\">// Data passed to context is available in page queries as GraphQL variables.</span>\\n                            slug<span class=\\\"token punctuation\\\">:</span> node<span class=\\\"token punctuation\\\">.</span>fields<span class=\\\"token punctuation\\\">.</span>slug<span class=\\\"token punctuation\\\">,</span>\\n                        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n                    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>First, we'll create slugs based off our Markdown file names, and add them to the GraphQL query results. Then we'll use the <code class=\\\"language-text\\\">createPages</code> API to make new pages based off a GraphQL query for the Markdown posts. Then we'll use the <code class=\\\"language-text\\\">createPage</code> function to actually generate the page based off the new file path and component that'll act as the template.</p>\\n<p>When Gatsby runs the build process, it'll run this script as well, which will trigger the creation of pages.</p>\\n<p>There's not much to explain here since this is just very API specific code. It's simple enough to be self-explanatory, and anything that's unclear is probably opinionated decisions from the API.</p>\\n<h2>The Blog Template</h2>\\n<p>Now that our blog posts are ready to get converted into static pages, let's actually create the template we referenced above <code class=\\\"language-text\\\">./src/templates/blog-post.js</code>. Make a new file there and paste this into it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> post <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">.</span>markdownRemark<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>post<span class=\\\"token punctuation\\\">.</span>frontmatter<span class=\\\"token punctuation\\\">.</span>title<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token operator\\\">&lt;</span>div dangerouslySetInnerHTML<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> __html<span class=\\\"token punctuation\\\">:</span> post<span class=\\\"token punctuation\\\">.</span>html <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> query <span class=\\\"token operator\\\">=</span> graphql<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n  query BlogPostQuery($slug: String!) {\\n    markdownRemark(fields: { slug: { eq: $slug } }) {\\n      html\\n      frontmatter {\\n        title\\n      }\\n    }\\n  }\\n`</span></span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>Show me the posts!</h2>\\n<p>We've got our blog posts as Markdown ready to get converted, we have the React template, the only thing left is linking to the posts.</p>\\n<p>Head over to your <code class=\\\"language-text\\\">index.js</code> file and paste the following:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> Link <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"gatsby-link\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>h1 style<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span>display<span class=\\\"token punctuation\\\">:</span>  <span class=\\\"token string\\\">'inline-block'</span><span class=\\\"token punctuation\\\">,</span> borderBottom<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'1px solid'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n        Amazing Pandas Eating Things\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>h4<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>data<span class=\\\"token punctuation\\\">.</span>allMarkdownRemark<span class=\\\"token punctuation\\\">.</span>totalCount<span class=\\\"token punctuation\\\">}</span> Posts<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h4<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token punctuation\\\">{</span>data<span class=\\\"token punctuation\\\">.</span>allMarkdownRemark<span class=\\\"token punctuation\\\">.</span>edges<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> node <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token operator\\\">&lt;</span>div key<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>node<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n          <span class=\\\"token operator\\\">&lt;</span>Link\\n            to<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>node<span class=\\\"token punctuation\\\">.</span>fields<span class=\\\"token punctuation\\\">.</span>slug<span class=\\\"token punctuation\\\">}</span>\\n            css<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> textDecoration<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`none`</span></span><span class=\\\"token punctuation\\\">,</span> color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`inherit`</span></span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token operator\\\">&lt;</span>h3 style<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> marginBottom<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'4px'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n              <span class=\\\"token punctuation\\\">{</span>node<span class=\\\"token punctuation\\\">.</span>frontmatter<span class=\\\"token punctuation\\\">.</span>title<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\" \\\"</span><span class=\\\"token punctuation\\\">}</span>\\n              <span class=\\\"token operator\\\">&lt;</span>span style<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span>color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"#BBB\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>— <span class=\\\"token punctuation\\\">{</span>node<span class=\\\"token punctuation\\\">.</span>frontmatter<span class=\\\"token punctuation\\\">.</span>date<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>span<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h3<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>node<span class=\\\"token punctuation\\\">.</span>excerpt<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> query <span class=\\\"token operator\\\">=</span> graphql<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n  query IndexQuery {\\n    allMarkdownRemark(sort: {fields: [frontmatter___date], order: DESC}) {\\n      totalCount\\n      edges {\\n        node {\\n          id\\n          frontmatter {\\n            title\\n            date(formatString: \\\"DD MMMM, YYYY\\\")\\n          }\\n          fields {\\n            slug\\n          }\\n          excerpt\\n        }\\n      }\\n    }\\n  }\\n`</span></span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>We query using the MarkdownRemark endpoint and grab the titles, slugs, and excerpts of our latest blog posts. Then we loop through the data to show the data, while using the <code class=\\\"language-text\\\">&lt;Link&gt;</code> component to link directly to the blog post (using the slug). </p>\\n<blockquote>\\n<p>Dont forget, you can always test out the query in the GraphiQL dev panel to make sure you have the right properties.</p>\\n</blockquote>\\n<p>If you restart your dev server at this point, you should see a list of the Markdown files you created. And if you click them, they'll take you to another page with the complete blog post. </p>\\n<p><strong>Congratulations!</strong> You've built your first static blog. You can stop here and just run <code class=\\\"language-text\\\">gatsby build</code> to make a production-ready version of your blog available in the <code class=\\\"language-text\\\">public</code> folder. Upload that directly to your FTP or web host and you're good to go. </p>\\n<p><strong>But why stop there?</strong> One of the principles of the JAMstack is using <strong>Git</strong> for version control. This allows you, or any dev on your team, to easily clone the website's repository and create an exact replica of the entire website. It also allows you to quickly push new changes to the server, rather than uploading files individually through an FTP. </p>\\n<h2>Let's git started</h2>\\n<p>If you haven't already installed Git on your computer, head over to the official website and download it. Then open up Terminal, <code class=\\\"language-text\\\">cd</code> to your project's root, and run the following command:</p>\\n<p><code class=\\\"language-text\\\">git init</code></p>\\n<p>This creates a new Git repository in your folder. Now let's commit all the changes we've made to the new repository:</p>\\n<p><code class=\\\"language-text\\\">git add -A &amp;&amp; git commit -m &quot;Your Message&quot;</code></p>\\n<p>This takes all the files in the folder and adds them to the Git repo. When you make changes, you'll be able to track the differences between previous versions before each commit (<code class=\\\"language-text\\\">git diff</code>). The message you leave usually hints at what kind of changes were made to the code. In this case, something like \\\"Initial commit\\\" or \\\"1.0\\\" is appropriate.</p>\\n<h2>Connect with Github</h2>\\n<p>Connecting with Github allows you to promote the highest accessibility for developers looking to access the website's source code, and to take advantage of Github's free hosting](<a href=\\\"https://pages.github.com/\\\">https://pages.github.com/</a>). You'll sign up for a Github account if you don't already have one, create a public repo, and push (or upload) the project files to Github through Git commands.</p>\\n<h3>Sign up on Github</h3>\\n<ol>\\n<li>Create a new account on <a href=\\\"http://github.com\\\">Github</a></li>\\n<li>Login to your account.</li>\\n<li>Click the plus sign in the top menu and click \\\"New repository\\\" from the dropdown.</li>\\n<li>Name your repo anything you'd like, then click the big green \\\"Create repository\\\" button.</li>\\n</ol>\\n<h3>Sync up your repo with Github</h3>\\n<p>To make syncing up to Github a single click we'll install <code class=\\\"language-text\\\">gh-pages</code>. This is a Github Pages package that pushes changes to Github and updates the page. Run the following command to install the package:</p>\\n<p><code class=\\\"language-text\\\">npm install --only=dev gh-pages</code></p>\\n<p>You'll also need to modify the <code class=\\\"language-text\\\">package.json</code> with a new script. This script runs the <code class=\\\"language-text\\\">gatsby build</code> process, then runs the <code class=\\\"language-text\\\">gh-pages</code> command to deploy to Github:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\">  <span class=\\\"token punctuation\\\">{</span>\\n        scripts<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token property\\\">\\\"deploy\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"gatsby build --prefix-paths &amp;&amp; gh-pages -d public\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>And since Github Pages hosts the blog in a subdirectory (e.g. <code class=\\\"language-text\\\">yourname.github.io/this-subdirectory/</code>), we have to add a path prefix to the configuration <code class=\\\"language-text\\\">gatsby-config.js</code> to let GatsbyJS know it's not in the root:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  siteMetadata<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    title<span class=\\\"token operator\\\">:</span> `Your site Name`<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  pathPrefix<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"/your-repo-name\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>Deploy!</h3>\\n<p>Go to your new repo on Github, click the Clone button, and copy the URL (ending in .git). Then run the following command to add a \\\"remote\\\" repo to your local git repo:</p>\\n<p><code class=\\\"language-text\\\">git remote add origin http://github.com/username/repo-name.git</code></p>\\n<p>Now we can build the site and push it to Github. Type in the following command, enter in your Github password when prompted, and profit!:</p>\\n<p><code class=\\\"language-text\\\">npm run deploy</code></p>\\n<p>The <code class=\\\"language-text\\\">public</code> folder of your blog will be uploaded to the <code class=\\\"language-text\\\">gh-pages</code> branch of your repo. If you click the dropdown labeled <strong>Branch: master</strong> you should see the gh-pages branch.</p>\\n<h3>Browse your blog</h3>\\n<p>Head back over to your repository on Github and see if you successfully pushed (or uploaded) your files. If it worked, head over to the project settings page. Here, you'll want to make sure Github Pages is enabled and that it's set to the <code class=\\\"language-text\\\">gh-pages</code> branch.</p>\\n<p>You should be able to access the blog by going to <a href=\\\"http://yourusername.github.io/repo-name/\\\">http://yourusername.github.io/repo-name/</a>.</p>\\n<h2>Maybe not the Wordpress 5-minute install</h2>\\n<p>It might not be the most lightning fast blog creation out there, between the time it takes to install <code class=\\\"language-text\\\">npm</code> packages and the time you waste fussing with <code class=\\\"language-text\\\">git</code>. Though you have to admit that in a fairly short time span we were able to create a static blog ecosystem that deploys instantly. It's incredible to see the potential of GatsbyJS, and the different kind of experiences you can create compared to standard CMS platforms like Wordpress or Drupal.</p>\\n<p>If you've ever been thinking about taking the leap into a progressive web application (PWA), you want to try static, or you've just been interested in migrating off Wordpress -- I hope this guide helped you discover an alternative to the mainstream blogging experience.</p>\\n<h2>The potential is endless</h2>\\n<p>This is the first part in a series of articles we'll be writing featuring GatsbyJS. We've just dipped our toe in the water here, there's a wealth of plugins and potential we've yet to explore with this framework. We'll be looking into creating projects that explore or push the limitations of the JAMstack, from a portfolio site using the Behance API, to a static e-commerce store using Stripe, to building a true JAM app on a CDN with automatic and atomic builds.</p>\\n<p>Keep an eye on the <a href=\\\"http://stayregular.net/blog/tag:gatsbyjs\\\">#GatsbyJS</a> tag to see our next post!</p>\\n<hr>\\n<p><strong>Keep Reading:</strong></p>\\n<ul>\\n<li><a href=\\\"http://kbroman.org/github_tutorial/pages/init.html\\\">Git guide - Start a new git repository</a></li>\\n<li><a href=\\\"https://jamstack.org/best-practices/\\\">JAMstack.org</a></li>\\n<li><a href=\\\"https://www.gatsbyjs.org\\\">GatsbyJS</a></li>\\n<li><a href=\\\"https://www.gatsbyjs.org/tutorial/\\\">GatsbyJS Tutorials</a></li>\\n<li><a href=\\\"https://www.gatsbyjs.org/packages/\\\">GatsbyJS Plugins</a></li>\\n<li><a href=\\\"https://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/\\\">How GatsbyJS Works with Github Pages</a></li>\\n<li><a href=\\\"https://www.gatsbyjs.org/packages/gatsby-source-filesystem/?=filesy\\\">gatsby-source-filesystem</a></li>\\n<li><a href=\\\"https://www.gatsbyjs.org/packages/gatsby-transformer-remark/?=remark\\\">gatsby-transformer-remark</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Deploy a Static React Blog using GatsbyJS and Github\",\"cover_image\":{\"childImageSharp\":{\"sizes\":{\"tracedSVG\":\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='268' viewBox='0 0 400 268' version='1'%3E%3Cpath d='M0 134v134h401V0H0v134m95-45l-15 15-3 25-4 26 18 19 19 18 20-14 22-15c1-1-1-3-13-15l-14-15 11-10 10-11-36-37-15 14m177 0c-12 3-27 12-35 21-12 13-10 23 10 36 7 5 7 5 2 7-17 8-22 27-7 27 13 0 21-10 20-23-1-5-1-6 2-7l3-2-1 5c-1 14 7 21 13 10l1-3 1 2 2 4c3 2 5-1 12-14l5-11 2 5c2 6 3 5-1 9-7 8-7 10-2 10 7 0 13-6 12-12-1-4 0-5 2-10 4-6 4-6 6-1 1 5 1 5-2 8-8 9-2 15 7 7 4-3 4-4 4-7v-4l7-1c7 0 8 0 12 3 5 3 6 7 3 10-2 3 0 4 2 2 4-4 2-12-4-17-5-3-14-3-19-1-4 2-6-2-6-10l1-6h-3c-4 0-6 3-6 6l-1 3-3 5c-4 6-5 4-5-5 0-5 0-5-2-5l-4 1-6 15c-7 14-9 17-6 6a2464 2464 0 0 0 0-10l-2-4c-1-5-7-5-13 1l-10 6c-5 3-5 3-7 1l-8-7c-15-12-12-23 11-36 19-11 42-11 42 0 0 14-27 27-39 20-5-3-5 0-1 4 3 2 5 2 11 2 21 0 36-11 36-28 0-5-5-11-11-13-5-1-19-1-25 1m-84 43l-1 4c0 3 0 3-4 3-2 0-3 1-3 2s1 2 3 2c4 0 4 0 4 3s1 4 2 4c2 1 2 0 2-3s0-4 2-4l3-1h2l1-1c0-2-1-2-4-2-4 0-4 0-4-4 0-3-2-5-3-3m90 10c-4 5-5 8-5 14 0 8 2 7 6-5s4-15-1-9m-28 16c-6 4-8 7-8 11 0 3 0 4 2 4 6 0 13-8 13-15 0-5-1-5-7 0' fill='lightgray' fill-rule='evenodd'/%3E%3C/svg%3E\",\"src\":\"/ryosuke-gatsby-blog/static/bulma-css-framework@1x-53d5bab8a2cf7b6967a74c098c1e42d9-4e8db.jpg\",\"srcSet\":\"/ryosuke-gatsby-blog/static/bulma-css-framework@1x-53d5bab8a2cf7b6967a74c098c1e42d9-7cc04.jpg 310w,\\n/ryosuke-gatsby-blog/static/bulma-css-framework@1x-53d5bab8a2cf7b6967a74c098c1e42d9-69042.jpg 620w,\\n/ryosuke-gatsby-blog/static/bulma-css-framework@1x-53d5bab8a2cf7b6967a74c098c1e42d9-4e8db.jpg 1240w,\\n/ryosuke-gatsby-blog/static/bulma-css-framework@1x-53d5bab8a2cf7b6967a74c098c1e42d9-a86c7.jpg 1812w\"}}},\"date\":\"21 March, 2018\",\"tags\":[\"design\",\"development\",\"react\",\"github\",\"gatsbyjs\",\"ssg\",\"static site generator\"]},\"fields\":{\"slug\":\"/blog/2018-3-1-laravel-react-example/\"}},\"relatedPosts\":null},\"pathContext\":{\"tag\":\"gatsbyjs\",\"slug\":\"/blog/2018-3-1-laravel-react-example/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-2018-3-1-laravel-react-example.json\n// module id = 426\n// module chunks = 169244524746636"],"sourceRoot":""}