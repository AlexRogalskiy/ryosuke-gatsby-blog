webpackJsonp([0x8edf30f224c0],{545:function(n,s){n.exports={data:{blog:{html:'<p>Recently the Kushy API finally reached a beta release of v1, and I redesigned the Kushy API documentation to use GatsbyJS. The documentation itself was hand-written in Markdown, with a structure inspired by most API docs (endpoints with descriptions, code snippets, and response examples). </p>\n<p>This got pretty tedious pretty quick, and immediately becomes an issue when any small updates occur to the API and require manual modification of a separate doc repo. It became time to auto-generate our docs from our codebase, and discovering the best way to accomplish that within the Laravel framework.</p>\n<p>The options were fairly slim after some research: </p>\n<ol>\n<li>Use <strong>Swagger</strong>, an API specification, to document our code and output a Swagger JSON file.</li>\n<li>Document our code using <strong>docblocks</strong>, and find a generator to scan the code and convert those to Markdown. </li>\n</ol>\n<h2>Say No to Swagger</h2>\n<p>I\'m not a fan of the Swagger implementation in PHP. Writing documentation looks <em>atrocious</em>, makes it more difficult to read, and adds excessive code to my production codebase. I\'d rather write standard docblocks for PHP and use those as the basis for the API documentation.</p>\n<h3>"Screw You, I Prefer Swagger"</h3>\n<p>It\'s cool, I understand the ease of the Swagger specification. It was awesome being able to run a script and generating a JSON file I could import into other libraries/frameworks/generators. If you prefer using Swagger, I recommend using the <a href="https://github.com/InfyOmLabs/laravel-generator">InfyOm Laravel Generator</a>. </p>\n<p>You can generate your entire API with a fairly simple CLI. In a single <code class="language-text">artisan</code> command, and a few answered questions, you have yourself a controller, model, migration, resource, validation, and testing for your API. It also can generate Swagger-approved documentation for the API controllers it creates with a simple change of the config.</p>\n<h2>Easy to write docs</h2>\n<p>Luckily there\'s a package that kind of accomplishes what we need - <a href="https://github.com/mpociot/laravel-apidoc-generator">Laravel API Documentation Generator</a>. It scans your API endpoints and actually runs them to generate the documentation (automatically creating JSON response objects for your docs). It combines the PHP docblocks your write above the controller\'s classes/methods with request validation, JSON responses, and a table of contents.</p>\n<p>If you\'re running Laravel 5.5+, just run this line to install the package:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">composer require mpociot/laravel-apidoc-generator\n</code></pre>\n      </div>\n<p>And start generating docs using the Artisan CLI command:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">php artisan api:generate --routePrefix<span class="token operator">=</span><span class="token string">"api/*"</span>\n</code></pre>\n      </div>\n<p>There are plenty of benefits of using this package:</p>\n<h3>Custom written content</h3>\n<p>You\'re not limited to auto-generated docs, this package is also capable of appending other Markdown file\'s content. Great for writing additional docs for authentication.</p>\n<h3>Authenticating API requests</h3>\n<p>It even handles dirty processes, like authenticating API calls:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">php artisan api:generate --routePrefix<span class="token operator">=</span><span class="token string">"api/*"</span> --actAsUserId<span class="token operator">=</span>1\n</code></pre>\n      </div>\n<h3>Postman</h3>\n<p>This package also generates a JSON \'collection\' file for <a href="https://www.getpostman.com/">Postman</a>, an app for querying APIs. Handy if you\'re like me and you test your API with it. <a href="https://www.getpostman.com/docs/v6/postman/collections/creating_collections">You can import the collection</a> and have a folder full of all your endpoints.</p>\n<h3>Don\'t comment code? Don\'t worry!</h3>\n<p>Since this package analyzed your entire route file and queries each route for data, it\'ll generate API docs for every single route -- even if it doesn\'t have documentation/docblocks/comments! The generator creates a  "general" section which contains all the endpoints you didn\'t group inside <em>"resources"</em>.</p>\n<h2>Issues with Auto-generation</h2>\n<p>From the beginning, I was trepidatious about integrating a documentation generator. There are several pitfalls with automation that lend to more work being done by devs, or worse, code getting refactored immensely for it.</p>\n<h3>One giant markdown file</h3>\n<p>Despite being able to separate things into "Resources" with the API generator, the generator creates one massive Markdown file. Each "resource" or API controller is separated into sections, but without separate files, it makes parsing with frameworks like GatsbyJS more difficult.</p>\n<h3>No comment blocks? Inaccurate docs.</h3>\n<p>The initial issue I encountered with docblock, and <em>even Swagger documentation</em>, was the need for a physical file with comments for each endpoint. </p>\n<p>What if I use a base class to extend my API controllers? All my major endpoints (index, store, etc) are all stored in the base controller, and I only add a couple extra endpoints to the actual endpoint controller. </p>\n<p>The base controller:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code class="language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Controllers</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Controllers<span class="token punctuation">\\</span>Controller</span><span class="token punctuation">;</span>\n\n<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ApiController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">index</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// Does API stuff</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The generator combines comments from the extended classes, using docblocks from the base class. The issue? We get generic comments for any endpoint extended off the base class unless we re-instate the method in the endpoint controller.</p>\n<p>This leads to the repeated code, excess code, and limitations on innovation.</p>\n<h2>Hand-written > Docblocks > Swagger</h2>\n<p>Unless you API is setup for it, or you\'re working with an immense API that\'s constantly changing -- it\'s better to just write docs by hand. </p>\n<p><strong>It\'s great to use a generator as a start,</strong> since it\'ll generate all the endpoints/request objects/etc. But for <em>long-term</em> maintenance, it seems like even the generators aren\'t completely automated - and require so much maintenance that it overrides it\'s usefulness.</p>\n<p>However, if you are looking for a generator that <strong>isn\'t Swagger based</strong>, the <a href="https://github.com/mpociot/laravel-apidoc-generator">laravel-apidoc-generator by mpociot</a> does a solid enough job of generating docs. And <strong>if you\'re cool with Swagger</strong>, the Laravel Generator by InfyOmLabs does a great job of creating everything you need for an API (controller, validation, models, migrations, tests, everything!).</p>\n<h2>Making it work (for me)</h2>\n<p>The primary issue I had was the generated format of the Markdown. It was a single massive file that was compatible with doc generators like Slate, but not my GatsbyJS setup. For my Gatsby docs, they\'re generated from a <code class="language-text">docs</code> folder with sub-folder for each resource group (<code class="language-text">docs/endpoint/</code>). Then we create a file for each route (<code class="language-text">docs/posts/get-all-posts.md</code>).</p>\n<h3>Using Javascript</h3>\n<p>My first instinct was to write a NodeJS script to parse through the massive Markdown file and split it up into the chunks I needed. I used NodeJS to read the file contents, markdown-js to parse the MD into a walkable tree - then into HTML, and turndown to convert the HTML back to MD.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> markdown <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"markdown"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>markdown<span class="token punctuation">;</span>\n<span class="token keyword">var</span> TurndownService <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"turndown"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> turndownService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TurndownService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Grab API markdown master file and dump file into variable</span>\n<span class="token keyword">let</span> docs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'public/docs/source/index.md\'</span><span class="token punctuation">,</span> <span class="token string">\'utf8\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Parse the markdown into a JSONML tree </span>\n<span class="token comment">// (giant array with objects that contain MD data)</span>\n<span class="token comment">// [</span>\n<span class="token comment">//     {</span>\n<span class="token comment">//         \'header\',</span>\n<span class="token comment">//         {</span>\n<span class="token comment">//             level: 1</span>\n<span class="token comment">//         },</span>\n<span class="token comment">//         \'The actual header content\'</span>\n<span class="token comment">//     },</span>\n<span class="token comment">// ]</span>\n<span class="token keyword">var</span> tree <span class="token operator">=</span> markdown<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>docs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> separateDocs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Loop through tree to find headers</span>\n<span class="token comment">// Whenever header is found, insert last collection, </span>\n<span class="token comment">// and make new collection variable to insert ongoing data into</span>\n<span class="token comment">// Each collection should contain name (used for filename) and data</span>\n<span class="token keyword">var</span> collection <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\ntree<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'header\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>level <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token comment">// Put collection the main doc array</span>\n            <span class="token comment">// Then wipe it out and start fresh</span>\n            separateDocs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            collection <span class="token operator">=</span> <span class="token punctuation">[</span>\n                <span class="token string">\'markdown\'</span>\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    collection<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    i<span class="token operator">++</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// console.log(separateDocs);</span>\n\n<span class="token comment">// Convert from JSONML to HTML then to MD</span>\n<span class="token comment">// Then save the file</span>\n<span class="token keyword">var</span> convertedDocs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\nseparateDocs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token keyword">var</span> header\n    <span class="token keyword">if</span><span class="token punctuation">(</span>doc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">\'header\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        header <span class="token operator">=</span> doc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        header <span class="token operator">=</span> <span class="token string">\'index\'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> html <span class="token operator">=</span> markdown<span class="token punctuation">.</span><span class="token function">renderJsonML</span><span class="token punctuation">(</span>markdown<span class="token punctuation">.</span><span class="token function">toHTMLTree</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> convertedMarkdown <span class="token operator">=</span> turndownService<span class="token punctuation">.</span><span class="token function">turndown</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    convertedDocs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>convertedMarkdown<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n    fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`tmp/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>header<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.md`</span></span><span class="token punctuation">,</span> convertedMarkdown<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The file was saved!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>You can run this script using the CLI: <code class="language-text">node generate-api-docs.js</code></p>\n<p>After a bit of tinkering, I discovered that I could accomplish what I needed, but the source material became degraded. The conversion from MD -> JSON -> HTML -> MD was causing formatting issues.</p>\n<h3>Back to the source</h3>\n<p>I realized that altering the final product wasn\'t the way to go, and it\'d be easier just to edit the generator\'s output code. After snooping around the source code, I found the method I needed: <code class="language-text">writeMarkdown()</code>. With a bit of altering, here\'s what I ended up with:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code class="language-php">    <span class="token comment">/**\n     * @param  Collection $parsedRoutes\n     *\n     * @return void\n     */</span>\n    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">writeMarkdown</span><span class="token punctuation">(</span><span class="token variable">$parsedRoutes</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$outputPath</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">option</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'output\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token variable">$infoText</span> <span class="token operator">=</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'apidoc::partials.info\'</span><span class="token punctuation">)</span>\n            <span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'outputPath\'</span><span class="token punctuation">,</span> <span class="token function">ltrim</span><span class="token punctuation">(</span><span class="token variable">$outputPath</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">\'public/\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'showPostmanCollectionButton\'</span><span class="token punctuation">,</span> <span class="token operator">!</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">option</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'noPostmanCollection\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token variable">$parsedRouteOutput</span> <span class="token operator">=</span> <span class="token variable">$parsedRoutes</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$routeGroup</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token variable">$routeGroup</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$route</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token variable">$route</span><span class="token punctuation">[</span><span class="token single-quoted-string string">\'output\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'apidoc::partials.route\'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'parsedRoute\'</span><span class="token punctuation">,</span> <span class="token variable">$route</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token keyword">return</span> <span class="token variable">$route</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token variable">$documentarian</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Documentarian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token variable">$parsedRouteOutput</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$routeGroup</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$infoText</span><span class="token punctuation">,</span> <span class="token variable">$outputPath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token variable">$routeGroup</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$route</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$infoText</span><span class="token punctuation">,</span> <span class="token variable">$outputPath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// dd($route);</span>\n\n                <span class="token comment">// $cleanResource = preg_replace(\'/\\s+/\', \'\', $route[\'resource\']);</span>\n                <span class="token variable">$routeUrl</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'api/v1/\'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">\'\'</span><span class="token punctuation">,</span> <span class="token variable">$route</span><span class="token punctuation">[</span><span class="token single-quoted-string string">\'uri\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token variable">$safeUrl</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'/\'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">\'-\'</span><span class="token punctuation">,</span> <span class="token variable">$routeUrl</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token variable">$safeUrl</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'{\'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">\'\'</span><span class="token punctuation">,</span> <span class="token variable">$safeUrl</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token variable">$safeUrl</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'}\'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">\'\'</span><span class="token punctuation">,</span> <span class="token variable">$safeUrl</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token variable">$cleanResource</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'\\n\'</span><span class="token punctuation">,</span> <span class="token variable">$route</span><span class="token punctuation">[</span><span class="token single-quoted-string string">\'resource\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token variable">$cleanResource</span> <span class="token operator">=</span> <span class="token variable">$cleanResource</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                <span class="token comment">// $cleanResource = trim(preg_replace(\'/\\s+/\', \' \', $route[\'resource\']));</span>\n                <span class="token variable">$title</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$route</span><span class="token punctuation">[</span><span class="token single-quoted-string string">\'methods\'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">\'-\'</span> <span class="token punctuation">.</span> <span class="token variable">$safeUrl</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token variable">$folder</span> <span class="token operator">=</span> <span class="token variable">$outputPath</span><span class="token punctuation">.</span><span class="token constant">DIRECTORY_SEPARATOR</span><span class="token punctuation">.</span><span class="token single-quoted-string string">\'dist\'</span><span class="token punctuation">.</span><span class="token constant">DIRECTORY_SEPARATOR</span><span class="token punctuation">.</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$cleanResource</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createFolder</span><span class="token punctuation">(</span><span class="token variable">$folder</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token variable">$targetFile</span> <span class="token operator">=</span> <span class="token variable">$folder</span><span class="token punctuation">.</span><span class="token constant">DIRECTORY_SEPARATOR</span><span class="token punctuation">.</span><span class="token variable">$title</span><span class="token punctuation">.</span><span class="token single-quoted-string string">\'.md\'</span><span class="token punctuation">;</span>\n\n                <span class="token variable">$frontmatter</span> <span class="token operator">=</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'apidoc::partials.frontmatter\'</span><span class="token punctuation">)</span>\n                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'method\'</span><span class="token punctuation">,</span> <span class="token variable">$route</span><span class="token punctuation">[</span><span class="token single-quoted-string string">\'methods\'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'route\'</span><span class="token punctuation">,</span> <span class="token variable">$routeUrl</span><span class="token punctuation">)</span>\n                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'title\'</span><span class="token punctuation">,</span> <span class="token variable">$route</span><span class="token punctuation">[</span><span class="token single-quoted-string string">\'title\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'date\'</span><span class="token punctuation">,</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'Y-m-d\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token variable">$markdown</span> <span class="token operator">=</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'apidoc::singledoc\'</span><span class="token punctuation">)</span>\n                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'writeCompareFile\'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'frontmatter\'</span><span class="token punctuation">,</span> <span class="token variable">$frontmatter</span><span class="token punctuation">)</span>\n                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'infoText\'</span><span class="token punctuation">,</span> <span class="token variable">$infoText</span><span class="token punctuation">)</span>\n                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'outputPath\'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">option</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'output\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'showPostmanCollectionButton\'</span><span class="token punctuation">,</span> <span class="token operator">!</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">option</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'noPostmanCollection\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'route\'</span><span class="token punctuation">,</span> <span class="token variable">$route</span><span class="token punctuation">)</span>\n                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'group\'</span><span class="token punctuation">,</span> <span class="token variable">$cleanResource</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token comment">// Write output file</span>\n                <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$targetFile</span><span class="token punctuation">,</span> <span class="token variable">$markdown</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">info</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'Wrote \'</span><span class="token punctuation">.</span> <span class="token variable">$title</span> <span class="token punctuation">.</span><span class="token single-quoted-string string">\' to: \'</span><span class="token punctuation">.</span><span class="token variable">$outputPath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">option</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'noPostmanCollection\'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">info</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'Generating Postman collection\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$outputPath</span><span class="token punctuation">.</span><span class="token constant">DIRECTORY_SEPARATOR</span><span class="token punctuation">.</span><span class="token single-quoted-string string">\'collection.json\'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">generatePostmanCollection</span><span class="token punctuation">(</span><span class="token variable">$parsedRoutes</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Make sure to add this helper method to the <code class="language-text">GenerateDocumentation</code> class (I threw it on the bottom):</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code class="language-php">    <span class="token comment">/**\n     * Create folder if none exists\n     *\n     * @param string $folder\n     * @return void\n     */</span>\n    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">createFolder</span><span class="token punctuation">(</span><span class="token variable">$folder</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$folder</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$folder</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>And here\'s the view file <code class="language-text">singledoc.blade.php</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-blade"><code class="language-blade">---\n{!! $frontmatter !!}\n---\n\n@if($group)\n# {{$group}}\n@endif\n@if($writeCompareFile === true)\n{!! $route[&#39;output&#39;]!!}\n@else\n{!! isset($route[&#39;modified_output&#39;]) ? $route[&#39;modified_output&#39;] : $route[&#39;output&#39;]!!}\n@endif</code></pre>\n      </div>\n<ol>\n<li>We loop through the <code class="language-text">$routeGroupsOutput</code>, which is a collection of routes sorted by group name. </li>\n<li>Then we loop through each group to get the routes for each resource (each section labeled <code class="language-text">@Resource</code> in your docblocks). </li>\n<li>We fill a view file with our route data, and then save the view to a Markdown file (using <code class="language-text">file_put_contents()</code>).</li>\n</ol>\n<blockquote>\n<p>I removed the compare functionality temporarily. Usually this package creates two Markdown files and compares for differences on generation, but I haven\'t tried getting it to work with the new setup.</p>\n</blockquote>\n<h3>Results</h3>\n<p>After editing the package a bit, I was able to accomplish what I needed, and create - at the very least - a basis for my API docs. Ideally, if I work out the kinks, this could work as an automated solution to generate docs on the fly.But hey, we\'ll see how well that works in practice. Things always work different when pushed past thought and into motion.</p>\n<p><strong>The kinks so far</strong>:</p>\n<ul>\n<li>Local development URL shows in queried JSON results</li>\n<li>Can\'t authenticate requests using User ID. Not sure if it\'s because I use UUIDs or my middleware setup.</li>\n<li>Getting rid of HTML comparison comments</li>\n<li>Delete <code class="language-text">public/docs/</code> folder and make sure it doesn\'t generate</li>\n<li>Installing the forked package (or creating a new package to <code class="language-text">composer install</code>)</li>\n</ul>\n<p>You can find <a href="https://github.com/whoisryosuke/laravel-apidoc-generator">my fork of the Laravel API Doc Generator here</a>.</p>\n<p>Hope this helped with your API automation search! 🍻\nRyo</p>\n<hr>\n<p><strong>References</strong>:</p>\n<ul>\n<li><a href="https://github.com/mpociot/laravel-apidoc-generator">laravel-apidoc-generator</a></li>\n<li><a href="https://github.com/InfyOmLabs/laravel-generator">InfyOmLabs Laravel Generator</a></li>\n</ul>',
frontmatter:{title:"2 ways to auto-generate documentation for Laravel APIs 📄⚙️",cover_image:{publicURL:"/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51.jpg",childImageSharp:{sizes:{tracedSVG:"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='267' viewBox='0 0 400 267' version='1'%3E%3Cpath d='M0 134v133h401V0H0v134m240-32c-8 1-8 1 2 21a10661 10661 0 0 1 14 29c1 1 5 1 13-1l12-2 6 9 6 10c2 1 11-1 20-5l10-4 8-3-5-9-6-8 6-3c9-2 9-2-3-16l-3-3-8 1-8 2c-1 1 2 6 6 11 3 4 3 4-11 8-18 4-16 5-25-10l-12-21-4-7h-7l-11 1m2 3l-3 1 21 42 18-4-14-25-8-15h-5l-9 1m-94 11l-5 5v17l1 18h36v-44l-14-1h-14l-4 5m-55 0c-5 2-9 6-11 10-1 3-2 4-5 4-6 1-10 6-11 11-1 9 6 15 17 15 6 0 6 0 6-2s-1-3-6-3c-8 0-10-1-12-5-3-6 2-11 9-11 4 0 4 0 5-3 3-11 14-17 24-12l5 1c5-5-14-9-21-5m62 2c0 4 0 4-4 4l-4 1-1 15v15h31v-39h-22v4m160 3c-9 1-8 1-3 8l5 6 5-2c7-1 7-2 3-7-6-7-6-6-10-5m-210 6c-9 3-10 17-1 23 2 2 9 2 12 0 1-1 2-1 5 3 4 4 4 4 6 3 1-2 1-2-2-5-4-4-4-4-3-10 1-11-7-17-17-14m-1 6c-3 3-3 9 1 12 8 6 17-3 11-11-3-4-9-4-12-1m195 10l-13 4 5 9c5 9 4 9 12 6l11-5c12-3 12-3 7-11-6-8-4-8-22-3' fill='lightgray' fill-rule='evenodd'/%3E%3C/svg%3E",src:"/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-4e8db.jpg",srcSet:"/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-7cc04.jpg 310w,\n/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-69042.jpg 620w,\n/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-4e8db.jpg 1240w,\n/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-50ab1.jpg 1860w,\n/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-e738f.jpg 1920w"}}},date:"06 August, 2018",tags:["laravel","api","documentation","workflow","guide","tips"],section:"blog"},fields:{slug:"/blog/2018/adding-auto-generated-docs-to-laravel-api-kushy/"}},relatedPosts:null},pathContext:{tag:"documentation",slug:"/blog/2018/adding-auto-generated-docs-to-laravel-api-kushy/"}}}});
//# sourceMappingURL=path---blog-2018-adding-auto-generated-docs-to-laravel-api-kushy-a47be344cb958827ac38.js.map