{"version":3,"sources":["webpack:///path---blog-2018-how-to-create-a-php-package-for-composer-077afa0eb130ebf24c08.js","webpack:///./.cache/json/blog-2018-how-to-create-a-php-package-for-composer.json"],"names":["webpackJsonp","536","module","exports","data","blog","html","frontmatter","title","cover_image","publicURL","childImageSharp","sizes","tracedSVG","src","srcSet","date","tags","section","fields","slug","relatedPosts","edges","node","pathContext","tag"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,KAAA,svLAAwuIC,aAAguDC,MAAA,2CAAAC,aAAkEC,UAAA,+FAAAC,iBAA8HC,OAASC,UAAA,o1FAAAC,IAAA,qGAAAC,OAAA,whBAA2+GC,KAAA,gBAAAC,MAAA,2DAAAC,QAAA,QAA4GC,QAAWC,KAAA,yDAA+DC,cAAiBC,QAAUC,MAAQjB,KAAA;AAA+i9BC,aAA+lGC,MAAA,oDAAAC,aAA2EC,UAAA,mFAAAC,iBAAkHC,OAASE,IAAA,yFAAAC,OAAA,4dAAmkBC,KAAA,kBAAAC,MAAA,yEAA0GE,QAAWC,KAAA,sEAA4EI,aAAgBC,IAAA,cAAAL,KAAA","file":"path---blog-2018-how-to-create-a-php-package-for-composer-077afa0eb130ebf24c08.js","sourcesContent":["webpackJsonp([166497982688729],{\n\n/***/ 536:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"blog\":{\"html\":\"<p>Recently, I've recently been trying my best to upload as much code to open source repositories like <a href=\\\"http://github.com/whoisryosuke\\\"><strong>Github</strong></a> and <a href=\\\"http://codepen.io/whoisryosuke\\\"><strong>Codepen</strong></a>. It makes bootstrapping new projects much simpler when I can <code class=\\\"language-text\\\">git clone</code> a boilerplate from my Github, or <em>copypasta</em> a CSS/JS snippet from CodePen. But what happens when I need to include a library or module into several projects? Cloning and copy paste just don't cut it at that point.</p>\\n<p>Cut to <a href=\\\"http://npmjs.com\\\"><strong>NPM</strong></a> and <a href=\\\"http://getcomposer.com\\\"><strong>Composer</strong></a> ( or really <a href=\\\"http://packagist.com\\\">Packagist</a>. NPM is a package manager for Javascript using Node, and Composer does the same for PHP. </p>\\n<p>Today we'll be looking into submitting a PHP \\\"package\\\" to Composer through the Packagist, so we can use <code class=\\\"language-text\\\">composer require</code> to install our package into any project!</p>\\n<h2>The simple steps</h2>\\n<p>It's as easy as 4 steps (<em>minus the part where you code a reusable package in PHP</em>) -- I was surprised too. Make sure before starting you've created a git repository in your project and committed your code. It's also required to have an account on <a href=\\\"http://github.com\\\">Github</a> and <a href=\\\"http://packagist\\\">Packagist</a>.</p>\\n<ol>\\n<li>Create a <code class=\\\"language-text\\\">composer.json</code> in your project:</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"your-brand-name/your-project\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"type\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"library\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"description\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"Your package description goes here\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"keywords\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"relevant\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"tags\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"go\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"here\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"homepage\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"https://yourcompany.com\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"license\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"MIT\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"authors\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"Jordi Boggiano\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"email\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"j.boggiano@seld.be\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"homepage\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"http://seld.be\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"role\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"Developer\\\"</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"2\\\">\\n<li>\\n<p><a href=\\\"https://github.com/new\\\">Create a new repository on your Github</a> and push your local git (init if you haven't) to the remote Github repo.</p>\\n</li>\\n<li>\\n<p><a href=\\\"https://packagist.org/packages/submit\\\">Submit your package to the Packagist</a></p>\\n</li>\\n<li>\\n<p>Done! Your package should be online and Packagist should provide a sample Composer require with your project name (e.g. <code class=\\\"language-text\\\">composer require username/package-name</code>)</p>\\n</li>\\n</ol>\\n<blockquote>\\n<p>You should be able to view your package live at: <code class=\\\"language-text\\\">https://packagist.org/packages/your-username/package-name</code></p>\\n</blockquote>\\n<h2>So easy, there's no excuse</h2>\\n<p>One of the biggest principles of programming I try to apply is <strong>DRY</strong>, <em>don't repeat yourself</em>. When your code is probably already hosted on Github, it's only a two step process to get your code in a place where it's version controlled. </p>\\n<p>Rather than relying on <code class=\\\"language-text\\\">git clone</code> or submodules, it's much more efficient for your codebase to use a composer dependency. </p>\\n<h2>Take my code for a test run</h2>\\n<p>The package I released on the Packagist is for developers working with the Metrc API to send and receive cannabis regulatory data. It's basically a wrapper for their API that uses a Guzzle client to interface with it (using your authoriation credentials).</p>\\n<p>If you're a Metrc developer, or just interested in using the code, you can add it to your projects using:</p>\\n<p><code class=\\\"language-text\\\">composer require kushy/metrc-php-sdk</code></p>\\n<p>Hope that helps,\\nRyo</p>\",\"frontmatter\":{\"title\":\"How to create a PHP package for Composer\",\"cover_image\":{\"publicURL\":\"/static/how-to-create-a-php-package-for-composer-1920px-74bfa9e0a3d1e8798b931686e2313787.png\",\"childImageSharp\":{\"sizes\":{\"tracedSVG\":\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='267' viewBox='0 0 400 267' version='1'%3E%3Cpath d='M220 1a262 262 0 0 0-18 8l-3 23a1762 1762 0 0 1-48 23c0 2 0 2-1 0 0-2 0-2-2 0s-2 2-6 0c-6-3-8-3-11 0s-3 4 1 7l2 3h-4c-5-1-5 3-1 6l7 5 3 4h-4c-5 1-8 3-8 5l6 3 9 4 6 4c4 2 7 4 8 8 0 2 0 2-3 2h-2c1 1 1 1-1 1-2 1-3 1-2 3h-2l-2 3-3 1-5 1h-1v-1l-1-1h-2c-1-2-9-5-13-5-7 0-13 3-20 10l-6 5v-4c0-4 0-4-3-5l-4-3c0-3 3-8 6-10l6-8 7-11c4-4 4-4 3-6-2-2-2-2 5-7l8-5c0-2-3-1-14 6-12 7-12 8-13 4-1-2 0-4 3-6l3-4c0-2 0-3-10 1-4 2-8 3-10 2-2 0-3 0-6 5-4 6-4 6-8-2l-3-3c-3 0-2 5 1 16 2 6 3 11 2 12l1 2c3 2 4 6 3 9 0 2-1 2-4 2-4-1-4-1-4 8-1 7-1 7 1 7 3 0 3-2 3 23v6l-1-6c0 2-1 3-6 5l-6 3-5-2-13-8-7-4-7 3-9 4c-2 1-3 1-7-1l-5-3v124h200l201-1-1-134V0h-89l-91 1m-85 55l2 2c4 1 14 10 13 11l-9-6-8-5 7 9 7 9-9-5-9-4 7 6c6 6 7 7 10 6h4l-3 2-4 2c-4-1-12 0-12 1s1 2 3 2l9 4 6 3c3 0 8 5 9 9l1 3 11-4-2-5c-2-4-3-7-2-11 0-6-2-14-7-23-5-10-7-10-3 0l2 7c-1 0-6-1-5-2 1-2-2-4-9-8s-9-5-9-3M63 71l6 20c1 1 16-7 16-8s-4-3-5-2c-2 0-2-1-1-3 1-1 2-1 5 1 3 3 5 3 5 2L79 70c-2 0-7 10-7 13 1 4-1 2-4-5-4-8-5-9-5-7m204 9c-7 7-10 8-15 5-3-1-3-1-10 2-10 5-11 7-12 19l-1 15c-2 5-2 11-1 14 1 2 2 2 5 1l5 1 4 2c3 0 3 0 3-5l-2-8c-3-5-2-10 1-14l2-5 1-9c2-6 1-7-3-7-3 0-7 2-8 5-2 4-3 4-2-1 2-4 7-7 13-7 4 0 6 2 4 8l-2 9c0 5 0 6-3 9s-4 7-1 10l2 2 3-3c1-1 3-3 3-5l3-3c1-1 1-2-2-4-3-4-4-8-2-11 5-9 19-6 19 3 0 3 0 4 5 4h9c2 1 3 1 3-1 0-8 9-14 15-9 2 1 2 1 2-2 0-5 2-6 10-3 2 0 8 9 6 10l-1-1c-1-4-10-9-11-7l-2 5c0 4 0 5 3 10 6 7 6 14 1 19-5 4-5 5 0 5 2 0 3 0 4 2 1 5 12 7 13 2v-17l-3-13c0-8-1-9-4-14-4-6-7-7-14-6-4 1-5 1-7-1l-7-4-7-4c-2-3-3-3-8-3-6 0-6 0-11 5m-165-3l-8 5c-12 6-23 13-23 14l1 4c2 2 2 4 1 6-1 3-1 4 4 5 6 1 6 1 9-6 1-3 2-5 4-6l6-7 6-10 3-5h-3m63 29l-13 4 2 5 2 4 12-4c11-4 12-5 12-7s0-2-1-1h-3c-1-2 2-4 3-2 2 1 2 1 2-1 0-3-1-3-16 2m103 6c-2 2-5 3-7 3-3 0-6 4-6 7 0 2 1 3 3 1 1-2 9-5 13-5h5l-7 2-7 2-3 4c-3 3-3 4-3 8 2 11 5 17 8 14 2-3 3-2 2 0-4 6 1 13 10 17 8 2 11 1 19-7 8-9 12-11 19-14 6-1 7-4 3-4l-3-2c-2-5-10-3-18 5-4 4-6 3-4 0 1-4-1-4-6-1-4 2-5 1-1-2l2-2c-3-3-6-4-8-4-1 0-2 0-1-1 1-2 4-1 10 2 8 4 9 4 9-3v-4l2-2c1-4 0-7-4-8l-5-3c-4-7-15-8-22-3m37-2c0 3-7 5-10 5h-2l2 1c2 0 8 5 8 6 0 3 3 6 5 5 4-1 5-8 2-14-3-4-4-5-5-3m-241 5c0 5 0 5 11 7l12 2c2 0 3 0 4-3v-5l-25-6-2 5m190 32c0 9 1 12 8 19l8 10c3 5 9 6 11 1v-3l3-2 7-2c4-1 1 2-3 4-5 2-6 6-1 6 4 0 9-5 14-14 3-4 4-6 6-14 0-3-1-3-5 1a116 116 0 0 1-11 11c-3 3-3 3-10 3l-9-1c-3-2-10-9-10-11l-2-5-4-7c-1-5-2-3-2 4m-123-3c-2 3-11 7-8 4 1-2 1-2-2-1l-12 2c-10 1-15 3-16 7 0 2 0 2 1 1 0-3 1-2 3 1s2 4-1 1h-2l2 2a3534 3534 0 0 1 19 18c4 6 7 7 13 6 8-2 12-4 15-11 2-4 2-4 0-3-2 0-2 0 0-1l5-5 5-4c1 0 4-4 4-6l-2 1c-1 4-2 4-2 1 0-2-1-3-4-4l-11-6-5-5-2 2m-9 7c-1 2-3 2-9 2h-8c-1 2-1 2 4 2l8 1c2 1 2 1 0 1h-6c-6 0-7 1-3 2l5 1 4-1 2-1h1v7l2 3 3 2h-3l-7 2h14l4-2-2-1-4 1-3 1 3-3c4-5 4-7-1-3-2 3-3 2-3-5v-6c2-3 1-5-1-3' fill='lightgray' fill-rule='evenodd'/%3E%3C/svg%3E\",\"src\":\"/static/how-to-create-a-php-package-for-composer-1920px-74bfa9e0a3d1e8798b931686e2313787-ab24c.png\",\"srcSet\":\"/static/how-to-create-a-php-package-for-composer-1920px-74bfa9e0a3d1e8798b931686e2313787-310d9.png 310w,\\n/static/how-to-create-a-php-package-for-composer-1920px-74bfa9e0a3d1e8798b931686e2313787-63c25.png 620w,\\n/static/how-to-create-a-php-package-for-composer-1920px-74bfa9e0a3d1e8798b931686e2313787-ab24c.png 1240w,\\n/static/how-to-create-a-php-package-for-composer-1920px-74bfa9e0a3d1e8798b931686e2313787-80007.png 1860w,\\n/static/how-to-create-a-php-package-for-composer-1920px-74bfa9e0a3d1e8798b931686e2313787-2d6df.png 1920w\"}}},\"date\":\"20 July, 2018\",\"tags\":[\"composer\",\"php\",\"open source\",\"github\",\"tips\",\"tutorial\"],\"section\":\"blog\"},\"fields\":{\"slug\":\"/blog/2018/how-to-create-a-php-package-for-composer/\"}},\"relatedPosts\":{\"edges\":[{\"node\":{\"html\":\"<p>Design systems are upon us. Everywhere you look, companies are releasing new fangled design systems with fancy names like <a href=\\\"https://polaris.shopify.com/\\\">Polaris</a>, <a href=\\\"https://github.com/mashmatrix/react-lightning-design-system\\\">Lightning</a>, or <a href=\\\"https://github.com/IBM/carbon-components-react\\\">Carbon</a>. And you've got open source systems like <a href=\\\"https://github.com/mui-org/material-ui\\\">Material UI</a> getting used in <a href=\\\"https://www.npmjs.com/package/@material-ui/core\\\">every other project</a> because of their high quality and accessibility.</p>\\n<p>But if you're here, I don't need to convince you of the advantages of having a design system. You already know the benefits of having a single source of truth for your web components across all projects, and how empowering it is for developers to have a dedicated ecosystem to control and create a consistent style guide. </p>\\n<p>You're probably asking yourself the same thing I did: What exactly does it take to make a design system? I wrote down traits I'd encountered across most systems that were absolutely essential and went on my way.</p>\\n<h2>Requirements for a Design System</h2>\\n<ul>\\n<li>Components </li>\\n<li>Development environment to view components</li>\\n<li>Documentation (with prop-types and examples)</li>\\n<li>Unit testing <em>(and ideally visual regression)</em></li>\\n<li>Automated code linting and formatting</li>\\n</ul>\\n<p>It's pretty simple when you distill it down. </p>\\n<p>We need components to share. A place to build them and another place to document them. And linting and testing that ensures code is error free and working.</p>\\n<blockquote>\\n<p>This is the best part of how simple a design system can be. If our end user is just importing our components into their app (NPM or otherwise), we don't need to build or transpile our code. The end user will be handling that in their own way. The only reason you'd need to build your code is if you wanted to distribute component files (so users can import them as <code class=\\\"language-text\\\">&lt;script&gt;</code> tags from a CDN).</p>\\n</blockquote>\\n<h2>The Stack</h2>\\n<p>For the sake of this tutorial, I'll be going with the following stack:</p>\\n<ul>\\n<li><strong>Component system:</strong> <a href=\\\"https://reactjs.org\\\">ReactJS</a></li>\\n<li><strong>CSS in JS:</strong> <a href=\\\"https://github.com/cssinjs/react-jss\\\">react-jss</a></li>\\n<li><strong>Code Transpiling for Development</strong>: <a href=\\\"https://babeljs.io/docs/en\\\">Babel</a></li>\\n<li><strong>Development Environment:</strong> <a href=\\\"https://storybook.js.org/\\\">StorybookJS</a></li>\\n<li><strong>Component testing:</strong> <a href=\\\"https://jestjs.io/\\\">jest</a> + [enzyme]</li>\\n<li><strong>Documentation:</strong> <a href=\\\"https://github.com/styleguidist/react-styleguidist\\\">react-styleguideist</a>(<a href=\\\"https://github.com/airbnb/enzyme\\\">https://github.com/airbnb/enzyme</a>)</li>\\n<li><strong>Code linting + formatting:</strong> <a href=\\\"https://eslint.org/\\\">ESLint</a> + <a href=\\\"https://github.com/prettier/prettier\\\">Prettier</a></li>\\n</ul>\\n<p>Let's tackle each of these needs one by one, and build this design system piece by piece. </p>\\n<h2>Components</h2>\\n<p>We'll be building our components with ReactJS, and in this case, styling them using a CSS in JS library. You can totally use CSS, SASS, LESS, or whatever you prefer in your own system. I chose CSS in JS for the benefits when used in design systems.</p>\\n<p>CSS in JS <a href=\\\"https://hackernoon.com/all-you-need-to-know-about-css-in-js-984a72d48ebc\\\">allows for advantages</a> like less dead CSS, optimized styles on demand - rather than loading an entire CSS stylesheet of stuff we don't use, and more modularity by separating the CSS on a component level. Your style logic is separated beyond simply files - since all class names are uniquely generated (<code class=\\\"language-text\\\">.bem--btn-1389429</code>), you don't have to worry about namespace collisions or leaky styles.  </p>\\n<p>This allows our components to be as <strong>lightweight as possible</strong>, and slip in and out of other apps without requiring global styles that would conflict with other systems.</p>\\n<blockquote>\\n<p>If you don't know what CSS in JS is, here's <a href=\\\"https://hackernoon.com/all-you-need-to-know-about-css-in-js-984a72d48ebc\\\">everything you need to know</a>. And here's <a href=\\\"https://medium.com/@gajus/stop-using-css-in-javascript-for-web-development-fa32fb873dcc\\\">why you might not want to use it.</a></p>\\n</blockquote>\\n<p>I'll quickly cover how I chose the CSS in JS library in correlation to design systems. If you're not that interested in those, just skip past to <em>\\\"Starting your project\\\"</em>.</p>\\n<h3>The CSS in JS War</h3>\\n<p>There are quite a few CSS in JS options out on the market, from <a href=\\\"https://www.styled-components.com/\\\">Styled Components</a> to <a href=\\\"https://github.com/Khan/aphrodite\\\">Aphrodite</a> to <a href=\\\"https://github.com/emotion-js/emotion\\\">Emotion</a> to JSS and everything in between. So how do you choose between all of them? </p>\\n<p>I left it down to a few factors: Ease of use, Bundle Size, and Performance (load and render times).</p>\\n<p>If you like writing code that looks more like actual CSS, you probably want to go with <strong>Styled Components</strong> or <strong>Emotion</strong>. Or if you're looking for React Native support out of the box, you'd pick Aphrodite. And if you wanted to judge by performance, well...those numbers <a href=\\\"https://github.com/oliviertassinari/a-journey-toward-better-style#results\\\">seem</a> <a href=\\\"https://medium.com/@tkh44/emotion-ad1c45c6d28b\\\">all</a> <a href=\\\"https://github.com/hellofresh/css-in-js-perf-tests\\\">over</a> <a href=\\\"http://cssinjs.org/performance/?v=v9.8.7\\\">the</a> <a href=\\\"https://github.com/A-gambit/CSS-IN-JS-Benchmarks\\\">place</a>.</p>\\n<h3>My CSS in JS choice</h3>\\n<p>At the end of of the day, I chose JSS (specifically react-jss for React integration). It's got great performance, small bundle, and large system's like Material UI have shown it's worth.</p>\\n<p>I initially chose Emotion, because I liked writing real CSS instead of JSON. But theming with Emotion didn't work as well as it did with JSS. Emotion technically performs better when you don't used it's 'styled' components, but it forces you to use them when you want theme variables in your CSS. Less perf, more abstraction and dependencies-- not what I wanted for this system.</p>\\n<p>JSS was the clear winner, time to build our system.</p>\\n<h2>Starting your project</h2>\\n<ol>\\n<li>Create a new folder for your project: <code class=\\\"language-text\\\">mkdir your-design-system</code></li>\\n<li>Inside the project folder, initialize an NPM package: <code class=\\\"language-text\\\">npm init</code></li>\\n<li>Create a Git repository: <code class=\\\"language-text\\\">git init</code></li>\\n<li>Install the dev dependencies: </li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">npm</span> i --save-dev react react-dom babel-cli babel-core babel-preset-env babel-preset-react @storybook/react @storybook/addon-options\\n</code></pre>\\n      </div>\\n<ol start=\\\"5\\\">\\n<li>Install the dependencies: <code class=\\\"language-text\\\">npm install react-jss</code></li>\\n<li>Go inside your <code class=\\\"language-text\\\">package.json</code> and add peer dependencies:</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token string\\\">\\\"peerDependencies\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">\\\"react\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"^16.0.0\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"react-dom\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"^16.0.0\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"7\\\">\\n<li>Create a <code class=\\\"language-text\\\">.babelrc</code> file in the project root and add these preset configurations: </li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"presets\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"env\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"react\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"8\\\">\\n<li>Create a new folder in the project root called <code class=\\\"language-text\\\">.storybook</code> and create a <code class=\\\"language-text\\\">config.js</code> file in that folder with the following config:</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> configure <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'@storybook/react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> setOptions <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"@storybook/addon-options\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Option defaults:</span>\\n<span class=\\\"token function\\\">setOptions</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">/**\\n   * Name to display in the top left corner\\n   * @type {String}\\n   */</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'JSS Design System'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">/**\\n   * URL for name in top left corner to link to\\n   * @type {String}\\n   */</span>\\n  url<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'https://github.com/whoisryosuke'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">/**\\n   * Show story component as full screen\\n   * @type {Boolean}\\n   */</span>\\n  goFullScreen<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">/**\\n   * Display left panel that shows a list of stories\\n   * @type {Boolean}\\n   */</span>\\n  showLeftPanel<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">/**\\n   * Display horizontal panel that displays addon configurations\\n   * @type {Boolean}\\n   */</span>\\n  showDownPanel<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">/**\\n   * Display floating search box to search through stories\\n   * @type {Boolean}\\n   */</span>\\n  showSearchBox<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">/**\\n   * Show horizontal addons panel as a vertical panel on the right\\n   * @type {Boolean}\\n   */</span>\\n  downPanelInRight<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">/**\\n   * Sorts stories\\n   * @type {Boolean}\\n   */</span>\\n  sortStoriesByKind<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">/**\\n   * Regex for finding the hierarchy separator\\n   * @example:\\n   *   null - turn off hierarchy\\n   *   /\\\\// - split by `/`\\n   *   /\\\\./ - split by `.`\\n   *   /\\\\/|\\\\./ - split by `/` or `.`\\n   * @type {Regex}\\n   */</span>\\n  hierarchySeparator<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">/**\\n   * Sidebar tree animations\\n   * @type {Boolean}\\n   */</span>\\n  sidebarAnimations<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">/**\\n   * ID to select an addon panel\\n   * @type {String}\\n   */</span>\\n  selectedAddonPanel<span class=\\\"token punctuation\\\">:</span> undefined <span class=\\\"token comment\\\">// The order of addons in the \\\"Addons Panel\\\" is the same as you import them in 'addons.js'. The first panel will be opened by default as you run Storybook</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// This will search the /src/components/ folder (and sub-folders) for any files that match &lt;filename>.story.js </span>\\n<span class=\\\"token comment\\\">// (e.g /src/components/Button/Button.story.js)</span>\\n<span class=\\\"token keyword\\\">const</span> req <span class=\\\"token operator\\\">=</span> require<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">context</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'../src/components/'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token regex\\\">/(\\\\.story\\\\.js$)|(\\\\.story\\\\.jsx$)/</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">loadStories</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  req<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">req</span><span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">configure</span><span class=\\\"token punctuation\\\">(</span>loadStories<span class=\\\"token punctuation\\\">,</span> module<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>And now you have a base project to start developing components! Let's break down what just happened:</p>\\n<p>We created a new project (NPM, Git, etc), installed all the dependencies, and setup default configurations for Babel and Storybook. The Storybook config specifically tells Storybook to grab all the stories from the <code class=\\\"language-text\\\">src/components/</code> folder that have the suffix <code class=\\\"language-text\\\">.story.js</code>.</p>\\n<blockquote>\\n<p>Check out the <a href=\\\"https://storybook.js.org/basics/slow-start-guide/\\\">StorybookJS' Slow Start Guide</a> for more behind the setup of that.</p>\\n</blockquote>\\n<h2>Creating our first component</h2>\\n<p>We'll be placing our components in the <code class=\\\"language-text\\\">/src/components/</code> folder. Each component will be stored inside it's own folder, preferably Pascal cased (ComponentNameExample). Inside will contain any components, stories, tests, and an <code class=\\\"language-text\\\">index.js</code> to provide default exports for all the components.</p>\\n<p>It should look like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">components\\n└─┬ Button\\n     ├── Button.js\\n     ├── Button.story.js\\n     ├── Button.test.js\\n     ├── ButtonAlternate.js\\n     ├── ButtonAlternate.story.js\\n     └── ButtonAlternate.test.js</code></pre>\\n      </div>\\n<p>Let's start by creating a new component at <code class=\\\"language-text\\\">/src/components/Button/Button.js</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// The HOC we wrap our components in to apply styles</span>\\n<span class=\\\"token keyword\\\">import</span> injectSheet <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react-jss\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Your CSS file - in a JS object</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">styles</span> <span class=\\\"token operator\\\">=</span> theme <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token comment\\\">// All top level object keys are different class names</span>\\n  myButton<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Global style applied from theming</span>\\n    color<span class=\\\"token punctuation\\\">:</span> theme<span class=\\\"token punctuation\\\">.</span>text<span class=\\\"token punctuation\\\">.</span>color<span class=\\\"token punctuation\\\">,</span>\\n    margin<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// jss-expand gives more readable syntax</span>\\n      top<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// jss-default-unit makes this 5px</span>\\n      right<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n      bottom<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n      left<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"1rem\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n    <span class=\\\"token comment\\\">// And we get SASS/LESS like qualities with the nested &amp;</span>\\n    <span class=\\\"token string\\\">\\\"&amp; span\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// jss-nested applies this to a child span</span>\\n      fontWeight<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"bold\\\"</span> <span class=\\\"token comment\\\">// jss-camel-case turns this into 'font-weight'</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  myLabel<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    fontStyle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"italic\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Define the component using these styles and pass it the 'classes' prop.</span>\\n<span class=\\\"token comment\\\">// Use this to assign scoped class names.</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Button</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> classes<span class=\\\"token punctuation\\\">,</span> children <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>button className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>classes<span class=\\\"token punctuation\\\">.</span>myButton<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>span className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>classes<span class=\\\"token punctuation\\\">.</span>myLabel<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>children<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>span<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Export component with HOC to apply styles from above</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token function\\\">injectSheet</span><span class=\\\"token punctuation\\\">(</span>styles<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>Button<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Let's break this component down and understand how JSS works.</p>\\n<p>The first major thing we see is a variable for CSS styling called <code class=\\\"language-text\\\">styles</code>. In this case, the <code class=\\\"language-text\\\">styles</code> variable is a function that accepts a <code class=\\\"language-text\\\">theme</code> object, and returns an object of CSS classes. That <code class=\\\"language-text\\\">theme</code> object contains global values we place in a <code class=\\\"language-text\\\">theme.js</code> file, allowing us to set dynamic values like <code class=\\\"language-text\\\">theme.text.color</code>. </p>\\n<blockquote>\\n<p>If you don't need to access any theme variables, the <code class=\\\"language-text\\\">styles</code> variable can be just an object (instead of a function).</p>\\n</blockquote>\\n<p>Below the <code class=\\\"language-text\\\">styles</code> variable is the actual Button itself, which is just a functional React component. The <code class=\\\"language-text\\\">injectSheet</code> HOC processes the style variable and provides a <code class=\\\"language-text\\\">classes</code> prop on the Button component. We grab our class names from there, and apply them using <code class=\\\"language-text\\\">className={classes.buttonClassName}</code>.</p>\\n<p><strong>So basically:</strong></p>\\n<ul>\\n<li>CSS is written as a Javascript object</li>\\n<li>We wrap our component in a \\\"HOC\\\" (see below)</li>\\n<li>The HOC compiles the CSS <em>object</em> into <em>actual CSS</em> and injects it into the app (as <code class=\\\"language-text\\\">&lt;style&gt;&lt;/style&gt;</code> elements in the <code class=\\\"language-text\\\">&lt;head&gt;</code>)</li>\\n<li>The HOC also provides our component with a <code class=\\\"language-text\\\">classes</code> prop, which contains any class names we wrote in our CSS object earlier.</li>\\n<li>We then apply class names to our components using the <code class=\\\"language-text\\\">classes</code> object (kinda like <a href=\\\"https://github.com/css-modules/css-modules\\\">CSS modules</a>)</li>\\n</ul>\\n<p>Now that we have a component, let's actually figure out how to look at it.</p>\\n<h2>Setting up the dev environment</h2>\\n<p>The problem with developing React components is having a dev environment setup to make the process possible. You'll usually find yourself using a boilerplate like <strong>Create React App</strong>, or creating a <strong>custom Webpack config</strong> to compile the JS to a page. Instead of <em>bloating</em> our project down with all the Create React App dependencies, or going through the hassle of setting up Webpack just to look at components -- we use StorybookJS.</p>\\n<p><a href=\\\"http://storybook.js.org\\\"><strong>StorybookJS</strong></a> is a live development environment for your components. Spinning up StorybookJS locally launches a component library in your browser, with live component previews (and hot reloading if you save changes). By creating <em>\\\"stories\\\"</em>, we can browse through our components, and even create different states (like an active or disabled button). </p>\\n<blockquote>\\n<p><em>Ironically</em>, StorybookJS uses Create React App to run your application. It just downloads it on demand.</p>\\n</blockquote>\\n<h2>Creating stories</h2>\\n<p>Our Storybook config (<code class=\\\"language-text\\\">/.storybook/config.js</code>) looks through our <code class=\\\"language-text\\\">src/components/</code> folder and finds any files with the suffix <code class=\\\"language-text\\\">.story.js</code>. </p>\\n<p>We can create our first story by making a file in <code class=\\\"language-text\\\">src/components/Button/Button.story.js</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> storiesOf <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'@storybook/react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> action <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'@storybook/addon-actions'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> ThemeProvider <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-jss'</span>\\n<span class=\\\"token keyword\\\">import</span> theme <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"../../theme/theme\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> Button <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"./Button\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">storiesOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Button'</span><span class=\\\"token punctuation\\\">,</span> module<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'with text'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>ThemeProvider theme<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>theme<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>Button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token function\\\">action</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'clicked'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>Hello Button<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Button<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ThemeProvider<span class=\\\"token operator\\\">></span>\\n\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'with some emoji'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>ThemeProvider theme<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>theme<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>Button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token function\\\">action</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'clicked'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">&lt;</span>span role<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"img\\\"</span> aria<span class=\\\"token operator\\\">-</span>label<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"so cool\\\"</span><span class=\\\"token operator\\\">></span>😀 😎 👍 💯<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>span<span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Button<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ThemeProvider<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>   \\n</code></pre>\\n      </div>\\n<p>Storybook uses a function called <code class=\\\"language-text\\\">storiesOf</code> to create stories of your component. We chain <code class=\\\"language-text\\\">.add(description, component)</code> methods to it with the variations of our component.</p>\\n<p>The only special thing we do here is wrap our components in a <code class=\\\"language-text\\\">&lt;ThemeProvider&gt;</code> component. This comes from <code class=\\\"language-text\\\">react-jss</code>, and uses React's Context Provider system to pass the <code class=\\\"language-text\\\">theme</code> object down to our <code class=\\\"language-text\\\">&lt;Button&gt;</code>.  If we didn't wrap this, we couldn't use the <code class=\\\"language-text\\\">theme</code> variable in our components.</p>\\n<h2>Running your Storybook</h2>\\n<p>Starting up StorybookJS is as simple as <code class=\\\"language-text\\\">npm run storybook</code>. This will spin up a development server at <a href=\\\"http://localhost:9001/\\\">http://localhost:9001/</a>. Here you'll find the Storybook dashboard, and any stories you've created inside <code class=\\\"language-text\\\">src/components/</code>.</p>\\n<p>If you make any changes to your components and save while Storybook dev server is running, it'll re-build and reload with any changes.</p>\\n<h2>Simple as that!</h2>\\n<p>You'd be surprised by how easy it can be to start developing React components and deploying them as NPM packages. </p>\\n<p>At the end of the day, <strong>you only need to write React code</strong> and commit it to git. <strong>There's no need to setup crazy build processes</strong> like Webpack or Parcel, or even Babel really. Your components will be imported into other people's projects who will handle transpiling on their end. The simpler you keep your project, the better actually.</p>\\n<p>You can see my final <a href=\\\"https://github.com/whoisryosuke/jss-design-system\\\">JSS Design System boilerplate here</a>, and also look at the branches labeled 'starter'. Or check out the <a href=\\\"https://github.com/whoisryosuke/emotion-semantic-ui\\\">Emotion JS Design System boilerplate</a> for comparison.</p>\\n<p>In the next part of the tutorial I'll cover adding testing, linting, and automated component documentation!</p>\\n<p>If you want to add your design system to NPM, <a href=\\\"https://docs.npmjs.com/getting-started/publishing-npm-packages\\\">check out their guide here.</a></p>\\n<p>Rock on 🤘\\nRyo</p>\\n<p><strong>References</strong></p>\\n<ul>\\n<li><a href=\\\"https://github.com/cssinjs/react-jss\\\">react-jss</a></li>\\n<li><a href=\\\"https://storybook.js.org/basics/guide-react/\\\">Storybook for React</a></li>\\n<li><a href=\\\"https://github.com/oliviertassinari/a-journey-toward-better-style#results\\\">CSS in JS Performance 1</a></li>\\n<li><a href=\\\"https://medium.com/@tkh44/emotion-ad1c45c6d28b\\\">CSS in JS Performance 2</a></li>\\n<li><a href=\\\"https://github.com/hellofresh/css-in-js-perf-tests\\\">CSS in JS Performance 3</a></li>\\n<li><a href=\\\"http://cssinjs.org/performance/?v=v9.8.7\\\">CSS in JS Performance 4</a></li>\\n<li><a href=\\\"https://github.com/A-gambit/CSS-IN-JS-Benchmarks\\\">CSS in JS Performance 5</a></li>\\n<li><a href=\\\"https://github.com/mui-org/material-ui/issues/6115\\\">CSS in JS Performance 6 - Why Material UI chose JSS over Styled Components</a></li>\\n<li><a href=\\\"https://github.com/sumup/circuit-ui\\\">circuit-ui - Design system using Emotion</a></li>\\n<li><a href=\\\"https://www.youtube.com/watch?v=bLgZwFRYTJ4\\\">Video: Siddharth Kshetrapal - We Need To Talk About Our Frontend Workflow - ReactFest </a></li>\\n<li><a href=\\\"https://www.youtube.com/watch?v=iMunXpy2Ezo\\\">Video: Jon Gold - react-sketchapp: Design as a Function of Data</a></li>\\n<li><a href=\\\"http://bradfrost.github.io/style-guide-guide/\\\">Style Guide Guide</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Creating a Design System for ReactJS from Scratch\",\"cover_image\":{\"publicURL\":\"/static/Creating-a-Design-System-pt1-1920px-291941070c907aec0c7e0f57412d8b72.jpg\",\"childImageSharp\":{\"sizes\":{\"src\":\"/static/Creating-a-Design-System-pt1-1920px-291941070c907aec0c7e0f57412d8b72-4e8db.jpg\",\"srcSet\":\"/static/Creating-a-Design-System-pt1-1920px-291941070c907aec0c7e0f57412d8b72-7cc04.jpg 310w,\\n/static/Creating-a-Design-System-pt1-1920px-291941070c907aec0c7e0f57412d8b72-69042.jpg 620w,\\n/static/Creating-a-Design-System-pt1-1920px-291941070c907aec0c7e0f57412d8b72-4e8db.jpg 1240w,\\n/static/Creating-a-Design-System-pt1-1920px-291941070c907aec0c7e0f57412d8b72-50ab1.jpg 1860w,\\n/static/Creating-a-Design-System-pt1-1920px-291941070c907aec0c7e0f57412d8b72-5d231.jpg 1980w\"}}},\"date\":\"22 August, 2018\",\"tags\":[\"design\",\"design system\",\"react\",\"open source\",\"javascript\",\"tutorial\"]},\"fields\":{\"slug\":\"/blog/2018/creating-a-design-system-for-reactjs-from-scratch/\"}}}]}},\"pathContext\":{\"tag\":\"open source\",\"slug\":\"/blog/2018/how-to-create-a-php-package-for-composer/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-2018-how-to-create-a-php-package-for-composer-077afa0eb130ebf24c08.js","module.exports = {\"data\":{\"blog\":{\"html\":\"<p>Recently, I've recently been trying my best to upload as much code to open source repositories like <a href=\\\"http://github.com/whoisryosuke\\\"><strong>Github</strong></a> and <a href=\\\"http://codepen.io/whoisryosuke\\\"><strong>Codepen</strong></a>. It makes bootstrapping new projects much simpler when I can <code class=\\\"language-text\\\">git clone</code> a boilerplate from my Github, or <em>copypasta</em> a CSS/JS snippet from CodePen. But what happens when I need to include a library or module into several projects? Cloning and copy paste just don't cut it at that point.</p>\\n<p>Cut to <a href=\\\"http://npmjs.com\\\"><strong>NPM</strong></a> and <a href=\\\"http://getcomposer.com\\\"><strong>Composer</strong></a> ( or really <a href=\\\"http://packagist.com\\\">Packagist</a>. NPM is a package manager for Javascript using Node, and Composer does the same for PHP. </p>\\n<p>Today we'll be looking into submitting a PHP \\\"package\\\" to Composer through the Packagist, so we can use <code class=\\\"language-text\\\">composer require</code> to install our package into any project!</p>\\n<h2>The simple steps</h2>\\n<p>It's as easy as 4 steps (<em>minus the part where you code a reusable package in PHP</em>) -- I was surprised too. Make sure before starting you've created a git repository in your project and committed your code. It's also required to have an account on <a href=\\\"http://github.com\\\">Github</a> and <a href=\\\"http://packagist\\\">Packagist</a>.</p>\\n<ol>\\n<li>Create a <code class=\\\"language-text\\\">composer.json</code> in your project:</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"your-brand-name/your-project\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"type\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"library\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"description\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"Your package description goes here\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"keywords\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"relevant\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"tags\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"go\\\"</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\"here\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"homepage\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"https://yourcompany.com\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"license\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"MIT\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"authors\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"Jordi Boggiano\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"email\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"j.boggiano@seld.be\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"homepage\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"http://seld.be\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"role\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"Developer\\\"</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"2\\\">\\n<li>\\n<p><a href=\\\"https://github.com/new\\\">Create a new repository on your Github</a> and push your local git (init if you haven't) to the remote Github repo.</p>\\n</li>\\n<li>\\n<p><a href=\\\"https://packagist.org/packages/submit\\\">Submit your package to the Packagist</a></p>\\n</li>\\n<li>\\n<p>Done! Your package should be online and Packagist should provide a sample Composer require with your project name (e.g. <code class=\\\"language-text\\\">composer require username/package-name</code>)</p>\\n</li>\\n</ol>\\n<blockquote>\\n<p>You should be able to view your package live at: <code class=\\\"language-text\\\">https://packagist.org/packages/your-username/package-name</code></p>\\n</blockquote>\\n<h2>So easy, there's no excuse</h2>\\n<p>One of the biggest principles of programming I try to apply is <strong>DRY</strong>, <em>don't repeat yourself</em>. When your code is probably already hosted on Github, it's only a two step process to get your code in a place where it's version controlled. </p>\\n<p>Rather than relying on <code class=\\\"language-text\\\">git clone</code> or submodules, it's much more efficient for your codebase to use a composer dependency. </p>\\n<h2>Take my code for a test run</h2>\\n<p>The package I released on the Packagist is for developers working with the Metrc API to send and receive cannabis regulatory data. It's basically a wrapper for their API that uses a Guzzle client to interface with it (using your authoriation credentials).</p>\\n<p>If you're a Metrc developer, or just interested in using the code, you can add it to your projects using:</p>\\n<p><code class=\\\"language-text\\\">composer require kushy/metrc-php-sdk</code></p>\\n<p>Hope that helps,\\nRyo</p>\",\"frontmatter\":{\"title\":\"How to create a PHP package for Composer\",\"cover_image\":{\"publicURL\":\"/static/how-to-create-a-php-package-for-composer-1920px-74bfa9e0a3d1e8798b931686e2313787.png\",\"childImageSharp\":{\"sizes\":{\"tracedSVG\":\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='267' viewBox='0 0 400 267' version='1'%3E%3Cpath d='M220 1a262 262 0 0 0-18 8l-3 23a1762 1762 0 0 1-48 23c0 2 0 2-1 0 0-2 0-2-2 0s-2 2-6 0c-6-3-8-3-11 0s-3 4 1 7l2 3h-4c-5-1-5 3-1 6l7 5 3 4h-4c-5 1-8 3-8 5l6 3 9 4 6 4c4 2 7 4 8 8 0 2 0 2-3 2h-2c1 1 1 1-1 1-2 1-3 1-2 3h-2l-2 3-3 1-5 1h-1v-1l-1-1h-2c-1-2-9-5-13-5-7 0-13 3-20 10l-6 5v-4c0-4 0-4-3-5l-4-3c0-3 3-8 6-10l6-8 7-11c4-4 4-4 3-6-2-2-2-2 5-7l8-5c0-2-3-1-14 6-12 7-12 8-13 4-1-2 0-4 3-6l3-4c0-2 0-3-10 1-4 2-8 3-10 2-2 0-3 0-6 5-4 6-4 6-8-2l-3-3c-3 0-2 5 1 16 2 6 3 11 2 12l1 2c3 2 4 6 3 9 0 2-1 2-4 2-4-1-4-1-4 8-1 7-1 7 1 7 3 0 3-2 3 23v6l-1-6c0 2-1 3-6 5l-6 3-5-2-13-8-7-4-7 3-9 4c-2 1-3 1-7-1l-5-3v124h200l201-1-1-134V0h-89l-91 1m-85 55l2 2c4 1 14 10 13 11l-9-6-8-5 7 9 7 9-9-5-9-4 7 6c6 6 7 7 10 6h4l-3 2-4 2c-4-1-12 0-12 1s1 2 3 2l9 4 6 3c3 0 8 5 9 9l1 3 11-4-2-5c-2-4-3-7-2-11 0-6-2-14-7-23-5-10-7-10-3 0l2 7c-1 0-6-1-5-2 1-2-2-4-9-8s-9-5-9-3M63 71l6 20c1 1 16-7 16-8s-4-3-5-2c-2 0-2-1-1-3 1-1 2-1 5 1 3 3 5 3 5 2L79 70c-2 0-7 10-7 13 1 4-1 2-4-5-4-8-5-9-5-7m204 9c-7 7-10 8-15 5-3-1-3-1-10 2-10 5-11 7-12 19l-1 15c-2 5-2 11-1 14 1 2 2 2 5 1l5 1 4 2c3 0 3 0 3-5l-2-8c-3-5-2-10 1-14l2-5 1-9c2-6 1-7-3-7-3 0-7 2-8 5-2 4-3 4-2-1 2-4 7-7 13-7 4 0 6 2 4 8l-2 9c0 5 0 6-3 9s-4 7-1 10l2 2 3-3c1-1 3-3 3-5l3-3c1-1 1-2-2-4-3-4-4-8-2-11 5-9 19-6 19 3 0 3 0 4 5 4h9c2 1 3 1 3-1 0-8 9-14 15-9 2 1 2 1 2-2 0-5 2-6 10-3 2 0 8 9 6 10l-1-1c-1-4-10-9-11-7l-2 5c0 4 0 5 3 10 6 7 6 14 1 19-5 4-5 5 0 5 2 0 3 0 4 2 1 5 12 7 13 2v-17l-3-13c0-8-1-9-4-14-4-6-7-7-14-6-4 1-5 1-7-1l-7-4-7-4c-2-3-3-3-8-3-6 0-6 0-11 5m-165-3l-8 5c-12 6-23 13-23 14l1 4c2 2 2 4 1 6-1 3-1 4 4 5 6 1 6 1 9-6 1-3 2-5 4-6l6-7 6-10 3-5h-3m63 29l-13 4 2 5 2 4 12-4c11-4 12-5 12-7s0-2-1-1h-3c-1-2 2-4 3-2 2 1 2 1 2-1 0-3-1-3-16 2m103 6c-2 2-5 3-7 3-3 0-6 4-6 7 0 2 1 3 3 1 1-2 9-5 13-5h5l-7 2-7 2-3 4c-3 3-3 4-3 8 2 11 5 17 8 14 2-3 3-2 2 0-4 6 1 13 10 17 8 2 11 1 19-7 8-9 12-11 19-14 6-1 7-4 3-4l-3-2c-2-5-10-3-18 5-4 4-6 3-4 0 1-4-1-4-6-1-4 2-5 1-1-2l2-2c-3-3-6-4-8-4-1 0-2 0-1-1 1-2 4-1 10 2 8 4 9 4 9-3v-4l2-2c1-4 0-7-4-8l-5-3c-4-7-15-8-22-3m37-2c0 3-7 5-10 5h-2l2 1c2 0 8 5 8 6 0 3 3 6 5 5 4-1 5-8 2-14-3-4-4-5-5-3m-241 5c0 5 0 5 11 7l12 2c2 0 3 0 4-3v-5l-25-6-2 5m190 32c0 9 1 12 8 19l8 10c3 5 9 6 11 1v-3l3-2 7-2c4-1 1 2-3 4-5 2-6 6-1 6 4 0 9-5 14-14 3-4 4-6 6-14 0-3-1-3-5 1a116 116 0 0 1-11 11c-3 3-3 3-10 3l-9-1c-3-2-10-9-10-11l-2-5-4-7c-1-5-2-3-2 4m-123-3c-2 3-11 7-8 4 1-2 1-2-2-1l-12 2c-10 1-15 3-16 7 0 2 0 2 1 1 0-3 1-2 3 1s2 4-1 1h-2l2 2a3534 3534 0 0 1 19 18c4 6 7 7 13 6 8-2 12-4 15-11 2-4 2-4 0-3-2 0-2 0 0-1l5-5 5-4c1 0 4-4 4-6l-2 1c-1 4-2 4-2 1 0-2-1-3-4-4l-11-6-5-5-2 2m-9 7c-1 2-3 2-9 2h-8c-1 2-1 2 4 2l8 1c2 1 2 1 0 1h-6c-6 0-7 1-3 2l5 1 4-1 2-1h1v7l2 3 3 2h-3l-7 2h14l4-2-2-1-4 1-3 1 3-3c4-5 4-7-1-3-2 3-3 2-3-5v-6c2-3 1-5-1-3' fill='lightgray' fill-rule='evenodd'/%3E%3C/svg%3E\",\"src\":\"/static/how-to-create-a-php-package-for-composer-1920px-74bfa9e0a3d1e8798b931686e2313787-ab24c.png\",\"srcSet\":\"/static/how-to-create-a-php-package-for-composer-1920px-74bfa9e0a3d1e8798b931686e2313787-310d9.png 310w,\\n/static/how-to-create-a-php-package-for-composer-1920px-74bfa9e0a3d1e8798b931686e2313787-63c25.png 620w,\\n/static/how-to-create-a-php-package-for-composer-1920px-74bfa9e0a3d1e8798b931686e2313787-ab24c.png 1240w,\\n/static/how-to-create-a-php-package-for-composer-1920px-74bfa9e0a3d1e8798b931686e2313787-80007.png 1860w,\\n/static/how-to-create-a-php-package-for-composer-1920px-74bfa9e0a3d1e8798b931686e2313787-2d6df.png 1920w\"}}},\"date\":\"20 July, 2018\",\"tags\":[\"composer\",\"php\",\"open source\",\"github\",\"tips\",\"tutorial\"],\"section\":\"blog\"},\"fields\":{\"slug\":\"/blog/2018/how-to-create-a-php-package-for-composer/\"}},\"relatedPosts\":{\"edges\":[{\"node\":{\"html\":\"<p>Design systems are upon us. Everywhere you look, companies are releasing new fangled design systems with fancy names like <a href=\\\"https://polaris.shopify.com/\\\">Polaris</a>, <a href=\\\"https://github.com/mashmatrix/react-lightning-design-system\\\">Lightning</a>, or <a href=\\\"https://github.com/IBM/carbon-components-react\\\">Carbon</a>. And you've got open source systems like <a href=\\\"https://github.com/mui-org/material-ui\\\">Material UI</a> getting used in <a href=\\\"https://www.npmjs.com/package/@material-ui/core\\\">every other project</a> because of their high quality and accessibility.</p>\\n<p>But if you're here, I don't need to convince you of the advantages of having a design system. You already know the benefits of having a single source of truth for your web components across all projects, and how empowering it is for developers to have a dedicated ecosystem to control and create a consistent style guide. </p>\\n<p>You're probably asking yourself the same thing I did: What exactly does it take to make a design system? I wrote down traits I'd encountered across most systems that were absolutely essential and went on my way.</p>\\n<h2>Requirements for a Design System</h2>\\n<ul>\\n<li>Components </li>\\n<li>Development environment to view components</li>\\n<li>Documentation (with prop-types and examples)</li>\\n<li>Unit testing <em>(and ideally visual regression)</em></li>\\n<li>Automated code linting and formatting</li>\\n</ul>\\n<p>It's pretty simple when you distill it down. </p>\\n<p>We need components to share. A place to build them and another place to document them. And linting and testing that ensures code is error free and working.</p>\\n<blockquote>\\n<p>This is the best part of how simple a design system can be. If our end user is just importing our components into their app (NPM or otherwise), we don't need to build or transpile our code. The end user will be handling that in their own way. The only reason you'd need to build your code is if you wanted to distribute component files (so users can import them as <code class=\\\"language-text\\\">&lt;script&gt;</code> tags from a CDN).</p>\\n</blockquote>\\n<h2>The Stack</h2>\\n<p>For the sake of this tutorial, I'll be going with the following stack:</p>\\n<ul>\\n<li><strong>Component system:</strong> <a href=\\\"https://reactjs.org\\\">ReactJS</a></li>\\n<li><strong>CSS in JS:</strong> <a href=\\\"https://github.com/cssinjs/react-jss\\\">react-jss</a></li>\\n<li><strong>Code Transpiling for Development</strong>: <a href=\\\"https://babeljs.io/docs/en\\\">Babel</a></li>\\n<li><strong>Development Environment:</strong> <a href=\\\"https://storybook.js.org/\\\">StorybookJS</a></li>\\n<li><strong>Component testing:</strong> <a href=\\\"https://jestjs.io/\\\">jest</a> + [enzyme]</li>\\n<li><strong>Documentation:</strong> <a href=\\\"https://github.com/styleguidist/react-styleguidist\\\">react-styleguideist</a>(<a href=\\\"https://github.com/airbnb/enzyme\\\">https://github.com/airbnb/enzyme</a>)</li>\\n<li><strong>Code linting + formatting:</strong> <a href=\\\"https://eslint.org/\\\">ESLint</a> + <a href=\\\"https://github.com/prettier/prettier\\\">Prettier</a></li>\\n</ul>\\n<p>Let's tackle each of these needs one by one, and build this design system piece by piece. </p>\\n<h2>Components</h2>\\n<p>We'll be building our components with ReactJS, and in this case, styling them using a CSS in JS library. You can totally use CSS, SASS, LESS, or whatever you prefer in your own system. I chose CSS in JS for the benefits when used in design systems.</p>\\n<p>CSS in JS <a href=\\\"https://hackernoon.com/all-you-need-to-know-about-css-in-js-984a72d48ebc\\\">allows for advantages</a> like less dead CSS, optimized styles on demand - rather than loading an entire CSS stylesheet of stuff we don't use, and more modularity by separating the CSS on a component level. Your style logic is separated beyond simply files - since all class names are uniquely generated (<code class=\\\"language-text\\\">.bem--btn-1389429</code>), you don't have to worry about namespace collisions or leaky styles.  </p>\\n<p>This allows our components to be as <strong>lightweight as possible</strong>, and slip in and out of other apps without requiring global styles that would conflict with other systems.</p>\\n<blockquote>\\n<p>If you don't know what CSS in JS is, here's <a href=\\\"https://hackernoon.com/all-you-need-to-know-about-css-in-js-984a72d48ebc\\\">everything you need to know</a>. And here's <a href=\\\"https://medium.com/@gajus/stop-using-css-in-javascript-for-web-development-fa32fb873dcc\\\">why you might not want to use it.</a></p>\\n</blockquote>\\n<p>I'll quickly cover how I chose the CSS in JS library in correlation to design systems. If you're not that interested in those, just skip past to <em>\\\"Starting your project\\\"</em>.</p>\\n<h3>The CSS in JS War</h3>\\n<p>There are quite a few CSS in JS options out on the market, from <a href=\\\"https://www.styled-components.com/\\\">Styled Components</a> to <a href=\\\"https://github.com/Khan/aphrodite\\\">Aphrodite</a> to <a href=\\\"https://github.com/emotion-js/emotion\\\">Emotion</a> to JSS and everything in between. So how do you choose between all of them? </p>\\n<p>I left it down to a few factors: Ease of use, Bundle Size, and Performance (load and render times).</p>\\n<p>If you like writing code that looks more like actual CSS, you probably want to go with <strong>Styled Components</strong> or <strong>Emotion</strong>. Or if you're looking for React Native support out of the box, you'd pick Aphrodite. And if you wanted to judge by performance, well...those numbers <a href=\\\"https://github.com/oliviertassinari/a-journey-toward-better-style#results\\\">seem</a> <a href=\\\"https://medium.com/@tkh44/emotion-ad1c45c6d28b\\\">all</a> <a href=\\\"https://github.com/hellofresh/css-in-js-perf-tests\\\">over</a> <a href=\\\"http://cssinjs.org/performance/?v=v9.8.7\\\">the</a> <a href=\\\"https://github.com/A-gambit/CSS-IN-JS-Benchmarks\\\">place</a>.</p>\\n<h3>My CSS in JS choice</h3>\\n<p>At the end of of the day, I chose JSS (specifically react-jss for React integration). It's got great performance, small bundle, and large system's like Material UI have shown it's worth.</p>\\n<p>I initially chose Emotion, because I liked writing real CSS instead of JSON. But theming with Emotion didn't work as well as it did with JSS. Emotion technically performs better when you don't used it's 'styled' components, but it forces you to use them when you want theme variables in your CSS. Less perf, more abstraction and dependencies-- not what I wanted for this system.</p>\\n<p>JSS was the clear winner, time to build our system.</p>\\n<h2>Starting your project</h2>\\n<ol>\\n<li>Create a new folder for your project: <code class=\\\"language-text\\\">mkdir your-design-system</code></li>\\n<li>Inside the project folder, initialize an NPM package: <code class=\\\"language-text\\\">npm init</code></li>\\n<li>Create a Git repository: <code class=\\\"language-text\\\">git init</code></li>\\n<li>Install the dev dependencies: </li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">npm</span> i --save-dev react react-dom babel-cli babel-core babel-preset-env babel-preset-react @storybook/react @storybook/addon-options\\n</code></pre>\\n      </div>\\n<ol start=\\\"5\\\">\\n<li>Install the dependencies: <code class=\\\"language-text\\\">npm install react-jss</code></li>\\n<li>Go inside your <code class=\\\"language-text\\\">package.json</code> and add peer dependencies:</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token string\\\">\\\"peerDependencies\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">\\\"react\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"^16.0.0\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"react-dom\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"^16.0.0\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"7\\\">\\n<li>Create a <code class=\\\"language-text\\\">.babelrc</code> file in the project root and add these preset configurations: </li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"presets\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"env\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"react\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"8\\\">\\n<li>Create a new folder in the project root called <code class=\\\"language-text\\\">.storybook</code> and create a <code class=\\\"language-text\\\">config.js</code> file in that folder with the following config:</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> configure <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'@storybook/react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> setOptions <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"@storybook/addon-options\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Option defaults:</span>\\n<span class=\\\"token function\\\">setOptions</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">/**\\n   * Name to display in the top left corner\\n   * @type {String}\\n   */</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'JSS Design System'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">/**\\n   * URL for name in top left corner to link to\\n   * @type {String}\\n   */</span>\\n  url<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'https://github.com/whoisryosuke'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">/**\\n   * Show story component as full screen\\n   * @type {Boolean}\\n   */</span>\\n  goFullScreen<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">/**\\n   * Display left panel that shows a list of stories\\n   * @type {Boolean}\\n   */</span>\\n  showLeftPanel<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">/**\\n   * Display horizontal panel that displays addon configurations\\n   * @type {Boolean}\\n   */</span>\\n  showDownPanel<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">/**\\n   * Display floating search box to search through stories\\n   * @type {Boolean}\\n   */</span>\\n  showSearchBox<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">/**\\n   * Show horizontal addons panel as a vertical panel on the right\\n   * @type {Boolean}\\n   */</span>\\n  downPanelInRight<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">/**\\n   * Sorts stories\\n   * @type {Boolean}\\n   */</span>\\n  sortStoriesByKind<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">/**\\n   * Regex for finding the hierarchy separator\\n   * @example:\\n   *   null - turn off hierarchy\\n   *   /\\\\// - split by `/`\\n   *   /\\\\./ - split by `.`\\n   *   /\\\\/|\\\\./ - split by `/` or `.`\\n   * @type {Regex}\\n   */</span>\\n  hierarchySeparator<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">/**\\n   * Sidebar tree animations\\n   * @type {Boolean}\\n   */</span>\\n  sidebarAnimations<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">/**\\n   * ID to select an addon panel\\n   * @type {String}\\n   */</span>\\n  selectedAddonPanel<span class=\\\"token punctuation\\\">:</span> undefined <span class=\\\"token comment\\\">// The order of addons in the \\\"Addons Panel\\\" is the same as you import them in 'addons.js'. The first panel will be opened by default as you run Storybook</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// This will search the /src/components/ folder (and sub-folders) for any files that match &lt;filename>.story.js </span>\\n<span class=\\\"token comment\\\">// (e.g /src/components/Button/Button.story.js)</span>\\n<span class=\\\"token keyword\\\">const</span> req <span class=\\\"token operator\\\">=</span> require<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">context</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'../src/components/'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token regex\\\">/(\\\\.story\\\\.js$)|(\\\\.story\\\\.jsx$)/</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">loadStories</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  req<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">req</span><span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">configure</span><span class=\\\"token punctuation\\\">(</span>loadStories<span class=\\\"token punctuation\\\">,</span> module<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>And now you have a base project to start developing components! Let's break down what just happened:</p>\\n<p>We created a new project (NPM, Git, etc), installed all the dependencies, and setup default configurations for Babel and Storybook. The Storybook config specifically tells Storybook to grab all the stories from the <code class=\\\"language-text\\\">src/components/</code> folder that have the suffix <code class=\\\"language-text\\\">.story.js</code>.</p>\\n<blockquote>\\n<p>Check out the <a href=\\\"https://storybook.js.org/basics/slow-start-guide/\\\">StorybookJS' Slow Start Guide</a> for more behind the setup of that.</p>\\n</blockquote>\\n<h2>Creating our first component</h2>\\n<p>We'll be placing our components in the <code class=\\\"language-text\\\">/src/components/</code> folder. Each component will be stored inside it's own folder, preferably Pascal cased (ComponentNameExample). Inside will contain any components, stories, tests, and an <code class=\\\"language-text\\\">index.js</code> to provide default exports for all the components.</p>\\n<p>It should look like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">components\\n└─┬ Button\\n     ├── Button.js\\n     ├── Button.story.js\\n     ├── Button.test.js\\n     ├── ButtonAlternate.js\\n     ├── ButtonAlternate.story.js\\n     └── ButtonAlternate.test.js</code></pre>\\n      </div>\\n<p>Let's start by creating a new component at <code class=\\\"language-text\\\">/src/components/Button/Button.js</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// The HOC we wrap our components in to apply styles</span>\\n<span class=\\\"token keyword\\\">import</span> injectSheet <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react-jss\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Your CSS file - in a JS object</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">styles</span> <span class=\\\"token operator\\\">=</span> theme <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token comment\\\">// All top level object keys are different class names</span>\\n  myButton<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Global style applied from theming</span>\\n    color<span class=\\\"token punctuation\\\">:</span> theme<span class=\\\"token punctuation\\\">.</span>text<span class=\\\"token punctuation\\\">.</span>color<span class=\\\"token punctuation\\\">,</span>\\n    margin<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// jss-expand gives more readable syntax</span>\\n      top<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// jss-default-unit makes this 5px</span>\\n      right<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n      bottom<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n      left<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"1rem\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n    <span class=\\\"token comment\\\">// And we get SASS/LESS like qualities with the nested &amp;</span>\\n    <span class=\\\"token string\\\">\\\"&amp; span\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// jss-nested applies this to a child span</span>\\n      fontWeight<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"bold\\\"</span> <span class=\\\"token comment\\\">// jss-camel-case turns this into 'font-weight'</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  myLabel<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    fontStyle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"italic\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Define the component using these styles and pass it the 'classes' prop.</span>\\n<span class=\\\"token comment\\\">// Use this to assign scoped class names.</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Button</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> classes<span class=\\\"token punctuation\\\">,</span> children <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>button className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>classes<span class=\\\"token punctuation\\\">.</span>myButton<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>span className<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>classes<span class=\\\"token punctuation\\\">.</span>myLabel<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>children<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>span<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Export component with HOC to apply styles from above</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token function\\\">injectSheet</span><span class=\\\"token punctuation\\\">(</span>styles<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>Button<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Let's break this component down and understand how JSS works.</p>\\n<p>The first major thing we see is a variable for CSS styling called <code class=\\\"language-text\\\">styles</code>. In this case, the <code class=\\\"language-text\\\">styles</code> variable is a function that accepts a <code class=\\\"language-text\\\">theme</code> object, and returns an object of CSS classes. That <code class=\\\"language-text\\\">theme</code> object contains global values we place in a <code class=\\\"language-text\\\">theme.js</code> file, allowing us to set dynamic values like <code class=\\\"language-text\\\">theme.text.color</code>. </p>\\n<blockquote>\\n<p>If you don't need to access any theme variables, the <code class=\\\"language-text\\\">styles</code> variable can be just an object (instead of a function).</p>\\n</blockquote>\\n<p>Below the <code class=\\\"language-text\\\">styles</code> variable is the actual Button itself, which is just a functional React component. The <code class=\\\"language-text\\\">injectSheet</code> HOC processes the style variable and provides a <code class=\\\"language-text\\\">classes</code> prop on the Button component. We grab our class names from there, and apply them using <code class=\\\"language-text\\\">className={classes.buttonClassName}</code>.</p>\\n<p><strong>So basically:</strong></p>\\n<ul>\\n<li>CSS is written as a Javascript object</li>\\n<li>We wrap our component in a \\\"HOC\\\" (see below)</li>\\n<li>The HOC compiles the CSS <em>object</em> into <em>actual CSS</em> and injects it into the app (as <code class=\\\"language-text\\\">&lt;style&gt;&lt;/style&gt;</code> elements in the <code class=\\\"language-text\\\">&lt;head&gt;</code>)</li>\\n<li>The HOC also provides our component with a <code class=\\\"language-text\\\">classes</code> prop, which contains any class names we wrote in our CSS object earlier.</li>\\n<li>We then apply class names to our components using the <code class=\\\"language-text\\\">classes</code> object (kinda like <a href=\\\"https://github.com/css-modules/css-modules\\\">CSS modules</a>)</li>\\n</ul>\\n<p>Now that we have a component, let's actually figure out how to look at it.</p>\\n<h2>Setting up the dev environment</h2>\\n<p>The problem with developing React components is having a dev environment setup to make the process possible. You'll usually find yourself using a boilerplate like <strong>Create React App</strong>, or creating a <strong>custom Webpack config</strong> to compile the JS to a page. Instead of <em>bloating</em> our project down with all the Create React App dependencies, or going through the hassle of setting up Webpack just to look at components -- we use StorybookJS.</p>\\n<p><a href=\\\"http://storybook.js.org\\\"><strong>StorybookJS</strong></a> is a live development environment for your components. Spinning up StorybookJS locally launches a component library in your browser, with live component previews (and hot reloading if you save changes). By creating <em>\\\"stories\\\"</em>, we can browse through our components, and even create different states (like an active or disabled button). </p>\\n<blockquote>\\n<p><em>Ironically</em>, StorybookJS uses Create React App to run your application. It just downloads it on demand.</p>\\n</blockquote>\\n<h2>Creating stories</h2>\\n<p>Our Storybook config (<code class=\\\"language-text\\\">/.storybook/config.js</code>) looks through our <code class=\\\"language-text\\\">src/components/</code> folder and finds any files with the suffix <code class=\\\"language-text\\\">.story.js</code>. </p>\\n<p>We can create our first story by making a file in <code class=\\\"language-text\\\">src/components/Button/Button.story.js</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> storiesOf <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'@storybook/react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> action <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'@storybook/addon-actions'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> ThemeProvider <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-jss'</span>\\n<span class=\\\"token keyword\\\">import</span> theme <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"../../theme/theme\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> Button <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"./Button\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">storiesOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Button'</span><span class=\\\"token punctuation\\\">,</span> module<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'with text'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>ThemeProvider theme<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>theme<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>Button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token function\\\">action</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'clicked'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>Hello Button<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Button<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ThemeProvider<span class=\\\"token operator\\\">></span>\\n\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'with some emoji'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>ThemeProvider theme<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>theme<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>Button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token function\\\">action</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'clicked'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">&lt;</span>span role<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"img\\\"</span> aria<span class=\\\"token operator\\\">-</span>label<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"so cool\\\"</span><span class=\\\"token operator\\\">></span>😀 😎 👍 💯<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>span<span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Button<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ThemeProvider<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>   \\n</code></pre>\\n      </div>\\n<p>Storybook uses a function called <code class=\\\"language-text\\\">storiesOf</code> to create stories of your component. We chain <code class=\\\"language-text\\\">.add(description, component)</code> methods to it with the variations of our component.</p>\\n<p>The only special thing we do here is wrap our components in a <code class=\\\"language-text\\\">&lt;ThemeProvider&gt;</code> component. This comes from <code class=\\\"language-text\\\">react-jss</code>, and uses React's Context Provider system to pass the <code class=\\\"language-text\\\">theme</code> object down to our <code class=\\\"language-text\\\">&lt;Button&gt;</code>.  If we didn't wrap this, we couldn't use the <code class=\\\"language-text\\\">theme</code> variable in our components.</p>\\n<h2>Running your Storybook</h2>\\n<p>Starting up StorybookJS is as simple as <code class=\\\"language-text\\\">npm run storybook</code>. This will spin up a development server at <a href=\\\"http://localhost:9001/\\\">http://localhost:9001/</a>. Here you'll find the Storybook dashboard, and any stories you've created inside <code class=\\\"language-text\\\">src/components/</code>.</p>\\n<p>If you make any changes to your components and save while Storybook dev server is running, it'll re-build and reload with any changes.</p>\\n<h2>Simple as that!</h2>\\n<p>You'd be surprised by how easy it can be to start developing React components and deploying them as NPM packages. </p>\\n<p>At the end of the day, <strong>you only need to write React code</strong> and commit it to git. <strong>There's no need to setup crazy build processes</strong> like Webpack or Parcel, or even Babel really. Your components will be imported into other people's projects who will handle transpiling on their end. The simpler you keep your project, the better actually.</p>\\n<p>You can see my final <a href=\\\"https://github.com/whoisryosuke/jss-design-system\\\">JSS Design System boilerplate here</a>, and also look at the branches labeled 'starter'. Or check out the <a href=\\\"https://github.com/whoisryosuke/emotion-semantic-ui\\\">Emotion JS Design System boilerplate</a> for comparison.</p>\\n<p>In the next part of the tutorial I'll cover adding testing, linting, and automated component documentation!</p>\\n<p>If you want to add your design system to NPM, <a href=\\\"https://docs.npmjs.com/getting-started/publishing-npm-packages\\\">check out their guide here.</a></p>\\n<p>Rock on 🤘\\nRyo</p>\\n<p><strong>References</strong></p>\\n<ul>\\n<li><a href=\\\"https://github.com/cssinjs/react-jss\\\">react-jss</a></li>\\n<li><a href=\\\"https://storybook.js.org/basics/guide-react/\\\">Storybook for React</a></li>\\n<li><a href=\\\"https://github.com/oliviertassinari/a-journey-toward-better-style#results\\\">CSS in JS Performance 1</a></li>\\n<li><a href=\\\"https://medium.com/@tkh44/emotion-ad1c45c6d28b\\\">CSS in JS Performance 2</a></li>\\n<li><a href=\\\"https://github.com/hellofresh/css-in-js-perf-tests\\\">CSS in JS Performance 3</a></li>\\n<li><a href=\\\"http://cssinjs.org/performance/?v=v9.8.7\\\">CSS in JS Performance 4</a></li>\\n<li><a href=\\\"https://github.com/A-gambit/CSS-IN-JS-Benchmarks\\\">CSS in JS Performance 5</a></li>\\n<li><a href=\\\"https://github.com/mui-org/material-ui/issues/6115\\\">CSS in JS Performance 6 - Why Material UI chose JSS over Styled Components</a></li>\\n<li><a href=\\\"https://github.com/sumup/circuit-ui\\\">circuit-ui - Design system using Emotion</a></li>\\n<li><a href=\\\"https://www.youtube.com/watch?v=bLgZwFRYTJ4\\\">Video: Siddharth Kshetrapal - We Need To Talk About Our Frontend Workflow - ReactFest </a></li>\\n<li><a href=\\\"https://www.youtube.com/watch?v=iMunXpy2Ezo\\\">Video: Jon Gold - react-sketchapp: Design as a Function of Data</a></li>\\n<li><a href=\\\"http://bradfrost.github.io/style-guide-guide/\\\">Style Guide Guide</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Creating a Design System for ReactJS from Scratch\",\"cover_image\":{\"publicURL\":\"/static/Creating-a-Design-System-pt1-1920px-291941070c907aec0c7e0f57412d8b72.jpg\",\"childImageSharp\":{\"sizes\":{\"src\":\"/static/Creating-a-Design-System-pt1-1920px-291941070c907aec0c7e0f57412d8b72-4e8db.jpg\",\"srcSet\":\"/static/Creating-a-Design-System-pt1-1920px-291941070c907aec0c7e0f57412d8b72-7cc04.jpg 310w,\\n/static/Creating-a-Design-System-pt1-1920px-291941070c907aec0c7e0f57412d8b72-69042.jpg 620w,\\n/static/Creating-a-Design-System-pt1-1920px-291941070c907aec0c7e0f57412d8b72-4e8db.jpg 1240w,\\n/static/Creating-a-Design-System-pt1-1920px-291941070c907aec0c7e0f57412d8b72-50ab1.jpg 1860w,\\n/static/Creating-a-Design-System-pt1-1920px-291941070c907aec0c7e0f57412d8b72-5d231.jpg 1980w\"}}},\"date\":\"22 August, 2018\",\"tags\":[\"design\",\"design system\",\"react\",\"open source\",\"javascript\",\"tutorial\"]},\"fields\":{\"slug\":\"/blog/2018/creating-a-design-system-for-reactjs-from-scratch/\"}}}]}},\"pathContext\":{\"tag\":\"open source\",\"slug\":\"/blog/2018/how-to-create-a-php-package-for-composer/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-2018-how-to-create-a-php-package-for-composer.json\n// module id = 536\n// module chunks = 166497982688729"],"sourceRoot":""}