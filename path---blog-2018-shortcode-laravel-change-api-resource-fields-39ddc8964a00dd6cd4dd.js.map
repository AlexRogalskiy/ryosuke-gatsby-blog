{"version":3,"sources":["webpack:///path---blog-2018-shortcode-laravel-change-api-resource-fields-39ddc8964a00dd6cd4dd.js","webpack:///./.cache/json/blog-2018-shortcode-laravel-change-api-resource-fields.json"],"names":["webpackJsonp","579","module","exports","data","blog","html","frontmatter","title","cover_image","publicURL","childImageSharp","sizes","tracedSVG","src","srcSet","date","tags","section","fields","slug","relatedPosts","edges","node","pathContext","tag"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,KAAA,otKAAyzJC,aAA8kBC,MAAA,oEAAAC,aAA2FC,UAAA,uEAAAC,iBAAsGC,OAASC,UAAA,olDAAAC,IAAA,6EAAAC,OAAA,gaAA2lEC,KAAA,eAAAC,MAAA,yDAAAC,QAAA,QAAyGC,QAAWC,KAAA,6DAAmEC,cAAiBC,QAAUC,MAAQjB,KAAA;AAAww5CC,aAA0lEC,MAAA,8DAAAC,aAAqFC,UAAA,4GAAAC,iBAA2IC,OAASE,IAAA,kHAAAC,OAAA,ylBAAytBC,KAAA,kBAAAC,MAAA,4DAA6FE,QAAWC,KAAA,kEAAyEG,MAAQjB,KAAA;AAAogtCC,aAAs0FC,MAAA,qCAAAC,aAA4DC,UAAA,sFAAAC,iBAAqHC,OAASE,IAAA,4FAAAC,OAAA,2eAAqlBC,KAAA,kBAAAC,MAAA,kDAAmFE,QAAWC,KAAA,kDAAwDI,aAAgBC,IAAA,MAAAL,KAAA","file":"path---blog-2018-shortcode-laravel-change-api-resource-fields-39ddc8964a00dd6cd4dd.js","sourcesContent":["webpackJsonp([259844905416749],{\n\n/***/ 579:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"blog\":{\"html\":\"<p>Laravel makes forming data for an API response easier using API Resources, which take data (usually queried from Models), and return specific fields and structure you define. Resource Collections are what they sound like, they're collections of resources. Collections would be used for pages like an archive, where you have more than one item to display from your model.</p>\\n<p>The only issue you may encounter with Resource Collections is that they'll display all the item data, and won't allow you to exclude fields manually. Usually you don't need <em>every</em> field when you query an archive, just the vital info (title, slug, maybe tags) -- and let the user query the individual item for the rest of the fields.</p>\\n<p>This code snippet leverages the <code class=\\\"language-text\\\">transform()</code> method from Laravel's <a href=\\\"https://laravel.com/docs/5.6/collections\\\">Collection wrapper</a> (different from Resource Collections) to limit the response to set fields:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">PageResourceCollection</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">ResourceCollection</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">toArray</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$request</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>\\n            <span class=\\\"token single-quoted-string string\\\">'data'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">collection</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">transform</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$page</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>\\n                    <span class=\\\"token single-quoted-string string\\\">'id'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$page</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">id</span><span class=\\\"token punctuation\\\">,</span>\\n                    <span class=\\\"token single-quoted-string string\\\">'title'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$page</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">title</span><span class=\\\"token punctuation\\\">,</span>\\n                    <span class=\\\"token single-quoted-string string\\\">'slug'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$page</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">slug</span><span class=\\\"token punctuation\\\">,</span>\\n                <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<blockquote class=\\\"twitter-tweet\\\" data-lang=\\\"en\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">🔥 Change the fields in a <a href=\\\"https://twitter.com/hashtag/Laravel?src=hash&amp;ref_src=twsrc%5Etfw\\\">#Laravel</a> Collection <a href=\\\"https://twitter.com/hashtag/API?src=hash&amp;ref_src=twsrc%5Etfw\\\">#API</a> Resource using the transform method, since the collection may contain more fields than you want on an archive loop 👌 <a href=\\\"https://twitter.com/hashtag/PHP?src=hash&amp;ref_src=twsrc%5Etfw\\\">#PHP</a> <a href=\\\"https://twitter.com/laravelphp?ref_src=twsrc%5Etfw\\\">@laravelphp</a> <a href=\\\"https://t.co/3UH5vpsc58\\\">https://t.co/3UH5vpsc58</a> <a href=\\\"https://t.co/u2mr48lqUy\\\">pic.twitter.com/u2mr48lqUy</a></p>&mdash; Ryosuke (@whoisryosuke) <a href=\\\"https://twitter.com/whoisryosuke/status/1002002173906038784?ref_src=twsrc%5Etfw\\\">May 31, 2018</a></blockquote>\\n<p>Hope that helps,\\nRyo</p>\\n<hr>\\n<p><strong>References</strong></p>\\n<ul>\\n<li><a href=\\\"https://twitter.com/whoisryosuke/status/1002002173906038784\\\">Original tweet</a></li>\\n<li><a href=\\\"https://gist.github.com/whoisryosuke/97d6bb9e4f22c2ab02bd867b56a4f6c7\\\">See the code gist</a></li>\\n<li><a href=\\\"https://laravel.com/docs/5.6/eloquent-resources#concept-overview\\\">Laravel docs - Resource Collections</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"shortcode - Change fields in a Laravel API Resource via transform\",\"cover_image\":{\"publicURL\":\"/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac.jpg\",\"childImageSharp\":{\"sizes\":{\"tracedSVG\":\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='267' viewBox='0 0 400 267' version='1'%3E%3Cpath d='M0 134v133h10c11 0 14-1 14-6l1-1c1 0 3-5 3-9 0-2 0-3 2-3s2-1 2-4v-4h4l4-1h8l5-3 6-4c2 0 2-1 2-4v-4h6c4 0 5 0 5-2s1-2 4-2c4 0 7 2 7 3 0 3 4 5 8 5h5v-12h8v-8h16v-8h4c4 0 4 0 4-2 0-3 0-3 4-3l4-1c0-2 1-2 4-2l4-1c0-2 2-2 8-2 8 0 8 0 8-2 0-3 0-3 4-3 3 0 4 0 4 2l1 2 3-2 3-2 1-3c0-3 2-4 4-2l2 1c2 0 4-3 3-4l3-6 2 3 2 4v-9h8v4l1 4 1-4c0-3 0-4 2-4l1-4c0-3 0-4 2-4l1-1 4-1 8-2c3-2 4-2 4-1 0 2 1 2 4 2l4-1c0-2 1-2 4-2l4-1h2c2 2 2 2 3 0 2-1 2-2-1-3l-8-2-4-1h4l9-1 7-2c4 0 4 0 4-3s0-3 4-3 4 0 4-2c0-3 0-3 4-3l4-1 4-1h4v-4c0-5 0-5 3-4l4-1c2-2 3-4 1-3s-7-1-5-2c1-1 1-1-1-1-2 1-5-4-4-9l1-5c1-3 12-1 12 3h2l1-2 4-4-1 2v1l2-2h4c2-3 1-3-3-3l-4 1-1 1-1-1c0-3 10-3 12 0 1 1 1 1 2-1 1-1 1-1 1 1-1 2 0 3 2 3l2 3 2-1 4-3 4-2v3l2 4c0 2 0 2-1 1l-1-1 1 3v3l1 3 1-5c0-8 1-9 5-9h1c-3 0-2-3 1-2 2 0 2 0 1-1s-1-1 2-1 3 0 2 1l-2 1-1 1 2 1v1l1 2 1 1c0-3 2-2 2 1s0 3 1 1l1-4c1 0 1-1-1-1-1-1-1-1 1-1 3 0 3-2 0-3h-2l2-1 3 1h1l3 2h2l-1-2 3-3c1 1 2 2 2 5v5l1-4c0-4 0-4 1-2v4l1 1 1-2 2-3c1-1 1-1-1-1-2 1-2 0-2-1 0-2 0-2 1-1l4 1 4 1h-2l-1 1 3 1h1c0 2 4 1 5-1l1-2 1-1c0-2 1-2 4-2 4 0 4 0 4-2l1-3 1-4-1-4-1-1c0-2 1-2 4-2s4 0 4 2l4 1h4v93c0 81 1 75 1-40V0H0v134m263-36l-1 3v10c-1 1-1 1-2-2l-2-2h-3c-3-2-3-4-1-4v1l1 1h1v1l1-2v-1c3 1 3-1 1-2-3-1-10 2-10 5 0 2 0 2 1 1l1-1c1 1 2 3 4 3l3 3c-1 3-3 4-6 1l-3-2 1 2v3a1139 1139 0 0 1 9 0c2-1 2-1 2 1s2 0 2-3c1-2 1-2 1 0 0 5 2 3 3-3 0-6 1-8 4-8 2 1 2 1 2 5v8c2 5 4 5 3-1 0-3 0-3 1 0l1 1v-3l-1-5c1-5-2-7-7-7-3 1-4 1-3-1v-5c-1-1-2 0-3 3' fill='lightgray' fill-rule='evenodd'/%3E%3C/svg%3E\",\"src\":\"/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-4e8db.jpg\",\"srcSet\":\"/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-7cc04.jpg 310w,\\n/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-69042.jpg 620w,\\n/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-4e8db.jpg 1240w,\\n/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-50ab1.jpg 1860w,\\n/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-e738f.jpg 1920w\"}}},\"date\":\"30 May, 2018\",\"tags\":[\"laravel\",\"php\",\"api\",\"shortcode\",\"code snippet\",\"tips\"],\"section\":\"blog\"},\"fields\":{\"slug\":\"/blog/2018/shortcode-laravel-change-api-resource-fields/\"}},\"relatedPosts\":{\"edges\":[{\"node\":{\"html\":\"<p>Recently the Kushy API finally reached a beta release of v1, and I redesigned the Kushy API documentation to use GatsbyJS. The documentation itself was hand-written in Markdown, with a structure inspired by most API docs (endpoints with descriptions, code snippets, and response examples). </p>\\n<p>This got pretty tedious pretty quick, and immediately becomes an issue when any small updates occur to the API and require manual modification of a separate doc repo. It became time to auto-generate our docs from our codebase, and discovering the best way to accomplish that within the Laravel framework.</p>\\n<p>The options were fairly slim after some research: </p>\\n<ol>\\n<li>Use <strong>Swagger</strong>, an API specification, to document our code and output a Swagger JSON file.</li>\\n<li>Document our code using <strong>docblocks</strong>, and find a generator to scan the code and convert those to Markdown. </li>\\n</ol>\\n<h2>Say No to Swagger</h2>\\n<p>I'm not a fan of the Swagger implementation in PHP. Writing documentation looks <em>atrocious</em>, makes it more difficult to read, and adds excessive code to my production codebase. I'd rather write standard docblocks for PHP and use those as the basis for the API documentation.</p>\\n<h3>\\\"Screw You, I Prefer Swagger\\\"</h3>\\n<p>It's cool, I understand the ease of the Swagger specification. It was awesome being able to run a script and generating a JSON file I could import into other libraries/frameworks/generators. If you prefer using Swagger, I recommend using the <a href=\\\"https://github.com/InfyOmLabs/laravel-generator\\\">InfyOm Laravel Generator</a>. </p>\\n<p>You can generate your entire API with a fairly simple CLI. In a single <code class=\\\"language-text\\\">artisan</code> command, and a few answered questions, you have yourself a controller, model, migration, resource, validation, and testing for your API. It also can generate Swagger-approved documentation for the API controllers it creates with a simple change of the config.</p>\\n<h2>Easy to write docs</h2>\\n<p>Luckily there's a package that kind of accomplishes what we need - <a href=\\\"https://github.com/mpociot/laravel-apidoc-generator\\\">Laravel API Documentation Generator</a>. It scans your API endpoints and actually runs them to generate the documentation (automatically creating JSON response objects for your docs). It combines the PHP docblocks your write above the controller's classes/methods with request validation, JSON responses, and a table of contents.</p>\\n<p>If you're running Laravel 5.5+, just run this line to install the package:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">composer require mpociot/laravel-apidoc-generator\\n</code></pre>\\n      </div>\\n<p>And start generating docs using the Artisan CLI command:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">php artisan api:generate --routePrefix<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"api/*\\\"</span>\\n</code></pre>\\n      </div>\\n<p>There are plenty of benefits of using this package:</p>\\n<h3>Custom written content</h3>\\n<p>You're not limited to auto-generated docs, this package is also capable of appending other Markdown file's content. Great for writing additional docs for authentication.</p>\\n<h3>Authenticating API requests</h3>\\n<p>It even handles dirty processes, like authenticating API calls:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">php artisan api:generate --routePrefix<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"api/*\\\"</span> --actAsUserId<span class=\\\"token operator\\\">=</span>1\\n</code></pre>\\n      </div>\\n<h3>Postman</h3>\\n<p>This package also generates a JSON 'collection' file for <a href=\\\"https://www.getpostman.com/\\\">Postman</a>, an app for querying APIs. Handy if you're like me and you test your API with it. <a href=\\\"https://www.getpostman.com/docs/v6/postman/collections/creating_collections\\\">You can import the collection</a> and have a folder full of all your endpoints.</p>\\n<h3>Don't comment code? Don't worry!</h3>\\n<p>Since this package analyzed your entire route file and queries each route for data, it'll generate API docs for every single route -- even if it doesn't have documentation/docblocks/comments! The generator creates a  \\\"general\\\" section which contains all the endpoints you didn't group inside <em>\\\"resources\\\"</em>.</p>\\n<h2>Issues with Auto-generation</h2>\\n<p>From the beginning, I was trepidatious about integrating a documentation generator. There are several pitfalls with automation that lend to more work being done by devs, or worse, code getting refactored immensely for it.</p>\\n<h3>One giant markdown file</h3>\\n<p>Despite being able to separate things into \\\"Resources\\\" with the API generator, the generator creates one massive Markdown file. Each \\\"resource\\\" or API controller is separated into sections, but without separate files, it makes parsing with frameworks like GatsbyJS more difficult.</p>\\n<h3>No comment blocks? Inaccurate docs.</h3>\\n<p>The initial issue I encountered with docblock, and <em>even Swagger documentation</em>, was the need for a physical file with comments for each endpoint. </p>\\n<p>What if I use a base class to extend my API controllers? All my major endpoints (index, store, etc) are all stored in the base controller, and I only add a couple extra endpoints to the actual endpoint controller. </p>\\n<p>The base controller:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n\\n<span class=\\\"token keyword\\\">namespace</span> <span class=\\\"token package\\\">App<span class=\\\"token punctuation\\\">\\\\</span>Http<span class=\\\"token punctuation\\\">\\\\</span>Controllers</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Illuminate<span class=\\\"token punctuation\\\">\\\\</span>Http<span class=\\\"token punctuation\\\">\\\\</span>Request</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">App<span class=\\\"token punctuation\\\">\\\\</span>Http<span class=\\\"token punctuation\\\">\\\\</span>Controllers<span class=\\\"token punctuation\\\">\\\\</span>Controller</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ApiController</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Controller</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">/**\\n     * Display a listing of the resource.\\n     *\\n     * @return \\\\Illuminate\\\\Http\\\\Response\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">index</span><span class=\\\"token punctuation\\\">(</span>Request <span class=\\\"token variable\\\">$request</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// Does API stuff</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>The generator combines comments from the extended classes, using docblocks from the base class. The issue? We get generic comments for any endpoint extended off the base class unless we re-instate the method in the endpoint controller.</p>\\n<p>This leads to the repeated code, excess code, and limitations on innovation.</p>\\n<h2>Hand-written > Docblocks > Swagger</h2>\\n<p>Unless you API is setup for it, or you're working with an immense API that's constantly changing -- it's better to just write docs by hand. </p>\\n<p><strong>It's great to use a generator as a start,</strong> since it'll generate all the endpoints/request objects/etc. But for <em>long-term</em> maintenance, it seems like even the generators aren't completely automated - and require so much maintenance that it overrides it's usefulness.</p>\\n<p>However, if you are looking for a generator that <strong>isn't Swagger based</strong>, the <a href=\\\"https://github.com/mpociot/laravel-apidoc-generator\\\">laravel-apidoc-generator by mpociot</a> does a solid enough job of generating docs. And <strong>if you're cool with Swagger</strong>, the Laravel Generator by InfyOmLabs does a great job of creating everything you need for an API (controller, validation, models, migrations, tests, everything!).</p>\\n<h2>Making it work (for me)</h2>\\n<p>The primary issue I had was the generated format of the Markdown. It was a single massive file that was compatible with doc generators like Slate, but not my GatsbyJS setup. For my Gatsby docs, they're generated from a <code class=\\\"language-text\\\">docs</code> folder with sub-folder for each resource group (<code class=\\\"language-text\\\">docs/endpoint/</code>). Then we create a file for each route (<code class=\\\"language-text\\\">docs/posts/get-all-posts.md</code>).</p>\\n<h3>Using Javascript</h3>\\n<p>My first instinct was to write a NodeJS script to parse through the massive Markdown file and split it up into the chunks I needed. I used NodeJS to read the file contents, markdown-js to parse the MD into a walkable tree - then into HTML, and turndown to convert the HTML back to MD.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> markdown <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"markdown\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>markdown<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> TurndownService <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"turndown\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> turndownService <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">TurndownService</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Grab API markdown master file and dump file into variable</span>\\n<span class=\\\"token keyword\\\">let</span> docs <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'public/docs/source/index.md'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'utf8'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Parse the markdown into a JSONML tree </span>\\n<span class=\\\"token comment\\\">// (giant array with objects that contain MD data)</span>\\n<span class=\\\"token comment\\\">// [</span>\\n<span class=\\\"token comment\\\">//     {</span>\\n<span class=\\\"token comment\\\">//         'header',</span>\\n<span class=\\\"token comment\\\">//         {</span>\\n<span class=\\\"token comment\\\">//             level: 1</span>\\n<span class=\\\"token comment\\\">//         },</span>\\n<span class=\\\"token comment\\\">//         'The actual header content'</span>\\n<span class=\\\"token comment\\\">//     },</span>\\n<span class=\\\"token comment\\\">// ]</span>\\n<span class=\\\"token keyword\\\">var</span> tree <span class=\\\"token operator\\\">=</span> markdown<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>docs<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> separateDocs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Loop through tree to find headers</span>\\n<span class=\\\"token comment\\\">// Whenever header is found, insert last collection, </span>\\n<span class=\\\"token comment\\\">// and make new collection variable to insert ongoing data into</span>\\n<span class=\\\"token comment\\\">// Each collection should contain name (used for filename) and data</span>\\n<span class=\\\"token keyword\\\">var</span> collection <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\ntree<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>element<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>element<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'header'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>element<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>level <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// Put collection the main doc array</span>\\n            <span class=\\\"token comment\\\">// Then wipe it out and start fresh</span>\\n            separateDocs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>collection<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n            collection <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n                <span class=\\\"token string\\\">'markdown'</span>\\n            <span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    collection<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>element<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    i<span class=\\\"token operator\\\">++</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// console.log(separateDocs);</span>\\n\\n<span class=\\\"token comment\\\">// Convert from JSONML to HTML then to MD</span>\\n<span class=\\\"token comment\\\">// Then save the file</span>\\n<span class=\\\"token keyword\\\">var</span> convertedDocs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\nseparateDocs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">var</span> header\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'header'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        header <span class=\\\"token operator\\\">=</span> doc<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        header <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'index'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">var</span> html <span class=\\\"token operator\\\">=</span> markdown<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">renderJsonML</span><span class=\\\"token punctuation\\\">(</span>markdown<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toHTMLTree</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> convertedMarkdown <span class=\\\"token operator\\\">=</span> turndownService<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">turndown</span><span class=\\\"token punctuation\\\">(</span>html<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    convertedDocs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>convertedMarkdown<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFile</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`tmp/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>header<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">.md`</span></span><span class=\\\"token punctuation\\\">,</span> convertedMarkdown<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The file was saved!\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>You can run this script using the CLI: <code class=\\\"language-text\\\">node generate-api-docs.js</code></p>\\n<p>After a bit of tinkering, I discovered that I could accomplish what I needed, but the source material became degraded. The conversion from MD -> JSON -> HTML -> MD was causing formatting issues.</p>\\n<h3>Back to the source</h3>\\n<p>I realized that altering the final product wasn't the way to go, and it'd be easier just to edit the generator's output code. After snooping around the source code, I found the method I needed: <code class=\\\"language-text\\\">writeMarkdown()</code>. With a bit of altering, here's what I ended up with:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\">    <span class=\\\"token comment\\\">/**\\n     * @param  Collection $parsedRoutes\\n     *\\n     * @return void\\n     */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">writeMarkdown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$parsedRoutes</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token variable\\\">$outputPath</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'output'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token variable\\\">$infoText</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">view</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'apidoc::partials.info'</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'outputPath'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">ltrim</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">'public/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'showPostmanCollectionButton'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">!</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'noPostmanCollection'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token variable\\\">$parsedRouteOutput</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$parsedRoutes</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$routeGroup</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token variable\\\">$routeGroup</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'output'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>string<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token function\\\">view</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'apidoc::partials.route'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'parsedRoute'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token variable\\\">$documentarian</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Documentarian</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token variable\\\">$parsedRouteOutput</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">each</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$routeGroup</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">use</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$infoText</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token variable\\\">$routeGroup</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">each</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">use</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$infoText</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">// dd($route);</span>\\n\\n                <span class=\\\"token comment\\\">// $cleanResource = preg_replace('/\\\\s+/', '', $route['resource']);</span>\\n                <span class=\\\"token variable\\\">$routeUrl</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">str_replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'api/v1/'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">''</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'uri'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$safeUrl</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">str_replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'/'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">'-'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$routeUrl</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$safeUrl</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">str_replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'{'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">''</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$safeUrl</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$safeUrl</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">str_replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'}'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">''</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$safeUrl</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$cleanResource</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">explode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'\\\\n'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'resource'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$cleanResource</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$cleanResource</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token comment\\\">// $cleanResource = trim(preg_replace('/\\\\s+/', ' ', $route['resource']));</span>\\n                <span class=\\\"token variable\\\">$title</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">strtolower</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'methods'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">.</span> <span class=\\\"token single-quoted-string string\\\">'-'</span> <span class=\\\"token punctuation\\\">.</span> <span class=\\\"token variable\\\">$safeUrl</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token variable\\\">$folder</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">DIRECTORY_SEPARATOR</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token single-quoted-string string\\\">'dist'</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">DIRECTORY_SEPARATOR</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">strtolower</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$cleanResource</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">createFolder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$folder</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$targetFile</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$folder</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">DIRECTORY_SEPARATOR</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token variable\\\">$title</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token single-quoted-string string\\\">'.md'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token variable\\\">$frontmatter</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">view</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'apidoc::partials.frontmatter'</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'method'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'methods'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'route'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$routeUrl</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'title'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'title'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'date'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'Y-m-d'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token variable\\\">$markdown</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">view</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'apidoc::singledoc'</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'writeCompareFile'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'frontmatter'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$frontmatter</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'infoText'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$infoText</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'outputPath'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'output'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'showPostmanCollectionButton'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">!</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'noPostmanCollection'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'route'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'group'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$cleanResource</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token comment\\\">// Write output file</span>\\n                <span class=\\\"token function\\\">file_put_contents</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$targetFile</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$markdown</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'Wrote '</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token variable\\\">$title</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token single-quoted-string string\\\">' to: '</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'noPostmanCollection'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!==</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'Generating Postman collection'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n            <span class=\\\"token function\\\">file_put_contents</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">DIRECTORY_SEPARATOR</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token single-quoted-string string\\\">'collection.json'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">generatePostmanCollection</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$parsedRoutes</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Make sure to add this helper method to the <code class=\\\"language-text\\\">GenerateDocumentation</code> class (I threw it on the bottom):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\">    <span class=\\\"token comment\\\">/**\\n     * Create folder if none exists\\n     *\\n     * @param string $folder\\n     * @return void\\n     */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">createFolder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$folder</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">file_exists</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$folder</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">mkdir</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$folder</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0777</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>And here's the view file <code class=\\\"language-text\\\">singledoc.blade.php</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-blade\\\"><code class=\\\"language-blade\\\">---\\n{!! $frontmatter !!}\\n---\\n\\n@if($group)\\n# {{$group}}\\n@endif\\n@if($writeCompareFile === true)\\n{!! $route[&#39;output&#39;]!!}\\n@else\\n{!! isset($route[&#39;modified_output&#39;]) ? $route[&#39;modified_output&#39;] : $route[&#39;output&#39;]!!}\\n@endif</code></pre>\\n      </div>\\n<ol>\\n<li>We loop through the <code class=\\\"language-text\\\">$routeGroupsOutput</code>, which is a collection of routes sorted by group name. </li>\\n<li>Then we loop through each group to get the routes for each resource (each section labeled <code class=\\\"language-text\\\">@Resource</code> in your docblocks). </li>\\n<li>We fill a view file with our route data, and then save the view to a Markdown file (using <code class=\\\"language-text\\\">file_put_contents()</code>).</li>\\n</ol>\\n<blockquote>\\n<p>I removed the compare functionality temporarily. Usually this package creates two Markdown files and compares for differences on generation, but I haven't tried getting it to work with the new setup.</p>\\n</blockquote>\\n<h3>Results</h3>\\n<p>After editing the package a bit, I was able to accomplish what I needed, and create - at the very least - a basis for my API docs. Ideally, if I work out the kinks, this could work as an automated solution to generate docs on the fly.But hey, we'll see how well that works in practice. Things always work different when pushed past thought and into motion.</p>\\n<p><strong>The kinks so far</strong>:</p>\\n<ul>\\n<li>Local development URL shows in queried JSON results</li>\\n<li>Can't authenticate requests using User ID. Not sure if it's because I use UUIDs or my middleware setup.</li>\\n<li>Getting rid of HTML comparison comments</li>\\n<li>Delete <code class=\\\"language-text\\\">public/docs/</code> folder and make sure it doesn't generate</li>\\n<li>Installing the forked package (or creating a new package to <code class=\\\"language-text\\\">composer install</code>)</li>\\n</ul>\\n<p>You can find <a href=\\\"https://github.com/whoisryosuke/laravel-apidoc-generator\\\">my fork of the Laravel API Doc Generator here</a>.</p>\\n<p>Hope this helped with your API automation search! 🍻\\nRyo</p>\\n<hr>\\n<p><strong>References</strong>:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/mpociot/laravel-apidoc-generator\\\">laravel-apidoc-generator</a></li>\\n<li><a href=\\\"https://github.com/InfyOmLabs/laravel-generator\\\">InfyOmLabs Laravel Generator</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"2 ways to auto-generate documentation for Laravel APIs 📄⚙️\",\"cover_image\":{\"publicURL\":\"/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51.jpg\",\"childImageSharp\":{\"sizes\":{\"src\":\"/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-4e8db.jpg\",\"srcSet\":\"/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-7cc04.jpg 310w,\\n/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-69042.jpg 620w,\\n/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-4e8db.jpg 1240w,\\n/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-50ab1.jpg 1860w,\\n/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-e738f.jpg 1920w\"}}},\"date\":\"06 August, 2018\",\"tags\":[\"laravel\",\"api\",\"documentation\",\"workflow\",\"guide\",\"tips\"]},\"fields\":{\"slug\":\"/blog/2018/adding-auto-generated-docs-to-laravel-api-kushy/\"}}},{\"node\":{\"html\":\"<p>Lately I've been trying my best to get into TDD, test-driven development, which is a style of programming where you build tests alongside your code. I picked <a href=\\\"http://laravel.com\\\">Laravel</a> a while ago as my primary PHP framework for a lot of projects because of how easy it makes testing. Laravel makes it simple -- from making a test (<code class=\\\"language-text\\\">php artisan make:test YourTest</code>), to the easy to use API they provide for interfacing with PHPUnit (<code class=\\\"language-text\\\">$this-&gt;assertStatus(404)</code>).</p>\\n<p>Laravel does a great job of documenting their framework, and <a href=\\\"https://laravel.com/docs/master/testing\\\">the official docs</a> are usually more up to date than most code bases and tutorials I scoured the net to find. However, the testing docs are also incredibly simplified, and missing crucial steps (like how to run a test). It left me wondering if there was something I was missing.</p>\\n<p>After a bit of tinkering around, here's what I discovered.</p>\\n<h2>Testing JSON APIs</h2>\\n<p>The most recent version of Laravel has <a href=\\\"https://laravel.com/docs/5.6/http-tests#testing-json-apis\\\">special testing methods for JSON APIs.</a> It allows us to query Laravel's internal API directly and easily make assertions on the response.</p>\\n<h2>Writing your first test</h2>\\n<p>Let's make the test first. Use the following <code class=\\\"language-text\\\">artisan</code> command:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">php artisan make: <span class=\\\"token function\\\">test</span> ShopTest\\n</code></pre>\\n      </div>\\n<p>Now you can open up your first test file located in <code class=\\\"language-text\\\">tests/Feature/ShopTest.php</code> and add a JSON API call:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n\\n<span class=\\\"token keyword\\\">namespace</span> <span class=\\\"token package\\\">Tests<span class=\\\"token punctuation\\\">\\\\</span>Feature</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Tests<span class=\\\"token punctuation\\\">\\\\</span>TestCase</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Illuminate<span class=\\\"token punctuation\\\">\\\\</span>Foundation<span class=\\\"token punctuation\\\">\\\\</span>Testing<span class=\\\"token punctuation\\\">\\\\</span>WithFaker</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Illuminate<span class=\\\"token punctuation\\\">\\\\</span>Foundation<span class=\\\"token punctuation\\\">\\\\</span>Testing<span class=\\\"token punctuation\\\">\\\\</span>RefreshDatabase</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ShopTest</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">TestCase</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">/**\\n     * Tests shop index without params to see if it works\\n     *\\n     * @return void\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">testShopIndex</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token variable\\\">$response</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'GET'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">'/api/v1/shops'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token variable\\\">$response</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">assertStatus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">201</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>How it works</h3>\\n<p>We first query the API using the <code class=\\\"language-text\\\">json()</code> method which returns a response from the API. Then we check the response and <strong>assert</strong> certain things, like the status code (<code class=\\\"language-text\\\">assertStatus()</code>), or data itself (<code class=\\\"language-text\\\">assertJson</code>).</p>\\n<h3>Debugging tests</h3>\\n<p>If at any point the test fails, and you're not sure why, just do a <code class=\\\"language-text\\\">dd($response)</code> to dump the response into the console. You can also use commands like <code class=\\\"language-text\\\">var_dump($variable)</code> to print out text in the console during tests. It helps verify when a method returns a boolean (like deleting a resource) or verifying properties exist on a resource (e.g. <code class=\\\"language-text\\\">$post-&gt;id</code>). Be wary of using <code class=\\\"language-text\\\">var_dump()</code> for larger variables (like the response object) - it tends to crash and freeze tests.</p>\\n<blockquote>\\n<p>Be careful when asserting data with duplicate property names, even if they're nested (e.g. <code class=\\\"language-text\\\">{ id: 1, comment { id: 129 } }</code>). assertJson will collapse the array and assume you mean both IDs. In this case, you have to use assertExactJson to check duplicate property names.</p>\\n</blockquote>\\n<h2>Running the tests</h2>\\n<p>Laravel doesn't actually write this anywhere in their docs, and you'd assume that you can run a test with something like <code class=\\\"language-text\\\">php artisan test</code> -- but you actually have to use the PHPUnit library in your composer dependencies:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">./vendor/bin/phpunit\\n</code></pre>\\n      </div>\\n<p>Run that command from the project root and PHPUnit will run all tests located in your <code class=\\\"language-text\\\">/tests/</code> folder. </p>\\n<blockquote>\\n<p>Make sure all composer dependencies are installed or you won't be able to run this script. And if you're running Laravel inside of Docker, make sure to run PHPUnit inside the container <code class=\\\"language-text\\\">docker-compose exec workspace ./vendor/bin/phpunit</code></p>\\n</blockquote>\\n<h3>Running a single test</h3>\\n<p>Sometimes you need to run a single test in isolation. I had to look this one up too:</p>\\n<p><code class=\\\"language-text\\\">./vendor/bin/phpunit --filter TestControllerName</code></p>\\n<p>This also works as well, albeit more verbose:</p>\\n<p><code class=\\\"language-text\\\">./vendor/bin/phpunit  tests/Feature/TestControllerName.php</code></p>\\n<h2>Keep it simple silly</h2>\\n<p>I found that with basic Laravel APIs, you tend to repeat the same tests over and over again. Wouldn't it be nice if an API test looked like one of our Models, and was as simple as writing an extended class with protected variables?:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n<span class=\\\"token keyword\\\">namespace</span> <span class=\\\"token package\\\">Tests<span class=\\\"token punctuation\\\">\\\\</span>Feature<span class=\\\"token punctuation\\\">\\\\</span>Controllers</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Tests<span class=\\\"token punctuation\\\">\\\\</span>CrudTest</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Illuminate<span class=\\\"token punctuation\\\">\\\\</span>Foundation<span class=\\\"token punctuation\\\">\\\\</span>Testing<span class=\\\"token punctuation\\\">\\\\</span>WithFaker</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Illuminate<span class=\\\"token punctuation\\\">\\\\</span>Foundation<span class=\\\"token punctuation\\\">\\\\</span>Testing<span class=\\\"token punctuation\\\">\\\\</span>RefreshDatabase</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StrainsControllerTest</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">CrudTest</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">/**\\n     * The model to use when creating dummy data\\n     *\\n     * @var class\\n     */</span>\\n    <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token variable\\\">$model</span> <span class=\\\"token operator\\\">=</span> \\\\<span class=\\\"token package\\\">KushyApi<span class=\\\"token punctuation\\\">\\\\</span>Posts</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token keyword\\\">class</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">/**\\n     * The endpoint to query in the API\\n     * e.g = /api/v1/&lt;endpoint>\\n     *\\n     * @var string\\n     */</span>\\n    <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token variable\\\">$endpoint</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token single-quoted-string string\\\">'strains'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">/**\\n     * Any additional \\\"states\\\" to add to factory\\n     *\\n     * @var string\\n     */</span>\\n    <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token variable\\\">$states</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token single-quoted-string string\\\">'strains'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">/**\\n     * Extra data to pass to POST endpoint \\n     * aka the (store() method)\\n     * \\n     * Must be array (ends up merged with another)\\n     *\\n     * @var array\\n     */</span>\\n    <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token variable\\\">$store</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token single-quoted-string string\\\">'category'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token single-quoted-string string\\\">'1'</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>With the power of abstract classes in OOP, we can create a kind of <em>base</em> class to <em>extend</em> the functionality of our specific endpoint's test class. Let's create a new test called <code class=\\\"language-text\\\">tests/CrudTest.php</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n<span class=\\\"token keyword\\\">namespace</span> <span class=\\\"token package\\\">Tests</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Tests<span class=\\\"token punctuation\\\">\\\\</span>TestCase</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Tests<span class=\\\"token punctuation\\\">\\\\</span>Traits<span class=\\\"token punctuation\\\">\\\\</span>AttachJwtToken</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Illuminate<span class=\\\"token punctuation\\\">\\\\</span>Foundation<span class=\\\"token punctuation\\\">\\\\</span>Testing<span class=\\\"token punctuation\\\">\\\\</span>WithFaker</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Illuminate<span class=\\\"token punctuation\\\">\\\\</span>Foundation<span class=\\\"token punctuation\\\">\\\\</span>Testing<span class=\\\"token punctuation\\\">\\\\</span>RefreshDatabase</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">CrudTest</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">TestCase</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">AttachJwtToken</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">/**\\n     * Uses the model factory to generate a fake entry\\n     *\\n     * @return class\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">createPost</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">states</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">factory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">model</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">states</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">states</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        \\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">factory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">model</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">/**\\n     * GET /endpoint/\\n     * Should return 201 with data array\\n     *\\n     * @return void\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">testIndex</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token variable\\\">$response</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'GET'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token double-quoted-string string\\\">\\\"api/v1/<span class=\\\"token interpolation\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">endpoint</span><span class=\\\"token punctuation\\\">}</span></span>\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token variable\\\">$response</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">assertStatus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">201</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">assertJson</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n                <span class=\\\"token single-quoted-string string\\\">'data'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token boolean\\\">true</span>\\n            <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">/**\\n     * GET /endpoint/&lt;id>\\n     * Should return 201 with data array\\n     *\\n     * @return void\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">testShow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// Create a test shop with filled out fields</span>\\n        <span class=\\\"token variable\\\">$activity</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">createPost</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// Check the API for the new entry</span>\\n        <span class=\\\"token variable\\\">$response</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'GET'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token double-quoted-string string\\\">\\\"api/v1/<span class=\\\"token interpolation\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">endpoint</span><span class=\\\"token punctuation\\\">}</span></span>/<span class=\\\"token interpolation\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$activity</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">id</span><span class=\\\"token punctuation\\\">}</span></span>\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// Delete the test shop</span>\\n        <span class=\\\"token variable\\\">$activity</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">delete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token variable\\\">$response</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">assertStatus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">201</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">assertJson</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n                <span class=\\\"token single-quoted-string string\\\">'data'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token boolean\\\">true</span>\\n            <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">/**\\n     * POST /endpoint/\\n     *\\n     * @return void\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">testStore</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token variable\\\">$activity</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">createPost</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token variable\\\">$activity</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$activity</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">toArray</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">/**\\n         * Pass in any extra data\\n         */</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">store</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token variable\\\">$activity</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">array_merge</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$activity</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">store</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token variable\\\">$response</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'POST'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token double-quoted-string string\\\">\\\"api/v1/<span class=\\\"token interpolation\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">endpoint</span><span class=\\\"token punctuation\\\">}</span></span>/\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$activity</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">model</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">destroy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$activity</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'id'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token variable\\\">$response</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">assertStatus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">201</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">assertJson</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n                <span class=\\\"token single-quoted-string string\\\">'data'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token boolean\\\">true</span>\\n            <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n    <span class=\\\"token comment\\\">/**\\n     * DELETE /endpoint/&lt;id>\\n     * Tests the destroy() method that deletes the shop\\n     *\\n     * @return void\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">testDestroy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token variable\\\">$activity</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">createPost</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token variable\\\">$response</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'DELETE'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token double-quoted-string string\\\">\\\"api/v1/<span class=\\\"token interpolation\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">endpoint</span><span class=\\\"token punctuation\\\">}</span></span>/<span class=\\\"token interpolation\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$activity</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">id</span><span class=\\\"token punctuation\\\">}</span></span>\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token variable\\\">$response</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">assertStatus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>This class tests the index, show, store, and destroy methods that come in the basic API controllers that artisan generates for you. And it does it dynamically, using the variables you define in your endpoint's test class.</p>\\n<h3>Testing with Factories</h3>\\n<p>This requires that you have a <strong>Factory</strong> for your class, so the <code class=\\\"language-text\\\">createPost()</code> method can generate fake data to test. Factories use the <a href=\\\"https://github.com/fzaninotto/Faker\\\">Faker library</a> to generate fake data for a specific model, whether you need it for tasks seeding or testing. Say you need to create 50 users - a factory will generate random (and even unique) names, passwords, and emails for all 50.</p>\\n<p>Creating factories are very simple, <a href=\\\"https://laravel.com/docs/5.6/database-testing#generating-factories\\\">check out the Laravel docs.</a> Here's an example of one with a few different types of fields (images, location data, etc):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">php artisan make:factory YourModelNameFactory\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Faker<span class=\\\"token punctuation\\\">\\\\</span>Generator</span> <span class=\\\"token keyword\\\">as</span> Faker<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token variable\\\">$factory</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">define</span><span class=\\\"token punctuation\\\">(</span>YourAppName\\\\<span class=\\\"token package\\\">YourModelName</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token keyword\\\">class</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>Faker <span class=\\\"token variable\\\">$faker</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token single-quoted-string string\\\">'id'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">uuid</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'name'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">name</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'slug'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">slug</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'featured_img'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">imageUrl</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">640</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">480</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'avatar'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">imageUrl</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">48</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">48</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'description'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">paragraph</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'latitude'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">latitude</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">90</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">90</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'longitude'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">longitude</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">180</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">180</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'address'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">streetAddress</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'city'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">city</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'state'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">state</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'postal_code'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">postcode</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'country'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">country</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'rating'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">numberBetween</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'featured'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">numberBetween</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'verified'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">numberBetween</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token variable\\\">$factory</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">state</span><span class=\\\"token punctuation\\\">(</span>YourAppName\\\\<span class=\\\"token package\\\">YourModelName</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token keyword\\\">class</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">'product'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token single-quoted-string string\\\">'category'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token single-quoted-string string\\\">'Product'</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<blockquote>\\n<p>Use <em>states</em> to add extra data or modify existing params in your fake Model entry. <code class=\\\"language-text\\\">factory(YourModelName::class)-&gt;state(&#39;product&#39;);</code>Works great if you need to have control over a model's specific parameter(s), like setting a user as an admin or customer. In this case, we set the post's category.</p>\\n</blockquote>\\n<h2>Handling JWT</h2>\\n<p>If you noticed, I have a trait on the abstract class called <code class=\\\"language-text\\\">AttachJwtToken</code>. I use Laravel's Passport package and connect to the API using OAuth2 authentication. Because of this, all JSON requests in tests require the proper authorization headers (with a JWT for the user).</p>\\n<p>The <code class=\\\"language-text\\\">AttachJwtToken</code> trait handles this process for us. I found this originally <a href=\\\"https://gist.github.com/jgrossi/4b1364e20418eca3ca937e70550c1823\\\">on Github by @jgrossi</a> and based my code off it. It checks for an existing user (which you can pass in using the <code class=\\\"language-text\\\">loginAs</code> method), and if no user is found, creates one, and returns a JWT for the user (using Laravel Passport's built in <code class=\\\"language-text\\\">createToken()</code> function)</p>\\n<p><a href=\\\"https://gist.github.com/whoisryosuke/2ee866ba6c32af5b4614ac6136a0012a\\\">Check out my full source code on Gist</a></p>\\n<h2>It's that simple!</h2>\\n<p>It really is this <strong>simple</strong> to test your API <em>(if it's a simple CRUD API).</em> </p>\\n<p>The hardest part of researching testing was feeling secure in the amount of information I'd accrued. At the end of the day, when you look at the source code, there are only so many testing methods Laravel/PHPUnit provides. You assert one thing or another, whether it's the status code or JSON itself, or mock users using the <code class=\\\"language-text\\\">actingAs($user)</code>.</p>\\n<p>What becomes <strong>more complex</strong> are tasks like replicating features that span across multiple controllers, jobs, services, etc -- or mocking functionality like image storage. Or just creating factories for all your models. </p>\\n<p>Testing is easy, setting up the proper conditions becomes the true <em>test</em>.</p>\\n<p>Hope this helps your API TDD 🤘\\nRyo</p>\\n<hr>\\n<p><strong>References</strong>:</p>\\n<ul>\\n<li><a href=\\\"https://gist.github.com/whoisryosuke/2ee866ba6c32af5b4614ac6136a0012a\\\">Attach JWT Token to Test snippet</a></li>\\n<li><a href=\\\"https://laravel.com/docs/5.6/http-tests#testing-json-apis\\\">Laravel Docs - Testing JSON APIs</a></li>\\n<li><a href=\\\"https://github.com/fzaninotto/Faker#fakerprovideruuid\\\">Faker docs</a></li>\\n<li><a href=\\\"https://course.testdrivenlaravel.com/\\\">Test Driven Laravel course (paid with free samples via email)</a></li>\\n<li><a href=\\\"https://dev.to/lechatthecat/how-to-use-phpunit-for-laravel-3d3c\\\">Using PHPUnit for Laravel Testing</a></li>\\n<li><a href=\\\"https://dev.to/fatboyxpc/laravel-testing-woes-token-mismatch-28pd\\\">Laravel Testing Woes: Token Mismatch</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Adding testing to a Laravel API 📝\",\"cover_image\":{\"publicURL\":\"/static/Adding-testing-to-a-Laravel-API-1920px-1e020cc22000c4bc9fc2a2eded8878f5.jpg\",\"childImageSharp\":{\"sizes\":{\"src\":\"/static/Adding-testing-to-a-Laravel-API-1920px-1e020cc22000c4bc9fc2a2eded8878f5-4e8db.jpg\",\"srcSet\":\"/static/Adding-testing-to-a-Laravel-API-1920px-1e020cc22000c4bc9fc2a2eded8878f5-7cc04.jpg 310w,\\n/static/Adding-testing-to-a-Laravel-API-1920px-1e020cc22000c4bc9fc2a2eded8878f5-69042.jpg 620w,\\n/static/Adding-testing-to-a-Laravel-API-1920px-1e020cc22000c4bc9fc2a2eded8878f5-4e8db.jpg 1240w,\\n/static/Adding-testing-to-a-Laravel-API-1920px-1e020cc22000c4bc9fc2a2eded8878f5-50ab1.jpg 1860w,\\n/static/Adding-testing-to-a-Laravel-API-1920px-1e020cc22000c4bc9fc2a2eded8878f5-e738f.jpg 1920w\"}}},\"date\":\"03 August, 2018\",\"tags\":[\"laravel\",\"tdd\",\"testing\",\"api\",\"php\",\"phpunit\"]},\"fields\":{\"slug\":\"/blog/2018/adding-testing-to-laravel-api/\"}}}]}},\"pathContext\":{\"tag\":\"api\",\"slug\":\"/blog/2018/shortcode-laravel-change-api-resource-fields/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-2018-shortcode-laravel-change-api-resource-fields-39ddc8964a00dd6cd4dd.js","module.exports = {\"data\":{\"blog\":{\"html\":\"<p>Laravel makes forming data for an API response easier using API Resources, which take data (usually queried from Models), and return specific fields and structure you define. Resource Collections are what they sound like, they're collections of resources. Collections would be used for pages like an archive, where you have more than one item to display from your model.</p>\\n<p>The only issue you may encounter with Resource Collections is that they'll display all the item data, and won't allow you to exclude fields manually. Usually you don't need <em>every</em> field when you query an archive, just the vital info (title, slug, maybe tags) -- and let the user query the individual item for the rest of the fields.</p>\\n<p>This code snippet leverages the <code class=\\\"language-text\\\">transform()</code> method from Laravel's <a href=\\\"https://laravel.com/docs/5.6/collections\\\">Collection wrapper</a> (different from Resource Collections) to limit the response to set fields:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">PageResourceCollection</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">ResourceCollection</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">toArray</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$request</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>\\n            <span class=\\\"token single-quoted-string string\\\">'data'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">collection</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">transform</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$page</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>\\n                    <span class=\\\"token single-quoted-string string\\\">'id'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$page</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">id</span><span class=\\\"token punctuation\\\">,</span>\\n                    <span class=\\\"token single-quoted-string string\\\">'title'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$page</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">title</span><span class=\\\"token punctuation\\\">,</span>\\n                    <span class=\\\"token single-quoted-string string\\\">'slug'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$page</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">slug</span><span class=\\\"token punctuation\\\">,</span>\\n                <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<blockquote class=\\\"twitter-tweet\\\" data-lang=\\\"en\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">🔥 Change the fields in a <a href=\\\"https://twitter.com/hashtag/Laravel?src=hash&amp;ref_src=twsrc%5Etfw\\\">#Laravel</a> Collection <a href=\\\"https://twitter.com/hashtag/API?src=hash&amp;ref_src=twsrc%5Etfw\\\">#API</a> Resource using the transform method, since the collection may contain more fields than you want on an archive loop 👌 <a href=\\\"https://twitter.com/hashtag/PHP?src=hash&amp;ref_src=twsrc%5Etfw\\\">#PHP</a> <a href=\\\"https://twitter.com/laravelphp?ref_src=twsrc%5Etfw\\\">@laravelphp</a> <a href=\\\"https://t.co/3UH5vpsc58\\\">https://t.co/3UH5vpsc58</a> <a href=\\\"https://t.co/u2mr48lqUy\\\">pic.twitter.com/u2mr48lqUy</a></p>&mdash; Ryosuke (@whoisryosuke) <a href=\\\"https://twitter.com/whoisryosuke/status/1002002173906038784?ref_src=twsrc%5Etfw\\\">May 31, 2018</a></blockquote>\\n<p>Hope that helps,\\nRyo</p>\\n<hr>\\n<p><strong>References</strong></p>\\n<ul>\\n<li><a href=\\\"https://twitter.com/whoisryosuke/status/1002002173906038784\\\">Original tweet</a></li>\\n<li><a href=\\\"https://gist.github.com/whoisryosuke/97d6bb9e4f22c2ab02bd867b56a4f6c7\\\">See the code gist</a></li>\\n<li><a href=\\\"https://laravel.com/docs/5.6/eloquent-resources#concept-overview\\\">Laravel docs - Resource Collections</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"shortcode - Change fields in a Laravel API Resource via transform\",\"cover_image\":{\"publicURL\":\"/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac.jpg\",\"childImageSharp\":{\"sizes\":{\"tracedSVG\":\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='267' viewBox='0 0 400 267' version='1'%3E%3Cpath d='M0 134v133h10c11 0 14-1 14-6l1-1c1 0 3-5 3-9 0-2 0-3 2-3s2-1 2-4v-4h4l4-1h8l5-3 6-4c2 0 2-1 2-4v-4h6c4 0 5 0 5-2s1-2 4-2c4 0 7 2 7 3 0 3 4 5 8 5h5v-12h8v-8h16v-8h4c4 0 4 0 4-2 0-3 0-3 4-3l4-1c0-2 1-2 4-2l4-1c0-2 2-2 8-2 8 0 8 0 8-2 0-3 0-3 4-3 3 0 4 0 4 2l1 2 3-2 3-2 1-3c0-3 2-4 4-2l2 1c2 0 4-3 3-4l3-6 2 3 2 4v-9h8v4l1 4 1-4c0-3 0-4 2-4l1-4c0-3 0-4 2-4l1-1 4-1 8-2c3-2 4-2 4-1 0 2 1 2 4 2l4-1c0-2 1-2 4-2l4-1h2c2 2 2 2 3 0 2-1 2-2-1-3l-8-2-4-1h4l9-1 7-2c4 0 4 0 4-3s0-3 4-3 4 0 4-2c0-3 0-3 4-3l4-1 4-1h4v-4c0-5 0-5 3-4l4-1c2-2 3-4 1-3s-7-1-5-2c1-1 1-1-1-1-2 1-5-4-4-9l1-5c1-3 12-1 12 3h2l1-2 4-4-1 2v1l2-2h4c2-3 1-3-3-3l-4 1-1 1-1-1c0-3 10-3 12 0 1 1 1 1 2-1 1-1 1-1 1 1-1 2 0 3 2 3l2 3 2-1 4-3 4-2v3l2 4c0 2 0 2-1 1l-1-1 1 3v3l1 3 1-5c0-8 1-9 5-9h1c-3 0-2-3 1-2 2 0 2 0 1-1s-1-1 2-1 3 0 2 1l-2 1-1 1 2 1v1l1 2 1 1c0-3 2-2 2 1s0 3 1 1l1-4c1 0 1-1-1-1-1-1-1-1 1-1 3 0 3-2 0-3h-2l2-1 3 1h1l3 2h2l-1-2 3-3c1 1 2 2 2 5v5l1-4c0-4 0-4 1-2v4l1 1 1-2 2-3c1-1 1-1-1-1-2 1-2 0-2-1 0-2 0-2 1-1l4 1 4 1h-2l-1 1 3 1h1c0 2 4 1 5-1l1-2 1-1c0-2 1-2 4-2 4 0 4 0 4-2l1-3 1-4-1-4-1-1c0-2 1-2 4-2s4 0 4 2l4 1h4v93c0 81 1 75 1-40V0H0v134m263-36l-1 3v10c-1 1-1 1-2-2l-2-2h-3c-3-2-3-4-1-4v1l1 1h1v1l1-2v-1c3 1 3-1 1-2-3-1-10 2-10 5 0 2 0 2 1 1l1-1c1 1 2 3 4 3l3 3c-1 3-3 4-6 1l-3-2 1 2v3a1139 1139 0 0 1 9 0c2-1 2-1 2 1s2 0 2-3c1-2 1-2 1 0 0 5 2 3 3-3 0-6 1-8 4-8 2 1 2 1 2 5v8c2 5 4 5 3-1 0-3 0-3 1 0l1 1v-3l-1-5c1-5-2-7-7-7-3 1-4 1-3-1v-5c-1-1-2 0-3 3' fill='lightgray' fill-rule='evenodd'/%3E%3C/svg%3E\",\"src\":\"/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-4e8db.jpg\",\"srcSet\":\"/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-7cc04.jpg 310w,\\n/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-69042.jpg 620w,\\n/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-4e8db.jpg 1240w,\\n/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-50ab1.jpg 1860w,\\n/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-e738f.jpg 1920w\"}}},\"date\":\"30 May, 2018\",\"tags\":[\"laravel\",\"php\",\"api\",\"shortcode\",\"code snippet\",\"tips\"],\"section\":\"blog\"},\"fields\":{\"slug\":\"/blog/2018/shortcode-laravel-change-api-resource-fields/\"}},\"relatedPosts\":{\"edges\":[{\"node\":{\"html\":\"<p>Recently the Kushy API finally reached a beta release of v1, and I redesigned the Kushy API documentation to use GatsbyJS. The documentation itself was hand-written in Markdown, with a structure inspired by most API docs (endpoints with descriptions, code snippets, and response examples). </p>\\n<p>This got pretty tedious pretty quick, and immediately becomes an issue when any small updates occur to the API and require manual modification of a separate doc repo. It became time to auto-generate our docs from our codebase, and discovering the best way to accomplish that within the Laravel framework.</p>\\n<p>The options were fairly slim after some research: </p>\\n<ol>\\n<li>Use <strong>Swagger</strong>, an API specification, to document our code and output a Swagger JSON file.</li>\\n<li>Document our code using <strong>docblocks</strong>, and find a generator to scan the code and convert those to Markdown. </li>\\n</ol>\\n<h2>Say No to Swagger</h2>\\n<p>I'm not a fan of the Swagger implementation in PHP. Writing documentation looks <em>atrocious</em>, makes it more difficult to read, and adds excessive code to my production codebase. I'd rather write standard docblocks for PHP and use those as the basis for the API documentation.</p>\\n<h3>\\\"Screw You, I Prefer Swagger\\\"</h3>\\n<p>It's cool, I understand the ease of the Swagger specification. It was awesome being able to run a script and generating a JSON file I could import into other libraries/frameworks/generators. If you prefer using Swagger, I recommend using the <a href=\\\"https://github.com/InfyOmLabs/laravel-generator\\\">InfyOm Laravel Generator</a>. </p>\\n<p>You can generate your entire API with a fairly simple CLI. In a single <code class=\\\"language-text\\\">artisan</code> command, and a few answered questions, you have yourself a controller, model, migration, resource, validation, and testing for your API. It also can generate Swagger-approved documentation for the API controllers it creates with a simple change of the config.</p>\\n<h2>Easy to write docs</h2>\\n<p>Luckily there's a package that kind of accomplishes what we need - <a href=\\\"https://github.com/mpociot/laravel-apidoc-generator\\\">Laravel API Documentation Generator</a>. It scans your API endpoints and actually runs them to generate the documentation (automatically creating JSON response objects for your docs). It combines the PHP docblocks your write above the controller's classes/methods with request validation, JSON responses, and a table of contents.</p>\\n<p>If you're running Laravel 5.5+, just run this line to install the package:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">composer require mpociot/laravel-apidoc-generator\\n</code></pre>\\n      </div>\\n<p>And start generating docs using the Artisan CLI command:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">php artisan api:generate --routePrefix<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"api/*\\\"</span>\\n</code></pre>\\n      </div>\\n<p>There are plenty of benefits of using this package:</p>\\n<h3>Custom written content</h3>\\n<p>You're not limited to auto-generated docs, this package is also capable of appending other Markdown file's content. Great for writing additional docs for authentication.</p>\\n<h3>Authenticating API requests</h3>\\n<p>It even handles dirty processes, like authenticating API calls:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">php artisan api:generate --routePrefix<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"api/*\\\"</span> --actAsUserId<span class=\\\"token operator\\\">=</span>1\\n</code></pre>\\n      </div>\\n<h3>Postman</h3>\\n<p>This package also generates a JSON 'collection' file for <a href=\\\"https://www.getpostman.com/\\\">Postman</a>, an app for querying APIs. Handy if you're like me and you test your API with it. <a href=\\\"https://www.getpostman.com/docs/v6/postman/collections/creating_collections\\\">You can import the collection</a> and have a folder full of all your endpoints.</p>\\n<h3>Don't comment code? Don't worry!</h3>\\n<p>Since this package analyzed your entire route file and queries each route for data, it'll generate API docs for every single route -- even if it doesn't have documentation/docblocks/comments! The generator creates a  \\\"general\\\" section which contains all the endpoints you didn't group inside <em>\\\"resources\\\"</em>.</p>\\n<h2>Issues with Auto-generation</h2>\\n<p>From the beginning, I was trepidatious about integrating a documentation generator. There are several pitfalls with automation that lend to more work being done by devs, or worse, code getting refactored immensely for it.</p>\\n<h3>One giant markdown file</h3>\\n<p>Despite being able to separate things into \\\"Resources\\\" with the API generator, the generator creates one massive Markdown file. Each \\\"resource\\\" or API controller is separated into sections, but without separate files, it makes parsing with frameworks like GatsbyJS more difficult.</p>\\n<h3>No comment blocks? Inaccurate docs.</h3>\\n<p>The initial issue I encountered with docblock, and <em>even Swagger documentation</em>, was the need for a physical file with comments for each endpoint. </p>\\n<p>What if I use a base class to extend my API controllers? All my major endpoints (index, store, etc) are all stored in the base controller, and I only add a couple extra endpoints to the actual endpoint controller. </p>\\n<p>The base controller:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n\\n<span class=\\\"token keyword\\\">namespace</span> <span class=\\\"token package\\\">App<span class=\\\"token punctuation\\\">\\\\</span>Http<span class=\\\"token punctuation\\\">\\\\</span>Controllers</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Illuminate<span class=\\\"token punctuation\\\">\\\\</span>Http<span class=\\\"token punctuation\\\">\\\\</span>Request</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">App<span class=\\\"token punctuation\\\">\\\\</span>Http<span class=\\\"token punctuation\\\">\\\\</span>Controllers<span class=\\\"token punctuation\\\">\\\\</span>Controller</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ApiController</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Controller</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">/**\\n     * Display a listing of the resource.\\n     *\\n     * @return \\\\Illuminate\\\\Http\\\\Response\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">index</span><span class=\\\"token punctuation\\\">(</span>Request <span class=\\\"token variable\\\">$request</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// Does API stuff</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>The generator combines comments from the extended classes, using docblocks from the base class. The issue? We get generic comments for any endpoint extended off the base class unless we re-instate the method in the endpoint controller.</p>\\n<p>This leads to the repeated code, excess code, and limitations on innovation.</p>\\n<h2>Hand-written > Docblocks > Swagger</h2>\\n<p>Unless you API is setup for it, or you're working with an immense API that's constantly changing -- it's better to just write docs by hand. </p>\\n<p><strong>It's great to use a generator as a start,</strong> since it'll generate all the endpoints/request objects/etc. But for <em>long-term</em> maintenance, it seems like even the generators aren't completely automated - and require so much maintenance that it overrides it's usefulness.</p>\\n<p>However, if you are looking for a generator that <strong>isn't Swagger based</strong>, the <a href=\\\"https://github.com/mpociot/laravel-apidoc-generator\\\">laravel-apidoc-generator by mpociot</a> does a solid enough job of generating docs. And <strong>if you're cool with Swagger</strong>, the Laravel Generator by InfyOmLabs does a great job of creating everything you need for an API (controller, validation, models, migrations, tests, everything!).</p>\\n<h2>Making it work (for me)</h2>\\n<p>The primary issue I had was the generated format of the Markdown. It was a single massive file that was compatible with doc generators like Slate, but not my GatsbyJS setup. For my Gatsby docs, they're generated from a <code class=\\\"language-text\\\">docs</code> folder with sub-folder for each resource group (<code class=\\\"language-text\\\">docs/endpoint/</code>). Then we create a file for each route (<code class=\\\"language-text\\\">docs/posts/get-all-posts.md</code>).</p>\\n<h3>Using Javascript</h3>\\n<p>My first instinct was to write a NodeJS script to parse through the massive Markdown file and split it up into the chunks I needed. I used NodeJS to read the file contents, markdown-js to parse the MD into a walkable tree - then into HTML, and turndown to convert the HTML back to MD.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> markdown <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"markdown\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>markdown<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> TurndownService <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"turndown\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> turndownService <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">TurndownService</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Grab API markdown master file and dump file into variable</span>\\n<span class=\\\"token keyword\\\">let</span> docs <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'public/docs/source/index.md'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'utf8'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Parse the markdown into a JSONML tree </span>\\n<span class=\\\"token comment\\\">// (giant array with objects that contain MD data)</span>\\n<span class=\\\"token comment\\\">// [</span>\\n<span class=\\\"token comment\\\">//     {</span>\\n<span class=\\\"token comment\\\">//         'header',</span>\\n<span class=\\\"token comment\\\">//         {</span>\\n<span class=\\\"token comment\\\">//             level: 1</span>\\n<span class=\\\"token comment\\\">//         },</span>\\n<span class=\\\"token comment\\\">//         'The actual header content'</span>\\n<span class=\\\"token comment\\\">//     },</span>\\n<span class=\\\"token comment\\\">// ]</span>\\n<span class=\\\"token keyword\\\">var</span> tree <span class=\\\"token operator\\\">=</span> markdown<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>docs<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> separateDocs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Loop through tree to find headers</span>\\n<span class=\\\"token comment\\\">// Whenever header is found, insert last collection, </span>\\n<span class=\\\"token comment\\\">// and make new collection variable to insert ongoing data into</span>\\n<span class=\\\"token comment\\\">// Each collection should contain name (used for filename) and data</span>\\n<span class=\\\"token keyword\\\">var</span> collection <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\ntree<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>element<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>element<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'header'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>element<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>level <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// Put collection the main doc array</span>\\n            <span class=\\\"token comment\\\">// Then wipe it out and start fresh</span>\\n            separateDocs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>collection<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n            collection <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n                <span class=\\\"token string\\\">'markdown'</span>\\n            <span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    collection<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>element<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    i<span class=\\\"token operator\\\">++</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// console.log(separateDocs);</span>\\n\\n<span class=\\\"token comment\\\">// Convert from JSONML to HTML then to MD</span>\\n<span class=\\\"token comment\\\">// Then save the file</span>\\n<span class=\\\"token keyword\\\">var</span> convertedDocs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\nseparateDocs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">var</span> header\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'header'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        header <span class=\\\"token operator\\\">=</span> doc<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        header <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'index'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">var</span> html <span class=\\\"token operator\\\">=</span> markdown<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">renderJsonML</span><span class=\\\"token punctuation\\\">(</span>markdown<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toHTMLTree</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> convertedMarkdown <span class=\\\"token operator\\\">=</span> turndownService<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">turndown</span><span class=\\\"token punctuation\\\">(</span>html<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    convertedDocs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>convertedMarkdown<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFile</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`tmp/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>header<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">.md`</span></span><span class=\\\"token punctuation\\\">,</span> convertedMarkdown<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The file was saved!\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>You can run this script using the CLI: <code class=\\\"language-text\\\">node generate-api-docs.js</code></p>\\n<p>After a bit of tinkering, I discovered that I could accomplish what I needed, but the source material became degraded. The conversion from MD -> JSON -> HTML -> MD was causing formatting issues.</p>\\n<h3>Back to the source</h3>\\n<p>I realized that altering the final product wasn't the way to go, and it'd be easier just to edit the generator's output code. After snooping around the source code, I found the method I needed: <code class=\\\"language-text\\\">writeMarkdown()</code>. With a bit of altering, here's what I ended up with:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\">    <span class=\\\"token comment\\\">/**\\n     * @param  Collection $parsedRoutes\\n     *\\n     * @return void\\n     */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">writeMarkdown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$parsedRoutes</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token variable\\\">$outputPath</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'output'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token variable\\\">$infoText</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">view</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'apidoc::partials.info'</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'outputPath'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">ltrim</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">'public/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'showPostmanCollectionButton'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">!</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'noPostmanCollection'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token variable\\\">$parsedRouteOutput</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$parsedRoutes</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$routeGroup</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token variable\\\">$routeGroup</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'output'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>string<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token function\\\">view</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'apidoc::partials.route'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'parsedRoute'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token variable\\\">$documentarian</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Documentarian</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token variable\\\">$parsedRouteOutput</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">each</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$routeGroup</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">use</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$infoText</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token variable\\\">$routeGroup</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">each</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">use</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$infoText</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">// dd($route);</span>\\n\\n                <span class=\\\"token comment\\\">// $cleanResource = preg_replace('/\\\\s+/', '', $route['resource']);</span>\\n                <span class=\\\"token variable\\\">$routeUrl</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">str_replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'api/v1/'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">''</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'uri'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$safeUrl</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">str_replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'/'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">'-'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$routeUrl</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$safeUrl</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">str_replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'{'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">''</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$safeUrl</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$safeUrl</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">str_replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'}'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">''</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$safeUrl</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$cleanResource</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">explode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'\\\\n'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'resource'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$cleanResource</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$cleanResource</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token comment\\\">// $cleanResource = trim(preg_replace('/\\\\s+/', ' ', $route['resource']));</span>\\n                <span class=\\\"token variable\\\">$title</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">strtolower</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'methods'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">.</span> <span class=\\\"token single-quoted-string string\\\">'-'</span> <span class=\\\"token punctuation\\\">.</span> <span class=\\\"token variable\\\">$safeUrl</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token variable\\\">$folder</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">DIRECTORY_SEPARATOR</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token single-quoted-string string\\\">'dist'</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">DIRECTORY_SEPARATOR</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">strtolower</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$cleanResource</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">createFolder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$folder</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$targetFile</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$folder</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">DIRECTORY_SEPARATOR</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token variable\\\">$title</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token single-quoted-string string\\\">'.md'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token variable\\\">$frontmatter</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">view</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'apidoc::partials.frontmatter'</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'method'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'methods'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'route'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$routeUrl</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'title'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'title'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'date'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'Y-m-d'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token variable\\\">$markdown</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">view</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'apidoc::singledoc'</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'writeCompareFile'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'frontmatter'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$frontmatter</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'infoText'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$infoText</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'outputPath'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'output'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'showPostmanCollectionButton'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">!</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'noPostmanCollection'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'route'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'group'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$cleanResource</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token comment\\\">// Write output file</span>\\n                <span class=\\\"token function\\\">file_put_contents</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$targetFile</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$markdown</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'Wrote '</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token variable\\\">$title</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token single-quoted-string string\\\">' to: '</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'noPostmanCollection'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!==</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'Generating Postman collection'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n            <span class=\\\"token function\\\">file_put_contents</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">DIRECTORY_SEPARATOR</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token single-quoted-string string\\\">'collection.json'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">generatePostmanCollection</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$parsedRoutes</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Make sure to add this helper method to the <code class=\\\"language-text\\\">GenerateDocumentation</code> class (I threw it on the bottom):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\">    <span class=\\\"token comment\\\">/**\\n     * Create folder if none exists\\n     *\\n     * @param string $folder\\n     * @return void\\n     */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">createFolder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$folder</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">file_exists</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$folder</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">mkdir</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$folder</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0777</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>And here's the view file <code class=\\\"language-text\\\">singledoc.blade.php</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-blade\\\"><code class=\\\"language-blade\\\">---\\n{!! $frontmatter !!}\\n---\\n\\n@if($group)\\n# {{$group}}\\n@endif\\n@if($writeCompareFile === true)\\n{!! $route[&#39;output&#39;]!!}\\n@else\\n{!! isset($route[&#39;modified_output&#39;]) ? $route[&#39;modified_output&#39;] : $route[&#39;output&#39;]!!}\\n@endif</code></pre>\\n      </div>\\n<ol>\\n<li>We loop through the <code class=\\\"language-text\\\">$routeGroupsOutput</code>, which is a collection of routes sorted by group name. </li>\\n<li>Then we loop through each group to get the routes for each resource (each section labeled <code class=\\\"language-text\\\">@Resource</code> in your docblocks). </li>\\n<li>We fill a view file with our route data, and then save the view to a Markdown file (using <code class=\\\"language-text\\\">file_put_contents()</code>).</li>\\n</ol>\\n<blockquote>\\n<p>I removed the compare functionality temporarily. Usually this package creates two Markdown files and compares for differences on generation, but I haven't tried getting it to work with the new setup.</p>\\n</blockquote>\\n<h3>Results</h3>\\n<p>After editing the package a bit, I was able to accomplish what I needed, and create - at the very least - a basis for my API docs. Ideally, if I work out the kinks, this could work as an automated solution to generate docs on the fly.But hey, we'll see how well that works in practice. Things always work different when pushed past thought and into motion.</p>\\n<p><strong>The kinks so far</strong>:</p>\\n<ul>\\n<li>Local development URL shows in queried JSON results</li>\\n<li>Can't authenticate requests using User ID. Not sure if it's because I use UUIDs or my middleware setup.</li>\\n<li>Getting rid of HTML comparison comments</li>\\n<li>Delete <code class=\\\"language-text\\\">public/docs/</code> folder and make sure it doesn't generate</li>\\n<li>Installing the forked package (or creating a new package to <code class=\\\"language-text\\\">composer install</code>)</li>\\n</ul>\\n<p>You can find <a href=\\\"https://github.com/whoisryosuke/laravel-apidoc-generator\\\">my fork of the Laravel API Doc Generator here</a>.</p>\\n<p>Hope this helped with your API automation search! 🍻\\nRyo</p>\\n<hr>\\n<p><strong>References</strong>:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/mpociot/laravel-apidoc-generator\\\">laravel-apidoc-generator</a></li>\\n<li><a href=\\\"https://github.com/InfyOmLabs/laravel-generator\\\">InfyOmLabs Laravel Generator</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"2 ways to auto-generate documentation for Laravel APIs 📄⚙️\",\"cover_image\":{\"publicURL\":\"/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51.jpg\",\"childImageSharp\":{\"sizes\":{\"src\":\"/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-4e8db.jpg\",\"srcSet\":\"/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-7cc04.jpg 310w,\\n/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-69042.jpg 620w,\\n/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-4e8db.jpg 1240w,\\n/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-50ab1.jpg 1860w,\\n/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-e738f.jpg 1920w\"}}},\"date\":\"06 August, 2018\",\"tags\":[\"laravel\",\"api\",\"documentation\",\"workflow\",\"guide\",\"tips\"]},\"fields\":{\"slug\":\"/blog/2018/adding-auto-generated-docs-to-laravel-api-kushy/\"}}},{\"node\":{\"html\":\"<p>Lately I've been trying my best to get into TDD, test-driven development, which is a style of programming where you build tests alongside your code. I picked <a href=\\\"http://laravel.com\\\">Laravel</a> a while ago as my primary PHP framework for a lot of projects because of how easy it makes testing. Laravel makes it simple -- from making a test (<code class=\\\"language-text\\\">php artisan make:test YourTest</code>), to the easy to use API they provide for interfacing with PHPUnit (<code class=\\\"language-text\\\">$this-&gt;assertStatus(404)</code>).</p>\\n<p>Laravel does a great job of documenting their framework, and <a href=\\\"https://laravel.com/docs/master/testing\\\">the official docs</a> are usually more up to date than most code bases and tutorials I scoured the net to find. However, the testing docs are also incredibly simplified, and missing crucial steps (like how to run a test). It left me wondering if there was something I was missing.</p>\\n<p>After a bit of tinkering around, here's what I discovered.</p>\\n<h2>Testing JSON APIs</h2>\\n<p>The most recent version of Laravel has <a href=\\\"https://laravel.com/docs/5.6/http-tests#testing-json-apis\\\">special testing methods for JSON APIs.</a> It allows us to query Laravel's internal API directly and easily make assertions on the response.</p>\\n<h2>Writing your first test</h2>\\n<p>Let's make the test first. Use the following <code class=\\\"language-text\\\">artisan</code> command:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">php artisan make: <span class=\\\"token function\\\">test</span> ShopTest\\n</code></pre>\\n      </div>\\n<p>Now you can open up your first test file located in <code class=\\\"language-text\\\">tests/Feature/ShopTest.php</code> and add a JSON API call:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n\\n<span class=\\\"token keyword\\\">namespace</span> <span class=\\\"token package\\\">Tests<span class=\\\"token punctuation\\\">\\\\</span>Feature</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Tests<span class=\\\"token punctuation\\\">\\\\</span>TestCase</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Illuminate<span class=\\\"token punctuation\\\">\\\\</span>Foundation<span class=\\\"token punctuation\\\">\\\\</span>Testing<span class=\\\"token punctuation\\\">\\\\</span>WithFaker</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Illuminate<span class=\\\"token punctuation\\\">\\\\</span>Foundation<span class=\\\"token punctuation\\\">\\\\</span>Testing<span class=\\\"token punctuation\\\">\\\\</span>RefreshDatabase</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ShopTest</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">TestCase</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">/**\\n     * Tests shop index without params to see if it works\\n     *\\n     * @return void\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">testShopIndex</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token variable\\\">$response</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'GET'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">'/api/v1/shops'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token variable\\\">$response</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">assertStatus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">201</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>How it works</h3>\\n<p>We first query the API using the <code class=\\\"language-text\\\">json()</code> method which returns a response from the API. Then we check the response and <strong>assert</strong> certain things, like the status code (<code class=\\\"language-text\\\">assertStatus()</code>), or data itself (<code class=\\\"language-text\\\">assertJson</code>).</p>\\n<h3>Debugging tests</h3>\\n<p>If at any point the test fails, and you're not sure why, just do a <code class=\\\"language-text\\\">dd($response)</code> to dump the response into the console. You can also use commands like <code class=\\\"language-text\\\">var_dump($variable)</code> to print out text in the console during tests. It helps verify when a method returns a boolean (like deleting a resource) or verifying properties exist on a resource (e.g. <code class=\\\"language-text\\\">$post-&gt;id</code>). Be wary of using <code class=\\\"language-text\\\">var_dump()</code> for larger variables (like the response object) - it tends to crash and freeze tests.</p>\\n<blockquote>\\n<p>Be careful when asserting data with duplicate property names, even if they're nested (e.g. <code class=\\\"language-text\\\">{ id: 1, comment { id: 129 } }</code>). assertJson will collapse the array and assume you mean both IDs. In this case, you have to use assertExactJson to check duplicate property names.</p>\\n</blockquote>\\n<h2>Running the tests</h2>\\n<p>Laravel doesn't actually write this anywhere in their docs, and you'd assume that you can run a test with something like <code class=\\\"language-text\\\">php artisan test</code> -- but you actually have to use the PHPUnit library in your composer dependencies:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">./vendor/bin/phpunit\\n</code></pre>\\n      </div>\\n<p>Run that command from the project root and PHPUnit will run all tests located in your <code class=\\\"language-text\\\">/tests/</code> folder. </p>\\n<blockquote>\\n<p>Make sure all composer dependencies are installed or you won't be able to run this script. And if you're running Laravel inside of Docker, make sure to run PHPUnit inside the container <code class=\\\"language-text\\\">docker-compose exec workspace ./vendor/bin/phpunit</code></p>\\n</blockquote>\\n<h3>Running a single test</h3>\\n<p>Sometimes you need to run a single test in isolation. I had to look this one up too:</p>\\n<p><code class=\\\"language-text\\\">./vendor/bin/phpunit --filter TestControllerName</code></p>\\n<p>This also works as well, albeit more verbose:</p>\\n<p><code class=\\\"language-text\\\">./vendor/bin/phpunit  tests/Feature/TestControllerName.php</code></p>\\n<h2>Keep it simple silly</h2>\\n<p>I found that with basic Laravel APIs, you tend to repeat the same tests over and over again. Wouldn't it be nice if an API test looked like one of our Models, and was as simple as writing an extended class with protected variables?:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n<span class=\\\"token keyword\\\">namespace</span> <span class=\\\"token package\\\">Tests<span class=\\\"token punctuation\\\">\\\\</span>Feature<span class=\\\"token punctuation\\\">\\\\</span>Controllers</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Tests<span class=\\\"token punctuation\\\">\\\\</span>CrudTest</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Illuminate<span class=\\\"token punctuation\\\">\\\\</span>Foundation<span class=\\\"token punctuation\\\">\\\\</span>Testing<span class=\\\"token punctuation\\\">\\\\</span>WithFaker</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Illuminate<span class=\\\"token punctuation\\\">\\\\</span>Foundation<span class=\\\"token punctuation\\\">\\\\</span>Testing<span class=\\\"token punctuation\\\">\\\\</span>RefreshDatabase</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">StrainsControllerTest</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">CrudTest</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">/**\\n     * The model to use when creating dummy data\\n     *\\n     * @var class\\n     */</span>\\n    <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token variable\\\">$model</span> <span class=\\\"token operator\\\">=</span> \\\\<span class=\\\"token package\\\">KushyApi<span class=\\\"token punctuation\\\">\\\\</span>Posts</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token keyword\\\">class</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">/**\\n     * The endpoint to query in the API\\n     * e.g = /api/v1/&lt;endpoint>\\n     *\\n     * @var string\\n     */</span>\\n    <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token variable\\\">$endpoint</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token single-quoted-string string\\\">'strains'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">/**\\n     * Any additional \\\"states\\\" to add to factory\\n     *\\n     * @var string\\n     */</span>\\n    <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token variable\\\">$states</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token single-quoted-string string\\\">'strains'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">/**\\n     * Extra data to pass to POST endpoint \\n     * aka the (store() method)\\n     * \\n     * Must be array (ends up merged with another)\\n     *\\n     * @var array\\n     */</span>\\n    <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token variable\\\">$store</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token single-quoted-string string\\\">'category'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token single-quoted-string string\\\">'1'</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>With the power of abstract classes in OOP, we can create a kind of <em>base</em> class to <em>extend</em> the functionality of our specific endpoint's test class. Let's create a new test called <code class=\\\"language-text\\\">tests/CrudTest.php</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n<span class=\\\"token keyword\\\">namespace</span> <span class=\\\"token package\\\">Tests</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Tests<span class=\\\"token punctuation\\\">\\\\</span>TestCase</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Tests<span class=\\\"token punctuation\\\">\\\\</span>Traits<span class=\\\"token punctuation\\\">\\\\</span>AttachJwtToken</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Illuminate<span class=\\\"token punctuation\\\">\\\\</span>Foundation<span class=\\\"token punctuation\\\">\\\\</span>Testing<span class=\\\"token punctuation\\\">\\\\</span>WithFaker</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Illuminate<span class=\\\"token punctuation\\\">\\\\</span>Foundation<span class=\\\"token punctuation\\\">\\\\</span>Testing<span class=\\\"token punctuation\\\">\\\\</span>RefreshDatabase</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">CrudTest</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">TestCase</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">AttachJwtToken</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">/**\\n     * Uses the model factory to generate a fake entry\\n     *\\n     * @return class\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">createPost</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">states</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">factory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">model</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">states</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">states</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        \\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">factory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">model</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">/**\\n     * GET /endpoint/\\n     * Should return 201 with data array\\n     *\\n     * @return void\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">testIndex</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token variable\\\">$response</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'GET'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token double-quoted-string string\\\">\\\"api/v1/<span class=\\\"token interpolation\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">endpoint</span><span class=\\\"token punctuation\\\">}</span></span>\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token variable\\\">$response</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">assertStatus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">201</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">assertJson</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n                <span class=\\\"token single-quoted-string string\\\">'data'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token boolean\\\">true</span>\\n            <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">/**\\n     * GET /endpoint/&lt;id>\\n     * Should return 201 with data array\\n     *\\n     * @return void\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">testShow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// Create a test shop with filled out fields</span>\\n        <span class=\\\"token variable\\\">$activity</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">createPost</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// Check the API for the new entry</span>\\n        <span class=\\\"token variable\\\">$response</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'GET'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token double-quoted-string string\\\">\\\"api/v1/<span class=\\\"token interpolation\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">endpoint</span><span class=\\\"token punctuation\\\">}</span></span>/<span class=\\\"token interpolation\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$activity</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">id</span><span class=\\\"token punctuation\\\">}</span></span>\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// Delete the test shop</span>\\n        <span class=\\\"token variable\\\">$activity</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">delete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token variable\\\">$response</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">assertStatus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">201</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">assertJson</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n                <span class=\\\"token single-quoted-string string\\\">'data'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token boolean\\\">true</span>\\n            <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">/**\\n     * POST /endpoint/\\n     *\\n     * @return void\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">testStore</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token variable\\\">$activity</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">createPost</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token variable\\\">$activity</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$activity</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">toArray</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">/**\\n         * Pass in any extra data\\n         */</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">store</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token variable\\\">$activity</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">array_merge</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$activity</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">store</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token variable\\\">$response</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'POST'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token double-quoted-string string\\\">\\\"api/v1/<span class=\\\"token interpolation\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">endpoint</span><span class=\\\"token punctuation\\\">}</span></span>/\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$activity</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">model</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">destroy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$activity</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'id'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token variable\\\">$response</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">assertStatus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">201</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">assertJson</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n                <span class=\\\"token single-quoted-string string\\\">'data'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token boolean\\\">true</span>\\n            <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n    <span class=\\\"token comment\\\">/**\\n     * DELETE /endpoint/&lt;id>\\n     * Tests the destroy() method that deletes the shop\\n     *\\n     * @return void\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">testDestroy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token variable\\\">$activity</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">createPost</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token variable\\\">$response</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'DELETE'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token double-quoted-string string\\\">\\\"api/v1/<span class=\\\"token interpolation\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">endpoint</span><span class=\\\"token punctuation\\\">}</span></span>/<span class=\\\"token interpolation\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$activity</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">id</span><span class=\\\"token punctuation\\\">}</span></span>\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token variable\\\">$response</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">assertStatus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>This class tests the index, show, store, and destroy methods that come in the basic API controllers that artisan generates for you. And it does it dynamically, using the variables you define in your endpoint's test class.</p>\\n<h3>Testing with Factories</h3>\\n<p>This requires that you have a <strong>Factory</strong> for your class, so the <code class=\\\"language-text\\\">createPost()</code> method can generate fake data to test. Factories use the <a href=\\\"https://github.com/fzaninotto/Faker\\\">Faker library</a> to generate fake data for a specific model, whether you need it for tasks seeding or testing. Say you need to create 50 users - a factory will generate random (and even unique) names, passwords, and emails for all 50.</p>\\n<p>Creating factories are very simple, <a href=\\\"https://laravel.com/docs/5.6/database-testing#generating-factories\\\">check out the Laravel docs.</a> Here's an example of one with a few different types of fields (images, location data, etc):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">php artisan make:factory YourModelNameFactory\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Faker<span class=\\\"token punctuation\\\">\\\\</span>Generator</span> <span class=\\\"token keyword\\\">as</span> Faker<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token variable\\\">$factory</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">define</span><span class=\\\"token punctuation\\\">(</span>YourAppName\\\\<span class=\\\"token package\\\">YourModelName</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token keyword\\\">class</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>Faker <span class=\\\"token variable\\\">$faker</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token single-quoted-string string\\\">'id'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">uuid</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'name'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">name</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'slug'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">slug</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'featured_img'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">imageUrl</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">640</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">480</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'avatar'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">imageUrl</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">48</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">48</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'description'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">paragraph</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'latitude'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">latitude</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">90</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">90</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'longitude'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">longitude</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">180</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">180</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'address'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">streetAddress</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'city'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">city</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'state'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">state</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'postal_code'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">postcode</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'country'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">country</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'rating'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">numberBetween</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'featured'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">numberBetween</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token single-quoted-string string\\\">'verified'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$faker</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">numberBetween</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token variable\\\">$factory</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">state</span><span class=\\\"token punctuation\\\">(</span>YourAppName\\\\<span class=\\\"token package\\\">YourModelName</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token keyword\\\">class</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">'product'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token single-quoted-string string\\\">'category'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token single-quoted-string string\\\">'Product'</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<blockquote>\\n<p>Use <em>states</em> to add extra data or modify existing params in your fake Model entry. <code class=\\\"language-text\\\">factory(YourModelName::class)-&gt;state(&#39;product&#39;);</code>Works great if you need to have control over a model's specific parameter(s), like setting a user as an admin or customer. In this case, we set the post's category.</p>\\n</blockquote>\\n<h2>Handling JWT</h2>\\n<p>If you noticed, I have a trait on the abstract class called <code class=\\\"language-text\\\">AttachJwtToken</code>. I use Laravel's Passport package and connect to the API using OAuth2 authentication. Because of this, all JSON requests in tests require the proper authorization headers (with a JWT for the user).</p>\\n<p>The <code class=\\\"language-text\\\">AttachJwtToken</code> trait handles this process for us. I found this originally <a href=\\\"https://gist.github.com/jgrossi/4b1364e20418eca3ca937e70550c1823\\\">on Github by @jgrossi</a> and based my code off it. It checks for an existing user (which you can pass in using the <code class=\\\"language-text\\\">loginAs</code> method), and if no user is found, creates one, and returns a JWT for the user (using Laravel Passport's built in <code class=\\\"language-text\\\">createToken()</code> function)</p>\\n<p><a href=\\\"https://gist.github.com/whoisryosuke/2ee866ba6c32af5b4614ac6136a0012a\\\">Check out my full source code on Gist</a></p>\\n<h2>It's that simple!</h2>\\n<p>It really is this <strong>simple</strong> to test your API <em>(if it's a simple CRUD API).</em> </p>\\n<p>The hardest part of researching testing was feeling secure in the amount of information I'd accrued. At the end of the day, when you look at the source code, there are only so many testing methods Laravel/PHPUnit provides. You assert one thing or another, whether it's the status code or JSON itself, or mock users using the <code class=\\\"language-text\\\">actingAs($user)</code>.</p>\\n<p>What becomes <strong>more complex</strong> are tasks like replicating features that span across multiple controllers, jobs, services, etc -- or mocking functionality like image storage. Or just creating factories for all your models. </p>\\n<p>Testing is easy, setting up the proper conditions becomes the true <em>test</em>.</p>\\n<p>Hope this helps your API TDD 🤘\\nRyo</p>\\n<hr>\\n<p><strong>References</strong>:</p>\\n<ul>\\n<li><a href=\\\"https://gist.github.com/whoisryosuke/2ee866ba6c32af5b4614ac6136a0012a\\\">Attach JWT Token to Test snippet</a></li>\\n<li><a href=\\\"https://laravel.com/docs/5.6/http-tests#testing-json-apis\\\">Laravel Docs - Testing JSON APIs</a></li>\\n<li><a href=\\\"https://github.com/fzaninotto/Faker#fakerprovideruuid\\\">Faker docs</a></li>\\n<li><a href=\\\"https://course.testdrivenlaravel.com/\\\">Test Driven Laravel course (paid with free samples via email)</a></li>\\n<li><a href=\\\"https://dev.to/lechatthecat/how-to-use-phpunit-for-laravel-3d3c\\\">Using PHPUnit for Laravel Testing</a></li>\\n<li><a href=\\\"https://dev.to/fatboyxpc/laravel-testing-woes-token-mismatch-28pd\\\">Laravel Testing Woes: Token Mismatch</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Adding testing to a Laravel API 📝\",\"cover_image\":{\"publicURL\":\"/static/Adding-testing-to-a-Laravel-API-1920px-1e020cc22000c4bc9fc2a2eded8878f5.jpg\",\"childImageSharp\":{\"sizes\":{\"src\":\"/static/Adding-testing-to-a-Laravel-API-1920px-1e020cc22000c4bc9fc2a2eded8878f5-4e8db.jpg\",\"srcSet\":\"/static/Adding-testing-to-a-Laravel-API-1920px-1e020cc22000c4bc9fc2a2eded8878f5-7cc04.jpg 310w,\\n/static/Adding-testing-to-a-Laravel-API-1920px-1e020cc22000c4bc9fc2a2eded8878f5-69042.jpg 620w,\\n/static/Adding-testing-to-a-Laravel-API-1920px-1e020cc22000c4bc9fc2a2eded8878f5-4e8db.jpg 1240w,\\n/static/Adding-testing-to-a-Laravel-API-1920px-1e020cc22000c4bc9fc2a2eded8878f5-50ab1.jpg 1860w,\\n/static/Adding-testing-to-a-Laravel-API-1920px-1e020cc22000c4bc9fc2a2eded8878f5-e738f.jpg 1920w\"}}},\"date\":\"03 August, 2018\",\"tags\":[\"laravel\",\"tdd\",\"testing\",\"api\",\"php\",\"phpunit\"]},\"fields\":{\"slug\":\"/blog/2018/adding-testing-to-laravel-api/\"}}}]}},\"pathContext\":{\"tag\":\"api\",\"slug\":\"/blog/2018/shortcode-laravel-change-api-resource-fields/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-2018-shortcode-laravel-change-api-resource-fields.json\n// module id = 579\n// module chunks = 259844905416749"],"sourceRoot":""}