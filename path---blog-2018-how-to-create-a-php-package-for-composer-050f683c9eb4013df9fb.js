webpackJsonp([0x976dd51d2dd9],{575:function(s,n){s.exports={data:{blog:{html:'<p>Recently, I\'ve recently been trying my best to upload as much code to open source repositories like <a href="http://github.com/whoisryosuke"><strong>Github</strong></a> and <a href="http://codepen.io/whoisryosuke"><strong>Codepen</strong></a>. It makes bootstrapping new projects much simpler when I can <code class="language-text">git clone</code> a boilerplate from my Github, or <em>copypasta</em> a CSS/JS snippet from CodePen. But what happens when I need to include a library or module into several projects? Cloning and copy paste just don\'t cut it at that point.</p>\n<p>Cut to <a href="http://npmjs.com"><strong>NPM</strong></a> and <a href="http://getcomposer.com"><strong>Composer</strong></a> ( or really <a href="http://packagist.com">Packagist</a>. NPM is a package manager for Javascript using Node, and Composer does the same for PHP. </p>\n<p>Today we\'ll be looking into submitting a PHP "package" to Composer through the Packagist, so we can use <code class="language-text">composer require</code> to install our package into any project!</p>\n<h2>The simple steps</h2>\n<p>It\'s as easy as 4 steps (<em>minus the part where you code a reusable package in PHP</em>) -- I was surprised too. Make sure before starting you\'ve created a git repository in your project and committed your code. It\'s also required to have an account on <a href="http://github.com">Github</a> and <a href="http://packagist">Packagist</a>.</p>\n<ol>\n<li>Create a <code class="language-text">composer.json</code> in your project:</li>\n</ol>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"your-brand-name/your-project"</span><span class="token punctuation">,</span>\n    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"library"</span><span class="token punctuation">,</span>\n    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Your package description goes here"</span><span class="token punctuation">,</span>\n    <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"relevant"</span><span class="token punctuation">,</span><span class="token string">"tags"</span><span class="token punctuation">,</span><span class="token string">"go"</span><span class="token punctuation">,</span><span class="token string">"here"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">"homepage"</span><span class="token operator">:</span> <span class="token string">"https://yourcompany.com"</span><span class="token punctuation">,</span>\n    <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>\n    <span class="token property">"authors"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Jordi Boggiano"</span><span class="token punctuation">,</span>\n            <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"j.boggiano@seld.be"</span><span class="token punctuation">,</span>\n            <span class="token property">"homepage"</span><span class="token operator">:</span> <span class="token string">"http://seld.be"</span><span class="token punctuation">,</span>\n            <span class="token property">"role"</span><span class="token operator">:</span> <span class="token string">"Developer"</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ol start="2">\n<li>\n<p><a href="https://github.com/new">Create a new repository on your Github</a> and push your local git (init if you haven\'t) to the remote Github repo.</p>\n</li>\n<li>\n<p><a href="https://packagist.org/packages/submit">Submit your package to the Packagist</a></p>\n</li>\n<li>\n<p>Done! Your package should be online and Packagist should provide a sample Composer require with your project name (e.g. <code class="language-text">composer require username/package-name</code>)</p>\n</li>\n</ol>\n<blockquote>\n<p>You should be able to view your package live at: <code class="language-text">https://packagist.org/packages/your-username/package-name</code></p>\n</blockquote>\n<h2>So easy, there\'s no excuse</h2>\n<p>One of the biggest principles of programming I try to apply is <strong>DRY</strong>, <em>don\'t repeat yourself</em>. When your code is probably already hosted on Github, it\'s only a two step process to get your code in a place where it\'s version controlled. </p>\n<p>Rather than relying on <code class="language-text">git clone</code> or submodules, it\'s much more efficient for your codebase to use a composer dependency. </p>\n<h2>Take my code for a test run</h2>\n<p>The package I released on the Packagist is for developers working with the Metrc API to send and receive cannabis regulatory data. It\'s basically a wrapper for their API that uses a Guzzle client to interface with it (using your authoriation credentials).</p>\n<p>If you\'re a Metrc developer, or just interested in using the code, you can add it to your projects using:</p>\n<p><code class="language-text">composer require kushy/metrc-php-sdk</code></p>\n<p>Hope that helps,\nRyo</p>',frontmatter:{title:"How to create a PHP package for Composer",cover_image:{publicURL:"/static/how-to-create-a-php-package-for-composer-1920px-74bfa9e0a3d1e8798b931686e2313787.png",childImageSharp:{sizes:{tracedSVG:"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='267' viewBox='0 0 400 267' version='1'%3E%3Cpath d='M220 1a262 262 0 0 0-18 8l-3 23a1762 1762 0 0 1-48 23c0 2 0 2-1 0 0-2 0-2-2 0s-2 2-6 0c-6-3-8-3-11 0s-3 4 1 7l2 3h-4c-5-1-5 3-1 6l7 5 3 4h-4c-5 1-8 3-8 5l6 3 9 4 6 4c4 2 7 4 8 8 0 2 0 2-3 2h-2c1 1 1 1-1 1-2 1-3 1-2 3h-2l-2 3-3 1-5 1h-1v-1l-1-1h-2c-1-2-9-5-13-5-7 0-13 3-20 10l-6 5v-4c0-4 0-4-3-5l-4-3c0-3 3-8 6-10l6-8 7-11c4-4 4-4 3-6-2-2-2-2 5-7l8-5c0-2-3-1-14 6-12 7-12 8-13 4-1-2 0-4 3-6l3-4c0-2 0-3-10 1-4 2-8 3-10 2-2 0-3 0-6 5-4 6-4 6-8-2l-3-3c-3 0-2 5 1 16 2 6 3 11 2 12l1 2c3 2 4 6 3 9 0 2-1 2-4 2-4-1-4-1-4 8-1 7-1 7 1 7 3 0 3-2 3 23v6l-1-6c0 2-1 3-6 5l-6 3-5-2-13-8-7-4-7 3-9 4c-2 1-3 1-7-1l-5-3v124h200l201-1-1-134V0h-89l-91 1m-85 55l2 2c4 1 14 10 13 11l-9-6-8-5 7 9 7 9-9-5-9-4 7 6c6 6 7 7 10 6h4l-3 2-4 2c-4-1-12 0-12 1s1 2 3 2l9 4 6 3c3 0 8 5 9 9l1 3 11-4-2-5c-2-4-3-7-2-11 0-6-2-14-7-23-5-10-7-10-3 0l2 7c-1 0-6-1-5-2 1-2-2-4-9-8s-9-5-9-3M63 71l6 20c1 1 16-7 16-8s-4-3-5-2c-2 0-2-1-1-3 1-1 2-1 5 1 3 3 5 3 5 2L79 70c-2 0-7 10-7 13 1 4-1 2-4-5-4-8-5-9-5-7m204 9c-7 7-10 8-15 5-3-1-3-1-10 2-10 5-11 7-12 19l-1 15c-2 5-2 11-1 14 1 2 2 2 5 1l5 1 4 2c3 0 3 0 3-5l-2-8c-3-5-2-10 1-14l2-5 1-9c2-6 1-7-3-7-3 0-7 2-8 5-2 4-3 4-2-1 2-4 7-7 13-7 4 0 6 2 4 8l-2 9c0 5 0 6-3 9s-4 7-1 10l2 2 3-3c1-1 3-3 3-5l3-3c1-1 1-2-2-4-3-4-4-8-2-11 5-9 19-6 19 3 0 3 0 4 5 4h9c2 1 3 1 3-1 0-8 9-14 15-9 2 1 2 1 2-2 0-5 2-6 10-3 2 0 8 9 6 10l-1-1c-1-4-10-9-11-7l-2 5c0 4 0 5 3 10 6 7 6 14 1 19-5 4-5 5 0 5 2 0 3 0 4 2 1 5 12 7 13 2v-17l-3-13c0-8-1-9-4-14-4-6-7-7-14-6-4 1-5 1-7-1l-7-4-7-4c-2-3-3-3-8-3-6 0-6 0-11 5m-165-3l-8 5c-12 6-23 13-23 14l1 4c2 2 2 4 1 6-1 3-1 4 4 5 6 1 6 1 9-6 1-3 2-5 4-6l6-7 6-10 3-5h-3m63 29l-13 4 2 5 2 4 12-4c11-4 12-5 12-7s0-2-1-1h-3c-1-2 2-4 3-2 2 1 2 1 2-1 0-3-1-3-16 2m103 6c-2 2-5 3-7 3-3 0-6 4-6 7 0 2 1 3 3 1 1-2 9-5 13-5h5l-7 2-7 2-3 4c-3 3-3 4-3 8 2 11 5 17 8 14 2-3 3-2 2 0-4 6 1 13 10 17 8 2 11 1 19-7 8-9 12-11 19-14 6-1 7-4 3-4l-3-2c-2-5-10-3-18 5-4 4-6 3-4 0 1-4-1-4-6-1-4 2-5 1-1-2l2-2c-3-3-6-4-8-4-1 0-2 0-1-1 1-2 4-1 10 2 8 4 9 4 9-3v-4l2-2c1-4 0-7-4-8l-5-3c-4-7-15-8-22-3m37-2c0 3-7 5-10 5h-2l2 1c2 0 8 5 8 6 0 3 3 6 5 5 4-1 5-8 2-14-3-4-4-5-5-3m-241 5c0 5 0 5 11 7l12 2c2 0 3 0 4-3v-5l-25-6-2 5m190 32c0 9 1 12 8 19l8 10c3 5 9 6 11 1v-3l3-2 7-2c4-1 1 2-3 4-5 2-6 6-1 6 4 0 9-5 14-14 3-4 4-6 6-14 0-3-1-3-5 1a116 116 0 0 1-11 11c-3 3-3 3-10 3l-9-1c-3-2-10-9-10-11l-2-5-4-7c-1-5-2-3-2 4m-123-3c-2 3-11 7-8 4 1-2 1-2-2-1l-12 2c-10 1-15 3-16 7 0 2 0 2 1 1 0-3 1-2 3 1s2 4-1 1h-2l2 2a3534 3534 0 0 1 19 18c4 6 7 7 13 6 8-2 12-4 15-11 2-4 2-4 0-3-2 0-2 0 0-1l5-5 5-4c1 0 4-4 4-6l-2 1c-1 4-2 4-2 1 0-2-1-3-4-4l-11-6-5-5-2 2m-9 7c-1 2-3 2-9 2h-8c-1 2-1 2 4 2l8 1c2 1 2 1 0 1h-6c-6 0-7 1-3 2l5 1 4-1 2-1h1v7l2 3 3 2h-3l-7 2h14l4-2-2-1-4 1-3 1 3-3c4-5 4-7-1-3-2 3-3 2-3-5v-6c2-3 1-5-1-3' fill='lightgray' fill-rule='evenodd'/%3E%3C/svg%3E",src:"/static/how-to-create-a-php-package-for-composer-1920px-74bfa9e0a3d1e8798b931686e2313787-ab24c.png",srcSet:"/static/how-to-create-a-php-package-for-composer-1920px-74bfa9e0a3d1e8798b931686e2313787-310d9.png 310w,\n/static/how-to-create-a-php-package-for-composer-1920px-74bfa9e0a3d1e8798b931686e2313787-63c25.png 620w,\n/static/how-to-create-a-php-package-for-composer-1920px-74bfa9e0a3d1e8798b931686e2313787-ab24c.png 1240w,\n/static/how-to-create-a-php-package-for-composer-1920px-74bfa9e0a3d1e8798b931686e2313787-80007.png 1860w,\n/static/how-to-create-a-php-package-for-composer-1920px-74bfa9e0a3d1e8798b931686e2313787-2d6df.png 1920w"}}},date:"20 July, 2018",tags:["composer","php","open source","github","tips","tutorial"],section:"blog"},fields:{slug:"/blog/2018/how-to-create-a-php-package-for-composer/"}},relatedPosts:{edges:[{node:{html:'<p>Lately I\'ve been trying my best to get into TDD, test-driven development, which is a style of programming where you build tests alongside your code. I picked <a href="http://laravel.com">Laravel</a> a while ago as my primary PHP framework for a lot of projects because of how easy it makes testing. Laravel makes it simple -- from making a test (<code class="language-text">php artisan make:test YourTest</code>), to the easy to use API they provide for interfacing with PHPUnit (<code class="language-text">$this-&gt;assertStatus(404)</code>).</p>\n<p>Laravel does a great job of documenting their framework, and <a href="https://laravel.com/docs/master/testing">the official docs</a> are usually more up to date than most code bases and tutorials I scoured the net to find. However, the testing docs are also incredibly simplified, and missing crucial steps (like how to run a test). It left me wondering if there was something I was missing.</p>\n<p>After a bit of tinkering around, here\'s what I discovered.</p>\n<h2>Testing JSON APIs</h2>\n<p>The most recent version of Laravel has <a href="https://laravel.com/docs/5.6/http-tests#testing-json-apis">special testing methods for JSON APIs.</a> It allows us to query Laravel\'s internal API directly and easily make assertions on the response.</p>\n<h2>Writing your first test</h2>\n<p>Let\'s make the test first. Use the following <code class="language-text">artisan</code> command:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">php artisan make: <span class="token function">test</span> ShopTest\n</code></pre>\n      </div>\n<p>Now you can open up your first test file located in <code class="language-text">tests/Feature/ShopTest.php</code> and add a JSON API call:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code class="language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">Tests<span class="token punctuation">\\</span>Feature</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Tests<span class="token punctuation">\\</span>TestCase</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>WithFaker</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>RefreshDatabase</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ShopTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * Tests shop index without params to see if it works\n     *\n     * @return void\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testShopIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">json</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'GET\'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">\'/api/v1/shops\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$response</span>\n            <span class="token operator">-</span><span class="token operator">></span><span class="token function">assertStatus</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>How it works</h3>\n<p>We first query the API using the <code class="language-text">json()</code> method which returns a response from the API. Then we check the response and <strong>assert</strong> certain things, like the status code (<code class="language-text">assertStatus()</code>), or data itself (<code class="language-text">assertJson</code>).</p>\n<h3>Debugging tests</h3>\n<p>If at any point the test fails, and you\'re not sure why, just do a <code class="language-text">dd($response)</code> to dump the response into the console. You can also use commands like <code class="language-text">var_dump($variable)</code> to print out text in the console during tests. It helps verify when a method returns a boolean (like deleting a resource) or verifying properties exist on a resource (e.g. <code class="language-text">$post-&gt;id</code>). Be wary of using <code class="language-text">var_dump()</code> for larger variables (like the response object) - it tends to crash and freeze tests.</p>\n<blockquote>\n<p>Be careful when asserting data with duplicate property names, even if they\'re nested (e.g. <code class="language-text">{ id: 1, comment { id: 129 } }</code>). assertJson will collapse the array and assume you mean both IDs. In this case, you have to use assertExactJson to check duplicate property names.</p>\n</blockquote>\n<h2>Running the tests</h2>\n<p>Laravel doesn\'t actually write this anywhere in their docs, and you\'d assume that you can run a test with something like <code class="language-text">php artisan test</code> -- but you actually have to use the PHPUnit library in your composer dependencies:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">./vendor/bin/phpunit\n</code></pre>\n      </div>\n<p>Run that command from the project root and PHPUnit will run all tests located in your <code class="language-text">/tests/</code> folder. </p>\n<blockquote>\n<p>Make sure all composer dependencies are installed or you won\'t be able to run this script. And if you\'re running Laravel inside of Docker, make sure to run PHPUnit inside the container <code class="language-text">docker-compose exec workspace ./vendor/bin/phpunit</code></p>\n</blockquote>\n<h3>Running a single test</h3>\n<p>Sometimes you need to run a single test in isolation. I had to look this one up too:</p>\n<p><code class="language-text">./vendor/bin/phpunit --filter TestControllerName</code></p>\n<p>This also works as well, albeit more verbose:</p>\n<p><code class="language-text">./vendor/bin/phpunit  tests/Feature/TestControllerName.php</code></p>\n<h2>Keep it simple silly</h2>\n<p>I found that with basic Laravel APIs, you tend to repeat the same tests over and over again. Wouldn\'t it be nice if an API test looked like one of our Models, and was as simple as writing an extended class with protected variables?:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code class="language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token keyword">namespace</span> <span class="token package">Tests<span class="token punctuation">\\</span>Feature<span class="token punctuation">\\</span>Controllers</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Tests<span class="token punctuation">\\</span>CrudTest</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>WithFaker</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>RefreshDatabase</span><span class="token punctuation">;</span>\n<span class="token keyword">class</span> <span class="token class-name">StrainsControllerTest</span> <span class="token keyword">extends</span> <span class="token class-name">CrudTest</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * The model to use when creating dummy data\n     *\n     * @var class\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$model</span> <span class="token operator">=</span> \\<span class="token package">KushyApi<span class="token punctuation">\\</span>Posts</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * The endpoint to query in the API\n     * e.g = /api/v1/&lt;endpoint>\n     *\n     * @var string\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$endpoint</span> <span class="token operator">=</span> <span class="token single-quoted-string string">\'strains\'</span><span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * Any additional "states" to add to factory\n     *\n     * @var string\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$states</span> <span class="token operator">=</span> <span class="token single-quoted-string string">\'strains\'</span><span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * Extra data to pass to POST endpoint \n     * aka the (store() method)\n     * \n     * Must be array (ends up merged with another)\n     *\n     * @var array\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$store</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n        <span class="token single-quoted-string string">\'category\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token single-quoted-string string">\'1\'</span>\n    <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>With the power of abstract classes in OOP, we can create a kind of <em>base</em> class to <em>extend</em> the functionality of our specific endpoint\'s test class. Let\'s create a new test called <code class="language-text">tests/CrudTest.php</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code class="language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token keyword">namespace</span> <span class="token package">Tests</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Tests<span class="token punctuation">\\</span>TestCase</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Tests<span class="token punctuation">\\</span>Traits<span class="token punctuation">\\</span>AttachJwtToken</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>WithFaker</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>RefreshDatabase</span><span class="token punctuation">;</span>\n\n<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CrudTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">use</span> <span class="token package">AttachJwtToken</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * Uses the model factory to generate a fake entry\n     *\n     * @return class\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">states</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">model</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">states</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">states</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        \n        <span class="token keyword">return</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">model</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * GET /endpoint/\n     * Should return 201 with data array\n     *\n     * @return void\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">json</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'GET\'</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"api/v1/<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">endpoint</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$response</span>\n            <span class="token operator">-</span><span class="token operator">></span><span class="token function">assertStatus</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span>\n            <span class="token operator">-</span><span class="token operator">></span><span class="token function">assertJson</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n                <span class="token single-quoted-string string">\'data\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span>\n            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * GET /endpoint/&lt;id>\n     * Should return 201 with data array\n     *\n     * @return void\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// Create a test shop with filled out fields</span>\n        <span class="token variable">$activity</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// Check the API for the new entry</span>\n        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">json</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'GET\'</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"api/v1/<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">endpoint</span><span class="token punctuation">}</span></span>/<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$activity</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// Delete the test shop</span>\n        <span class="token variable">$activity</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$response</span>\n            <span class="token operator">-</span><span class="token operator">></span><span class="token function">assertStatus</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span>\n            <span class="token operator">-</span><span class="token operator">></span><span class="token function">assertJson</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n                <span class="token single-quoted-string string">\'data\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span>\n            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * POST /endpoint/\n     *\n     * @return void\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$activity</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$activity</span> <span class="token operator">=</span> <span class="token variable">$activity</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">/**\n         * Pass in any extra data\n         */</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">store</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token variable">$activity</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$activity</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">store</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">json</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'POST\'</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"api/v1/<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">endpoint</span><span class="token punctuation">}</span></span>/"</span><span class="token punctuation">,</span> <span class="token variable">$activity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">model</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token variable">$activity</span><span class="token punctuation">[</span><span class="token single-quoted-string string">\'id\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$response</span>\n            <span class="token operator">-</span><span class="token operator">></span><span class="token function">assertStatus</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span>\n            <span class="token operator">-</span><span class="token operator">></span><span class="token function">assertJson</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n                <span class="token single-quoted-string string">\'data\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span>\n            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token comment">/**\n     * DELETE /endpoint/&lt;id>\n     * Tests the destroy() method that deletes the shop\n     *\n     * @return void\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$activity</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">json</span><span class="token punctuation">(</span><span class="token single-quoted-string string">\'DELETE\'</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"api/v1/<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">endpoint</span><span class="token punctuation">}</span></span>/<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$activity</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$response</span>\n            <span class="token operator">-</span><span class="token operator">></span><span class="token function">assertStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>This class tests the index, show, store, and destroy methods that come in the basic API controllers that artisan generates for you. And it does it dynamically, using the variables you define in your endpoint\'s test class.</p>\n<h3>Testing with Factories</h3>\n<p>This requires that you have a <strong>Factory</strong> for your class, so the <code class="language-text">createPost()</code> method can generate fake data to test. Factories use the <a href="https://github.com/fzaninotto/Faker">Faker library</a> to generate fake data for a specific model, whether you need it for tasks seeding or testing. Say you need to create 50 users - a factory will generate random (and even unique) names, passwords, and emails for all 50.</p>\n<p>Creating factories are very simple, <a href="https://laravel.com/docs/5.6/database-testing#generating-factories">check out the Laravel docs.</a> Here\'s an example of one with a few different types of fields (images, location data, etc):</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">php artisan make:factory YourModelNameFactory\n</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code class="language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">use</span> <span class="token package">Faker<span class="token punctuation">\\</span>Generator</span> <span class="token keyword">as</span> Faker<span class="token punctuation">;</span>\n\n<span class="token variable">$factory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">define</span><span class="token punctuation">(</span>YourAppName\\<span class="token package">YourModelName</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>Faker <span class="token variable">$faker</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>\n        <span class="token single-quoted-string string">\'id\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$faker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">uuid</span><span class="token punctuation">,</span>\n        <span class="token single-quoted-string string">\'name\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$faker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">,</span>\n        <span class="token single-quoted-string string">\'slug\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$faker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">slug</span><span class="token punctuation">,</span>\n        <span class="token single-quoted-string string">\'featured_img\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$faker</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">imageUrl</span><span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token single-quoted-string string">\'avatar\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$faker</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">imageUrl</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token single-quoted-string string">\'description\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$faker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">paragraph</span><span class="token punctuation">,</span>\n        <span class="token single-quoted-string string">\'latitude\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$faker</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">latitude</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token single-quoted-string string">\'longitude\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$faker</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">longitude</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token single-quoted-string string">\'address\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$faker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">streetAddress</span><span class="token punctuation">,</span>\n        <span class="token single-quoted-string string">\'city\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$faker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">city</span><span class="token punctuation">,</span>\n        <span class="token single-quoted-string string">\'state\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$faker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">state</span><span class="token punctuation">,</span>\n        <span class="token single-quoted-string string">\'postal_code\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$faker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">postcode</span><span class="token punctuation">,</span>\n        <span class="token single-quoted-string string">\'country\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$faker</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">country</span><span class="token punctuation">,</span>\n        <span class="token single-quoted-string string">\'rating\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$faker</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">numberBetween</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token single-quoted-string string">\'featured\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$faker</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">numberBetween</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token single-quoted-string string">\'verified\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$faker</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">numberBetween</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token variable">$factory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">state</span><span class="token punctuation">(</span>YourAppName\\<span class="token package">YourModelName</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">\'product\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n    <span class="token single-quoted-string string">\'category\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token single-quoted-string string">\'Product\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<blockquote>\n<p>Use <em>states</em> to add extra data or modify existing params in your fake Model entry. <code class="language-text">factory(YourModelName::class)-&gt;state(&#39;product&#39;);</code>Works great if you need to have control over a model\'s specific parameter(s), like setting a user as an admin or customer. In this case, we set the post\'s category.</p>\n</blockquote>\n<h2>Handling JWT</h2>\n<p>If you noticed, I have a trait on the abstract class called <code class="language-text">AttachJwtToken</code>. I use Laravel\'s Passport package and connect to the API using OAuth2 authentication. Because of this, all JSON requests in tests require the proper authorization headers (with a JWT for the user).</p>\n<p>The <code class="language-text">AttachJwtToken</code> trait handles this process for us. I found this originally <a href="https://gist.github.com/jgrossi/4b1364e20418eca3ca937e70550c1823">on Github by @jgrossi</a> and based my code off it. It checks for an existing user (which you can pass in using the <code class="language-text">loginAs</code> method), and if no user is found, creates one, and returns a JWT for the user (using Laravel Passport\'s built in <code class="language-text">createToken()</code> function)</p>\n<p><a href="https://gist.github.com/whoisryosuke/2ee866ba6c32af5b4614ac6136a0012a">Check out my full source code on Gist</a></p>\n<h2>It\'s that simple!</h2>\n<p>It really is this <strong>simple</strong> to test your API <em>(if it\'s a simple CRUD API).</em> </p>\n<p>The hardest part of researching testing was feeling secure in the amount of information I\'d accrued. At the end of the day, when you look at the source code, there are only so many testing methods Laravel/PHPUnit provides. You assert one thing or another, whether it\'s the status code or JSON itself, or mock users using the <code class="language-text">actingAs($user)</code>.</p>\n<p>What becomes <strong>more complex</strong> are tasks like replicating features that span across multiple controllers, jobs, services, etc -- or mocking functionality like image storage. Or just creating factories for all your models. </p>\n<p>Testing is easy, setting up the proper conditions becomes the true <em>test</em>.</p>\n<p>Hope this helps your API TDD 🤘\nRyo</p>\n<hr>\n<p><strong>References</strong>:</p>\n<ul>\n<li><a href="https://gist.github.com/whoisryosuke/2ee866ba6c32af5b4614ac6136a0012a">Attach JWT Token to Test snippet</a></li>\n<li><a href="https://laravel.com/docs/5.6/http-tests#testing-json-apis">Laravel Docs - Testing JSON APIs</a></li>\n<li><a href="https://github.com/fzaninotto/Faker#fakerprovideruuid">Faker docs</a></li>\n<li><a href="https://course.testdrivenlaravel.com/">Test Driven Laravel course (paid with free samples via email)</a></li>\n<li><a href="https://dev.to/lechatthecat/how-to-use-phpunit-for-laravel-3d3c">Using PHPUnit for Laravel Testing</a></li>\n<li><a href="https://dev.to/fatboyxpc/laravel-testing-woes-token-mismatch-28pd">Laravel Testing Woes: Token Mismatch</a></li>\n</ul>',
frontmatter:{title:"Adding testing to a Laravel API 📝",cover_image:{publicURL:"/static/Adding-testing-to-a-Laravel-API-1920px-1e020cc22000c4bc9fc2a2eded8878f5.jpg",childImageSharp:{sizes:{src:"/static/Adding-testing-to-a-Laravel-API-1920px-1e020cc22000c4bc9fc2a2eded8878f5-4e8db.jpg",srcSet:"/static/Adding-testing-to-a-Laravel-API-1920px-1e020cc22000c4bc9fc2a2eded8878f5-7cc04.jpg 310w,\n/static/Adding-testing-to-a-Laravel-API-1920px-1e020cc22000c4bc9fc2a2eded8878f5-69042.jpg 620w,\n/static/Adding-testing-to-a-Laravel-API-1920px-1e020cc22000c4bc9fc2a2eded8878f5-4e8db.jpg 1240w,\n/static/Adding-testing-to-a-Laravel-API-1920px-1e020cc22000c4bc9fc2a2eded8878f5-50ab1.jpg 1860w,\n/static/Adding-testing-to-a-Laravel-API-1920px-1e020cc22000c4bc9fc2a2eded8878f5-e738f.jpg 1920w"}}},date:"03 August, 2018",tags:["laravel","tdd","testing","api","php","phpunit"]},fields:{slug:"/blog/2018/adding-testing-to-laravel-api/"}}},{node:{html:'<p>Just copy this into a <code class="language-text">docker-compose.yml</code> in your project root, and then run <code class="language-text">docker-compose up -d</code> 🚀 </p>\n<div class="gatsby-highlight">\n      <pre class="language-yml"><code class="language-yml">version: &quot;2&quot;\nservices:\n  my-wpdb:\n    image: mariadb\n    ports:\n      - &quot;8081:3306&quot;\n    environment:\n      MYSQL_ROOT_PASSWORD: root\n  my-wp:\n    image: wordpress\n    volumes:\n      - ./:/var/www/html\n    ports:\n      - &quot;8080:80&quot;\n    links:\n      - my-wpdb:mysql\n    environment:\n      WORDPRESS_DB_PASSWORD: root</code></pre>\n      </div>\n<p>Hope that helps,\nRyo</p>\n<hr>\n<p><strong>References</strong></p>\n<ul>\n<li><a href="https://twitter.com/whoisryosuke/status/1006325273900380160">Original tweet</a></li>\n<li><a href="https://gist.github.com/whoisryosuke/77da2fbe1c5ce782a0908cb1e8d17fe7">See the code gist</a></li>\n</ul>',frontmatter:{title:"shortcode - 🐋 Docker for Wordpress made easy",cover_image:{publicURL:"/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac.jpg",childImageSharp:{sizes:{src:"/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-4e8db.jpg",srcSet:"/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-7cc04.jpg 310w,\n/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-69042.jpg 620w,\n/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-4e8db.jpg 1240w,\n/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-50ab1.jpg 1860w,\n/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-e738f.jpg 1920w"}}},date:"11 June, 2018",tags:["laravel","php","api","shortcode","code snippet","tips"]},fields:{slug:"/blog/2018/shortcode-docker-for-wordpress-made-easy/"}}}]}},pathContext:{tag:"php",slug:"/blog/2018/how-to-create-a-php-package-for-composer/"}}}});
//# sourceMappingURL=path---blog-2018-how-to-create-a-php-package-for-composer-050f683c9eb4013df9fb.js.map