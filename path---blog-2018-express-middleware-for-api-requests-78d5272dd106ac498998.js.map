{"version":3,"sources":["webpack:///path---blog-2018-express-middleware-for-api-requests-78d5272dd106ac498998.js","webpack:///./.cache/json/blog-2018-express-middleware-for-api-requests.json"],"names":["webpackJsonp","558","module","exports","data","blog","html","frontmatter","title","cover_image","publicURL","childImageSharp","sizes","tracedSVG","src","srcSet","date","tags","section","fields","slug","relatedPosts","edges","node","pathContext","tag"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,KAAA,utoBAA+rnBC,aAA4uCC,MAAA,sCAAAC,aAA6DC,UAAA,0FAAAC,iBAAyHC,OAASC,UAAA,siCAAAC,IAAA,gGAAAC,OAAA,+fAA+pDC,KAAA,gBAAAC,MAAA,4CAAAC,QAAA,QAA6FC,QAAWC,KAAA,oDAA0DC,cAAiBC,QAAUC,MAAQjB,KAAA,ynIAAAC,aAAyqIC,MAAA,gCAAAC,aAAuDC,UAAA,0EAAAC,iBAAyGC,OAASE,IAAA,gFAAAC,OAAA,+aAA6gBC,KAAA,qBAAAC,MAAA,kDAAsFE,QAAWC,KAAA,sCAA6CG,MAAQjB,KAAA;AAAww5CC,aAA0lEC,MAAA,8DAAAC,aAAqFC,UAAA,4GAAAC,iBAA2IC,OAASE,IAAA,kHAAAC,OAAA,ylBAAytBC,KAAA,kBAAAC,MAAA,4DAA6FE,QAAWC,KAAA,oEAA0EI,aAAgBC,IAAA,OAAAL,KAAA","file":"path---blog-2018-express-middleware-for-api-requests-78d5272dd106ac498998.js","sourcesContent":["webpackJsonp([113968665129187],{\n\n/***/ 558:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"blog\":{\"html\":\"<p>Recently I needed to create a NextJS app that made authenticated API calls, and couldn't reveal it's credentials to the client. The solution was simple, I had to integrate Express into the app. But how do you fetch data from the API and pass it down to a page?</p>\\n<blockquote>\\n<p>This process assumes you have an environment setup with NextJS, Express, an isomorphic fetch solution, and dotenv (for ENV variables). If you follow the NextJS guide for dynamic routing you be mostly there. But it should be pretty easy to adapt to other server frameworks.</p>\\n</blockquote>\\n<h2>Async or bust</h2>\\n<p>I tried to first fetch the data in a separate function and call it before the page was rendered in the route:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> credentials <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  method<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'get'</span><span class=\\\"token punctuation\\\">,</span>\\n  headers<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'Content-Type'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'application/json'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'Authorization'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Basic '</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token function\\\">btoa</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_USER <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\":\\\"</span> <span class=\\\"token operator\\\">+</span> process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_VENDOR<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fetchApi</span> <span class=\\\"token punctuation\\\">(</span>endpoint<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_URL <span class=\\\"token operator\\\">+</span> endpoint<span class=\\\"token punctuation\\\">,</span> credentials<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>r <span class=\\\"token operator\\\">=></span> r<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n    server<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">fetchApi</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities/v1/'</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">return</span> data<span class=\\\"token punctuation\\\">)</span>\\n\\n      <span class=\\\"token keyword\\\">return</span> app<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>This resulted in the page rendering and loading, and the data loading afterwards. Simple mistake, especially if you come from a background that isn't asynchronous. </p>\\n<p>But how do you create an async Express route? Shockingly easily apparently:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    server<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetchApi</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities/v1/'</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">return</span> data<span class=\\\"token punctuation\\\">)</span>\\n\\n      <span class=\\\"token keyword\\\">return</span> app<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Add an async before the function that renders your route -- *because don't stress it, it's easy to forget that you're working <strong>inside</strong> a function*. Now you just slap an await on Promise you want to fetch before page load.</p>\\n<h2>But can we make it reusable?</h2>\\n<p>I needed to fetch data across many routes, with many different requests to different endpoints. Rather than repeating code in every route to make the API request, we make a <strong>middleware</strong> that does it and dumps the data in the <code class=\\\"language-text\\\">res.locals</code> (which is accessible in our route).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// Credentials for authenticated fetch calls to API</span>\\n<span class=\\\"token keyword\\\">const</span> credentials <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  method<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'get'</span><span class=\\\"token punctuation\\\">,</span>\\n  headers<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'Content-Type'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'application/json'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'Authorization'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Basic '</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token function\\\">btoa</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_USER <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\":\\\"</span> <span class=\\\"token operator\\\">+</span> process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_VENDOR<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Facade for fetch preloaded with authentication credentials\\n * to easily use in any other function\\n */</span>\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fetchApi</span> <span class=\\\"token punctuation\\\">(</span>endpoint<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_URL <span class=\\\"token operator\\\">+</span> endpoint<span class=\\\"token punctuation\\\">,</span> credentials<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>r <span class=\\\"token operator\\\">=></span> r<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * A function that returns the middleware function\\n * We nest the middleware in a function so we can \\n * pass an endpoint, making the middleware more reusable\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span>endpoint<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    \\n    <span class=\\\"token comment\\\">/**\\n     * Here we create an async function so\\n     * we can load the data before the page renders\\n     */</span>\\n    <span class=\\\"token keyword\\\">const</span> fetchData <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetchApi</span><span class=\\\"token punctuation\\\">(</span>endpoint<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token comment\\\">// We place the data in res.locals to access in the route later</span>\\n          res<span class=\\\"token punctuation\\\">.</span>locals<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token operator\\\">=</span> data\\n          <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>        \\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">fetchData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">prepare</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> server <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">express</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    server<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities/v1/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> app<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> data<span class=\\\"token punctuation\\\">:</span> res<span class=\\\"token punctuation\\\">.</span>locals<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>The code explains it a bit, but I had to nest the middleware function inside another function in order to pass the endpoint parameter. It's the way that JS works, similar to when you use <code class=\\\"language-text\\\">.map()</code> or <code class=\\\"language-text\\\">.filter()</code> on an array and you want to pass a parameter but can't. It's an encapsulation issue caused by the way Express interprets it's middleware, forcing you to wrap it what the React community calls a \\\"HOC\\\", or a function that returns another function (so you can pass additional \\\"props\\\" to the child function - or component in React's case).</p>\\n<p>Now in any route we simply add the middleware <code class=\\\"language-text\\\">getData(endpoint)</code>.</p>\\n<blockquote>\\n<p>You could also just do a fetch in the middleware <strong>without the async</strong> and rely on <code class=\\\"language-text\\\">next()</code> function in the promise chain. It'll hold the progress until the loading is complete and then provide the \\\"next\\\" function (usually the render function). I just left everything async just in case I refactor it out of the middleware.</p>\\n</blockquote>\\n<h3>Super middleware</h3>\\n<p>You could take this middleware and apply it to the entire application (rather than a single route), and use the <code class=\\\"language-text\\\">req.params</code> object to grab dynamic route variables (like a blog post ID, or in this case, a string that describes an endpoint). </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> endpoint <span class=\\\"token operator\\\">=</span> req<span class=\\\"token punctuation\\\">.</span>params<span class=\\\"token punctuation\\\">.</span>endpoint\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    \\n    <span class=\\\"token comment\\\">/**\\n     * Here we create an async function so\\n     * we can load the data before the page renders\\n     */</span>\\n    <span class=\\\"token keyword\\\">const</span> fetchData <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetchApi</span><span class=\\\"token punctuation\\\">(</span>endpoint<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token comment\\\">// We place the data in res.locals to access in the route later</span>\\n          res<span class=\\\"token punctuation\\\">.</span>locals<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token operator\\\">=</span> data\\n          <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>        \\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">fetchData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n   <span class=\\\"token comment\\\">// later in the app...</span>\\n    server<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/:endpoint'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> app<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> req<span class=\\\"token punctuation\\\">.</span>params<span class=\\\"token punctuation\\\">.</span>endpoint<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> data<span class=\\\"token punctuation\\\">:</span> res<span class=\\\"token punctuation\\\">.</span>locals<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>This allows for a completely dynamic connection to whichever API you're using, so depending on how large (and preferably simple) it is to access, you can use <strong>one middleware to rule them all.</strong></p>\\n<h2>I ❤️ middleware</h2>\\n<p>Middleware makes life so much easier, and makes application code so much slimmer. If you can find a way to simplify this code (without getting too deep into ES6 land), I challenge you to post it up in the comments! I'm always interested in discovering and sharing the most efficient solutions to common problems.</p>\\n<p>Hope that helps! ✌️\\nRyo </p>\\n<hr>\\n<p><strong>References</strong>:</p>\\n<ul>\\n<li><a href=\\\"https://expressjs.com/en/guide/using-middleware.html\\\">ExpressJS Middleware</a></li>\\n<li><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\\\">MDN: async function</a></li>\\n<li><a href=\\\"https://hackernoon.com/middleware-the-core-of-node-js-apps-ab01fee39200\\\">Middleware: THE core of node.js backend apps</a></li>\\n<li><a href=\\\"https://medium.com/@Abazhenov/using-async-await-in-express-with-node-8-b8af872c0016\\\">Async Express routes</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Express Middleware for API Requests\",\"cover_image\":{\"publicURL\":\"/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b.jpg\",\"childImageSharp\":{\"sizes\":{\"tracedSVG\":\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='267' viewBox='0 0 400 267' version='1'%3E%3Cpath d='M0 74c0 50 0 73 1 72l3-2c2 0 2 0 1-1-2-2-1-3 2-3 1 1 4 0 6-1h3l2-1 2-2 4-2 8-4 5-2 3-1h4l2-2c2-1 3-1 2-4 0-2 0-3 2-4 1-1 2-2 1-3l1-2h1l2-3 2-2 2-1 4 1c4 1 7 4 7 6l2-4 2-1 2-1h1l1 2 3 3 2-2c1-3 3-4 2-1h1l3-1 2-1 2-1 2 1 3 1c2 0 2 0 1-1v-1l-1-1c-2-1-1-1 3-1l5 1h6c1-1 1 0 1 1s0 2 1 1 6 0 6 1h4l3 1h4l-2-2-4-1c-2 1-5 1-5-1l2-1 1 1h2c3-2 5-1 5 1 1 2 1 2 3 2 5-2 9-2 9-1v1l2-1-1-1-1-1 2-1c2 1 2 1 2 3l1 2 1-1 1-1v2h2l1-2 10 1 1-1-3-1v-1h10l2 1v1h4c5 0 6-1 3-1l-3-1 7-1c3 0 5 0 4 1l-2 1-2 1c-2 0-2 0-1 1l4 4 1 1 1-2h1v3l1 1 1-2c1-2 2-2 17-2h24l4-1 4-1 4-1 4-1 2-1 3-1-2-1c-2 0-3-1-3-2l2-2a189 189 0 0 0 10 0l-4 1h4c5 0 8-2 5-3s-1-2 3-2c3 1 4 1 5-1v-3l-1 1c-1 2-8 1-8-1s1-2 4-2l4-1 4-1c4 1 7 0 7-2l3-3c5-2 7-4 7-5-1-1 0-2 2-3 3-1 4-2 5-4 0-2 2-3 2-3l2-2 2-2c1 0 3-1 4-5a64 64 0 0 1 7-11l1-3 1-4c1-2-1-7-3-9l-1-4-3-4-2-1 5-1 5-1-5-1c-5 0-5 0-4-2l1-2-2 1-3 1c-3 0-3 0-3-5V8h16V0H0v74' fill='lightgray' fill-rule='evenodd'/%3E%3C/svg%3E\",\"src\":\"/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-4e8db.jpg\",\"srcSet\":\"/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-7cc04.jpg 310w,\\n/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-69042.jpg 620w,\\n/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-4e8db.jpg 1240w,\\n/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-50ab1.jpg 1860w,\\n/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-e738f.jpg 1920w\"}}},\"date\":\"23 July, 2018\",\"tags\":[\"nextjs\",\"express\",\"js\",\"api\",\"es6\",\"tips\"],\"section\":\"blog\"},\"fields\":{\"slug\":\"/blog/2018/express-middleware-for-api-requests/\"}},\"relatedPosts\":{\"edges\":[{\"node\":{\"html\":\"<p>As I'm starting to prepare for delivering talks and presentations, I've decided to upgrade my slideshow game to use React components 📈💁‍♀️</p>\\n<p>As a React developer, it's only natural to want to include real example of my work inside my presentations, and <a href=\\\"https://github.com/mdx-js/mdx\\\">MDX</a> makes that possible using a mix of Markdown and JSX.</p>\\n<p>But rather than building my own slideshow framework in React, I decided to utilize <a href=\\\"https://github.com/jxnblk/mdx-deck\\\"><strong>mdx-deck</strong></a>, a framework and CLI for creating MDX-powered slideshows. It makes creating slide decks as simple as writing Markdown, and provides indispensable features:</p>\\n<ul>\\n<li>📝 Write presentations in markdown</li>\\n<li>⚛️ Import and use React components</li>\\n<li>💅 Customizable themes and components</li>\\n<li>0️⃣ Zero-config CLI</li>\\n<li>💁 Presenter mode</li>\\n<li>📓 Speaker notes</li>\\n<li><a href=\\\"https://dazzling-kepler-4cc40d.netlify.com/\\\">See the demo site here</a></li>\\n</ul>\\n<img src=\\\"/mdx-deck boilerplate 3-9bdbc1b85f47dc9534799424244ca8df.gif\\\" alt=\\\"Example of the slide deck in action\\\">\\n<p>To make my presentation as accessible as possible, I opted to use <a href=\\\"http://netlify.com\\\"><strong>Netlify</strong></a> to host it. However, the <a href=\\\"https://github.com/jxnblk/mdx-deck/blob/master/docs/exporting.md\\\">mdx-deck export docs</a> are missing some key details. To deploy on Netlify, you point it to a distribution folder that all static assets get compiled to. I couldn't find that export folder in the docs, and had to <a href=\\\"https://github.com/jxnblk/mdx-deck/blob/master/cli.js\\\">hunt it down in the CLI's default Webpack configuration.</a></p>\\n<p>After a bit of research, I present - Deploying mdx-deck in 4 steps (or less!):</p>\\n<h2>📄 Setting up your project</h2>\\n<p>I just used the example MDX deck provided by in the mdx-deck repo. I copied it into a new folder, created a new git repo, and pushed it to Github.</p>\\n<p>You can clone my project to get started.</p>\\n<ol>\\n<li>Clone the project and add to your Github</li>\\n<li>Add the repo to Netlify</li>\\n</ol>\\n<p>or</p>\\n<ol>\\n<li><a href=\\\"https://app.netlify.com/start/deploy?repository=https://github.com/whoisryosuke/mdx-deck-netlify\\\">Click deploy here to Netlify</a></li>\\n</ol>\\n<h2>⚙️ Netlify settings</h2>\\n<p>In order to make sure our deck deploys properly using continuous integration, we have to configure Netlify to build and display our app.  </p>\\n<p>Go to your Deploy Settings (under the Deploys tab in your Netlify project/repo) and add the following settings:</p>\\n<ol>\\n<li>Set the build script to <code class=\\\"language-text\\\">npm run build</code></li>\\n<li>Set the deploy folder to <code class=\\\"language-text\\\">dist</code></li>\\n</ol>\\n<p>We give Netlify a build script to run each time we make a commit to the repo. And the deploy folder is the place where mdx-deck exports the static HTML/JS version, and by pointing Netlify there it displays our deck after building.</p>\\n<h2>Why Netlify? 🤨</h2>\\n<p>I found myself in a situation where I didn't have immediate access to a development environment (Node/NPM specifically). I thought of using something like <a href=\\\"http://codesandbox.io\\\">CodeSandbox</a>, but since I was running build scripts and not just importing modules, it wasn't suitable for projects like mdx-deck.</p>\\n<p>Hosting on Netlify allows me to utilize <a href=\\\"http://github.com\\\">Github</a> as an code editor/IDE, make changes to my deck's repo, and deploy those to Netlify immediately. It gives me the power of a development environment <em>(on a delay)</em> in the cloud. </p>\\n<p>This way, if I need to make quick changes to my talk, I can deploy them easily through web interfaces 👏👌</p>\\n<p><a href=\\\"https://dazzling-kepler-4cc40d.netlify.com/\\\">See the demo site here</a> | <a href=\\\"https://github.com/whoisryosuke/mdx-deck-netlify\\\">Source code</a></p>\\n<p>Hope that helps!\\nRyo</p>\\n<hr>\\n<p><strong>References</strong>:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/jxnblk/mdx-deck\\\">mdx-deck</a></li>\\n<li><a href=\\\"https://github.com/jxnblk/mdx-deck/blob/master/cli.js\\\">mdx-deck CLI (where you find the default export folder)</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Deploy MDX-Deck to Netlify 🚀\",\"cover_image\":{\"publicURL\":\"/static/mdx-deck-on-netlify-1900px-a24f9e73e297b6183318c3e2df10842c.jpg\",\"childImageSharp\":{\"sizes\":{\"src\":\"/static/mdx-deck-on-netlify-1900px-a24f9e73e297b6183318c3e2df10842c-4e8db.jpg\",\"srcSet\":\"/static/mdx-deck-on-netlify-1900px-a24f9e73e297b6183318c3e2df10842c-7cc04.jpg 310w,\\n/static/mdx-deck-on-netlify-1900px-a24f9e73e297b6183318c3e2df10842c-69042.jpg 620w,\\n/static/mdx-deck-on-netlify-1900px-a24f9e73e297b6183318c3e2df10842c-4e8db.jpg 1240w,\\n/static/mdx-deck-on-netlify-1900px-a24f9e73e297b6183318c3e2df10842c-50ab1.jpg 1860w,\\n/static/mdx-deck-on-netlify-1900px-a24f9e73e297b6183318c3e2df10842c-3a8b6.jpg 1900w\"}}},\"date\":\"13 September, 2018\",\"tags\":[\"react\",\"mdx\",\"javascript\",\"jsx\",\"guide\",\"tips\"]},\"fields\":{\"slug\":\"/blog/2018/mdx-deck-on-netlify/\"}}},{\"node\":{\"html\":\"<p>Recently the Kushy API finally reached a beta release of v1, and I redesigned the Kushy API documentation to use GatsbyJS. The documentation itself was hand-written in Markdown, with a structure inspired by most API docs (endpoints with descriptions, code snippets, and response examples). </p>\\n<p>This got pretty tedious pretty quick, and immediately becomes an issue when any small updates occur to the API and require manual modification of a separate doc repo. It became time to auto-generate our docs from our codebase, and discovering the best way to accomplish that within the Laravel framework.</p>\\n<p>The options were fairly slim after some research: </p>\\n<ol>\\n<li>Use <strong>Swagger</strong>, an API specification, to document our code and output a Swagger JSON file.</li>\\n<li>Document our code using <strong>docblocks</strong>, and find a generator to scan the code and convert those to Markdown. </li>\\n</ol>\\n<h2>Say No to Swagger</h2>\\n<p>I'm not a fan of the Swagger implementation in PHP. Writing documentation looks <em>atrocious</em>, makes it more difficult to read, and adds excessive code to my production codebase. I'd rather write standard docblocks for PHP and use those as the basis for the API documentation.</p>\\n<h3>\\\"Screw You, I Prefer Swagger\\\"</h3>\\n<p>It's cool, I understand the ease of the Swagger specification. It was awesome being able to run a script and generating a JSON file I could import into other libraries/frameworks/generators. If you prefer using Swagger, I recommend using the <a href=\\\"https://github.com/InfyOmLabs/laravel-generator\\\">InfyOm Laravel Generator</a>. </p>\\n<p>You can generate your entire API with a fairly simple CLI. In a single <code class=\\\"language-text\\\">artisan</code> command, and a few answered questions, you have yourself a controller, model, migration, resource, validation, and testing for your API. It also can generate Swagger-approved documentation for the API controllers it creates with a simple change of the config.</p>\\n<h2>Easy to write docs</h2>\\n<p>Luckily there's a package that kind of accomplishes what we need - <a href=\\\"https://github.com/mpociot/laravel-apidoc-generator\\\">Laravel API Documentation Generator</a>. It scans your API endpoints and actually runs them to generate the documentation (automatically creating JSON response objects for your docs). It combines the PHP docblocks your write above the controller's classes/methods with request validation, JSON responses, and a table of contents.</p>\\n<p>If you're running Laravel 5.5+, just run this line to install the package:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">composer require mpociot/laravel-apidoc-generator\\n</code></pre>\\n      </div>\\n<p>And start generating docs using the Artisan CLI command:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">php artisan api:generate --routePrefix<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"api/*\\\"</span>\\n</code></pre>\\n      </div>\\n<p>There are plenty of benefits of using this package:</p>\\n<h3>Custom written content</h3>\\n<p>You're not limited to auto-generated docs, this package is also capable of appending other Markdown file's content. Great for writing additional docs for authentication.</p>\\n<h3>Authenticating API requests</h3>\\n<p>It even handles dirty processes, like authenticating API calls:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">php artisan api:generate --routePrefix<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"api/*\\\"</span> --actAsUserId<span class=\\\"token operator\\\">=</span>1\\n</code></pre>\\n      </div>\\n<h3>Postman</h3>\\n<p>This package also generates a JSON 'collection' file for <a href=\\\"https://www.getpostman.com/\\\">Postman</a>, an app for querying APIs. Handy if you're like me and you test your API with it. <a href=\\\"https://www.getpostman.com/docs/v6/postman/collections/creating_collections\\\">You can import the collection</a> and have a folder full of all your endpoints.</p>\\n<h3>Don't comment code? Don't worry!</h3>\\n<p>Since this package analyzed your entire route file and queries each route for data, it'll generate API docs for every single route -- even if it doesn't have documentation/docblocks/comments! The generator creates a  \\\"general\\\" section which contains all the endpoints you didn't group inside <em>\\\"resources\\\"</em>.</p>\\n<h2>Issues with Auto-generation</h2>\\n<p>From the beginning, I was trepidatious about integrating a documentation generator. There are several pitfalls with automation that lend to more work being done by devs, or worse, code getting refactored immensely for it.</p>\\n<h3>One giant markdown file</h3>\\n<p>Despite being able to separate things into \\\"Resources\\\" with the API generator, the generator creates one massive Markdown file. Each \\\"resource\\\" or API controller is separated into sections, but without separate files, it makes parsing with frameworks like GatsbyJS more difficult.</p>\\n<h3>No comment blocks? Inaccurate docs.</h3>\\n<p>The initial issue I encountered with docblock, and <em>even Swagger documentation</em>, was the need for a physical file with comments for each endpoint. </p>\\n<p>What if I use a base class to extend my API controllers? All my major endpoints (index, store, etc) are all stored in the base controller, and I only add a couple extra endpoints to the actual endpoint controller. </p>\\n<p>The base controller:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n\\n<span class=\\\"token keyword\\\">namespace</span> <span class=\\\"token package\\\">App<span class=\\\"token punctuation\\\">\\\\</span>Http<span class=\\\"token punctuation\\\">\\\\</span>Controllers</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Illuminate<span class=\\\"token punctuation\\\">\\\\</span>Http<span class=\\\"token punctuation\\\">\\\\</span>Request</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">App<span class=\\\"token punctuation\\\">\\\\</span>Http<span class=\\\"token punctuation\\\">\\\\</span>Controllers<span class=\\\"token punctuation\\\">\\\\</span>Controller</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ApiController</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Controller</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">/**\\n     * Display a listing of the resource.\\n     *\\n     * @return \\\\Illuminate\\\\Http\\\\Response\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">index</span><span class=\\\"token punctuation\\\">(</span>Request <span class=\\\"token variable\\\">$request</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// Does API stuff</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>The generator combines comments from the extended classes, using docblocks from the base class. The issue? We get generic comments for any endpoint extended off the base class unless we re-instate the method in the endpoint controller.</p>\\n<p>This leads to the repeated code, excess code, and limitations on innovation.</p>\\n<h2>Hand-written > Docblocks > Swagger</h2>\\n<p>Unless you API is setup for it, or you're working with an immense API that's constantly changing -- it's better to just write docs by hand. </p>\\n<p><strong>It's great to use a generator as a start,</strong> since it'll generate all the endpoints/request objects/etc. But for <em>long-term</em> maintenance, it seems like even the generators aren't completely automated - and require so much maintenance that it overrides it's usefulness.</p>\\n<p>However, if you are looking for a generator that <strong>isn't Swagger based</strong>, the <a href=\\\"https://github.com/mpociot/laravel-apidoc-generator\\\">laravel-apidoc-generator by mpociot</a> does a solid enough job of generating docs. And <strong>if you're cool with Swagger</strong>, the Laravel Generator by InfyOmLabs does a great job of creating everything you need for an API (controller, validation, models, migrations, tests, everything!).</p>\\n<h2>Making it work (for me)</h2>\\n<p>The primary issue I had was the generated format of the Markdown. It was a single massive file that was compatible with doc generators like Slate, but not my GatsbyJS setup. For my Gatsby docs, they're generated from a <code class=\\\"language-text\\\">docs</code> folder with sub-folder for each resource group (<code class=\\\"language-text\\\">docs/endpoint/</code>). Then we create a file for each route (<code class=\\\"language-text\\\">docs/posts/get-all-posts.md</code>).</p>\\n<h3>Using Javascript</h3>\\n<p>My first instinct was to write a NodeJS script to parse through the massive Markdown file and split it up into the chunks I needed. I used NodeJS to read the file contents, markdown-js to parse the MD into a walkable tree - then into HTML, and turndown to convert the HTML back to MD.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> markdown <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"markdown\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>markdown<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> TurndownService <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"turndown\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> turndownService <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">TurndownService</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Grab API markdown master file and dump file into variable</span>\\n<span class=\\\"token keyword\\\">let</span> docs <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'public/docs/source/index.md'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'utf8'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Parse the markdown into a JSONML tree </span>\\n<span class=\\\"token comment\\\">// (giant array with objects that contain MD data)</span>\\n<span class=\\\"token comment\\\">// [</span>\\n<span class=\\\"token comment\\\">//     {</span>\\n<span class=\\\"token comment\\\">//         'header',</span>\\n<span class=\\\"token comment\\\">//         {</span>\\n<span class=\\\"token comment\\\">//             level: 1</span>\\n<span class=\\\"token comment\\\">//         },</span>\\n<span class=\\\"token comment\\\">//         'The actual header content'</span>\\n<span class=\\\"token comment\\\">//     },</span>\\n<span class=\\\"token comment\\\">// ]</span>\\n<span class=\\\"token keyword\\\">var</span> tree <span class=\\\"token operator\\\">=</span> markdown<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>docs<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> separateDocs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Loop through tree to find headers</span>\\n<span class=\\\"token comment\\\">// Whenever header is found, insert last collection, </span>\\n<span class=\\\"token comment\\\">// and make new collection variable to insert ongoing data into</span>\\n<span class=\\\"token comment\\\">// Each collection should contain name (used for filename) and data</span>\\n<span class=\\\"token keyword\\\">var</span> collection <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\ntree<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>element<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>element<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'header'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>element<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>level <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// Put collection the main doc array</span>\\n            <span class=\\\"token comment\\\">// Then wipe it out and start fresh</span>\\n            separateDocs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>collection<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n            collection <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n                <span class=\\\"token string\\\">'markdown'</span>\\n            <span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    collection<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>element<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    i<span class=\\\"token operator\\\">++</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// console.log(separateDocs);</span>\\n\\n<span class=\\\"token comment\\\">// Convert from JSONML to HTML then to MD</span>\\n<span class=\\\"token comment\\\">// Then save the file</span>\\n<span class=\\\"token keyword\\\">var</span> convertedDocs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\nseparateDocs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">var</span> header\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'header'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        header <span class=\\\"token operator\\\">=</span> doc<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        header <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'index'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">var</span> html <span class=\\\"token operator\\\">=</span> markdown<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">renderJsonML</span><span class=\\\"token punctuation\\\">(</span>markdown<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toHTMLTree</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> convertedMarkdown <span class=\\\"token operator\\\">=</span> turndownService<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">turndown</span><span class=\\\"token punctuation\\\">(</span>html<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    convertedDocs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>convertedMarkdown<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFile</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`tmp/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>header<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">.md`</span></span><span class=\\\"token punctuation\\\">,</span> convertedMarkdown<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The file was saved!\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>You can run this script using the CLI: <code class=\\\"language-text\\\">node generate-api-docs.js</code></p>\\n<p>After a bit of tinkering, I discovered that I could accomplish what I needed, but the source material became degraded. The conversion from MD -> JSON -> HTML -> MD was causing formatting issues.</p>\\n<h3>Back to the source</h3>\\n<p>I realized that altering the final product wasn't the way to go, and it'd be easier just to edit the generator's output code. After snooping around the source code, I found the method I needed: <code class=\\\"language-text\\\">writeMarkdown()</code>. With a bit of altering, here's what I ended up with:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\">    <span class=\\\"token comment\\\">/**\\n     * @param  Collection $parsedRoutes\\n     *\\n     * @return void\\n     */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">writeMarkdown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$parsedRoutes</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token variable\\\">$outputPath</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'output'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token variable\\\">$infoText</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">view</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'apidoc::partials.info'</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'outputPath'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">ltrim</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">'public/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'showPostmanCollectionButton'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">!</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'noPostmanCollection'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token variable\\\">$parsedRouteOutput</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$parsedRoutes</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$routeGroup</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token variable\\\">$routeGroup</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'output'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>string<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token function\\\">view</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'apidoc::partials.route'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'parsedRoute'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token variable\\\">$documentarian</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Documentarian</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token variable\\\">$parsedRouteOutput</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">each</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$routeGroup</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">use</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$infoText</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token variable\\\">$routeGroup</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">each</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">use</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$infoText</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">// dd($route);</span>\\n\\n                <span class=\\\"token comment\\\">// $cleanResource = preg_replace('/\\\\s+/', '', $route['resource']);</span>\\n                <span class=\\\"token variable\\\">$routeUrl</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">str_replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'api/v1/'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">''</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'uri'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$safeUrl</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">str_replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'/'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">'-'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$routeUrl</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$safeUrl</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">str_replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'{'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">''</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$safeUrl</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$safeUrl</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">str_replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'}'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">''</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$safeUrl</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$cleanResource</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">explode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'\\\\n'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'resource'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$cleanResource</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$cleanResource</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token comment\\\">// $cleanResource = trim(preg_replace('/\\\\s+/', ' ', $route['resource']));</span>\\n                <span class=\\\"token variable\\\">$title</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">strtolower</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'methods'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">.</span> <span class=\\\"token single-quoted-string string\\\">'-'</span> <span class=\\\"token punctuation\\\">.</span> <span class=\\\"token variable\\\">$safeUrl</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token variable\\\">$folder</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">DIRECTORY_SEPARATOR</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token single-quoted-string string\\\">'dist'</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">DIRECTORY_SEPARATOR</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">strtolower</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$cleanResource</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">createFolder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$folder</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$targetFile</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$folder</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">DIRECTORY_SEPARATOR</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token variable\\\">$title</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token single-quoted-string string\\\">'.md'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token variable\\\">$frontmatter</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">view</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'apidoc::partials.frontmatter'</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'method'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'methods'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'route'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$routeUrl</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'title'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'title'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'date'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'Y-m-d'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token variable\\\">$markdown</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">view</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'apidoc::singledoc'</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'writeCompareFile'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'frontmatter'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$frontmatter</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'infoText'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$infoText</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'outputPath'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'output'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'showPostmanCollectionButton'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">!</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'noPostmanCollection'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'route'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'group'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$cleanResource</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token comment\\\">// Write output file</span>\\n                <span class=\\\"token function\\\">file_put_contents</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$targetFile</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$markdown</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'Wrote '</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token variable\\\">$title</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token single-quoted-string string\\\">' to: '</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'noPostmanCollection'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!==</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'Generating Postman collection'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n            <span class=\\\"token function\\\">file_put_contents</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">DIRECTORY_SEPARATOR</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token single-quoted-string string\\\">'collection.json'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">generatePostmanCollection</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$parsedRoutes</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Make sure to add this helper method to the <code class=\\\"language-text\\\">GenerateDocumentation</code> class (I threw it on the bottom):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\">    <span class=\\\"token comment\\\">/**\\n     * Create folder if none exists\\n     *\\n     * @param string $folder\\n     * @return void\\n     */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">createFolder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$folder</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">file_exists</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$folder</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">mkdir</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$folder</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0777</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>And here's the view file <code class=\\\"language-text\\\">singledoc.blade.php</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-blade\\\"><code class=\\\"language-blade\\\">---\\n{!! $frontmatter !!}\\n---\\n\\n@if($group)\\n# {{$group}}\\n@endif\\n@if($writeCompareFile === true)\\n{!! $route[&#39;output&#39;]!!}\\n@else\\n{!! isset($route[&#39;modified_output&#39;]) ? $route[&#39;modified_output&#39;] : $route[&#39;output&#39;]!!}\\n@endif</code></pre>\\n      </div>\\n<ol>\\n<li>We loop through the <code class=\\\"language-text\\\">$routeGroupsOutput</code>, which is a collection of routes sorted by group name. </li>\\n<li>Then we loop through each group to get the routes for each resource (each section labeled <code class=\\\"language-text\\\">@Resource</code> in your docblocks). </li>\\n<li>We fill a view file with our route data, and then save the view to a Markdown file (using <code class=\\\"language-text\\\">file_put_contents()</code>).</li>\\n</ol>\\n<blockquote>\\n<p>I removed the compare functionality temporarily. Usually this package creates two Markdown files and compares for differences on generation, but I haven't tried getting it to work with the new setup.</p>\\n</blockquote>\\n<h3>Results</h3>\\n<p>After editing the package a bit, I was able to accomplish what I needed, and create - at the very least - a basis for my API docs. Ideally, if I work out the kinks, this could work as an automated solution to generate docs on the fly.But hey, we'll see how well that works in practice. Things always work different when pushed past thought and into motion.</p>\\n<p><strong>The kinks so far</strong>:</p>\\n<ul>\\n<li>Local development URL shows in queried JSON results</li>\\n<li>Can't authenticate requests using User ID. Not sure if it's because I use UUIDs or my middleware setup.</li>\\n<li>Getting rid of HTML comparison comments</li>\\n<li>Delete <code class=\\\"language-text\\\">public/docs/</code> folder and make sure it doesn't generate</li>\\n<li>Installing the forked package (or creating a new package to <code class=\\\"language-text\\\">composer install</code>)</li>\\n</ul>\\n<p>You can find <a href=\\\"https://github.com/whoisryosuke/laravel-apidoc-generator\\\">my fork of the Laravel API Doc Generator here</a>.</p>\\n<p>Hope this helped with your API automation search! 🍻\\nRyo</p>\\n<hr>\\n<p><strong>References</strong>:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/mpociot/laravel-apidoc-generator\\\">laravel-apidoc-generator</a></li>\\n<li><a href=\\\"https://github.com/InfyOmLabs/laravel-generator\\\">InfyOmLabs Laravel Generator</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"2 ways to auto-generate documentation for Laravel APIs 📄⚙️\",\"cover_image\":{\"publicURL\":\"/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51.jpg\",\"childImageSharp\":{\"sizes\":{\"src\":\"/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-4e8db.jpg\",\"srcSet\":\"/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-7cc04.jpg 310w,\\n/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-69042.jpg 620w,\\n/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-4e8db.jpg 1240w,\\n/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-50ab1.jpg 1860w,\\n/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-e738f.jpg 1920w\"}}},\"date\":\"06 August, 2018\",\"tags\":[\"laravel\",\"api\",\"documentation\",\"workflow\",\"guide\",\"tips\"]},\"fields\":{\"slug\":\"/blog/2018/adding-auto-generated-docs-to-laravel-api-kushy/\"}}}]}},\"pathContext\":{\"tag\":\"tips\",\"slug\":\"/blog/2018/express-middleware-for-api-requests/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-2018-express-middleware-for-api-requests-78d5272dd106ac498998.js","module.exports = {\"data\":{\"blog\":{\"html\":\"<p>Recently I needed to create a NextJS app that made authenticated API calls, and couldn't reveal it's credentials to the client. The solution was simple, I had to integrate Express into the app. But how do you fetch data from the API and pass it down to a page?</p>\\n<blockquote>\\n<p>This process assumes you have an environment setup with NextJS, Express, an isomorphic fetch solution, and dotenv (for ENV variables). If you follow the NextJS guide for dynamic routing you be mostly there. But it should be pretty easy to adapt to other server frameworks.</p>\\n</blockquote>\\n<h2>Async or bust</h2>\\n<p>I tried to first fetch the data in a separate function and call it before the page was rendered in the route:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> credentials <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  method<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'get'</span><span class=\\\"token punctuation\\\">,</span>\\n  headers<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'Content-Type'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'application/json'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'Authorization'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Basic '</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token function\\\">btoa</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_USER <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\":\\\"</span> <span class=\\\"token operator\\\">+</span> process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_VENDOR<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fetchApi</span> <span class=\\\"token punctuation\\\">(</span>endpoint<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_URL <span class=\\\"token operator\\\">+</span> endpoint<span class=\\\"token punctuation\\\">,</span> credentials<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>r <span class=\\\"token operator\\\">=></span> r<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n    server<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">fetchApi</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities/v1/'</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">return</span> data<span class=\\\"token punctuation\\\">)</span>\\n\\n      <span class=\\\"token keyword\\\">return</span> app<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>This resulted in the page rendering and loading, and the data loading afterwards. Simple mistake, especially if you come from a background that isn't asynchronous. </p>\\n<p>But how do you create an async Express route? Shockingly easily apparently:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    server<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetchApi</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities/v1/'</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">return</span> data<span class=\\\"token punctuation\\\">)</span>\\n\\n      <span class=\\\"token keyword\\\">return</span> app<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Add an async before the function that renders your route -- *because don't stress it, it's easy to forget that you're working <strong>inside</strong> a function*. Now you just slap an await on Promise you want to fetch before page load.</p>\\n<h2>But can we make it reusable?</h2>\\n<p>I needed to fetch data across many routes, with many different requests to different endpoints. Rather than repeating code in every route to make the API request, we make a <strong>middleware</strong> that does it and dumps the data in the <code class=\\\"language-text\\\">res.locals</code> (which is accessible in our route).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// Credentials for authenticated fetch calls to API</span>\\n<span class=\\\"token keyword\\\">const</span> credentials <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  method<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'get'</span><span class=\\\"token punctuation\\\">,</span>\\n  headers<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'Content-Type'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'application/json'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'Authorization'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Basic '</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token function\\\">btoa</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_USER <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\":\\\"</span> <span class=\\\"token operator\\\">+</span> process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_VENDOR<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Facade for fetch preloaded with authentication credentials\\n * to easily use in any other function\\n */</span>\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fetchApi</span> <span class=\\\"token punctuation\\\">(</span>endpoint<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_URL <span class=\\\"token operator\\\">+</span> endpoint<span class=\\\"token punctuation\\\">,</span> credentials<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>r <span class=\\\"token operator\\\">=></span> r<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * A function that returns the middleware function\\n * We nest the middleware in a function so we can \\n * pass an endpoint, making the middleware more reusable\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span>endpoint<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    \\n    <span class=\\\"token comment\\\">/**\\n     * Here we create an async function so\\n     * we can load the data before the page renders\\n     */</span>\\n    <span class=\\\"token keyword\\\">const</span> fetchData <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetchApi</span><span class=\\\"token punctuation\\\">(</span>endpoint<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token comment\\\">// We place the data in res.locals to access in the route later</span>\\n          res<span class=\\\"token punctuation\\\">.</span>locals<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token operator\\\">=</span> data\\n          <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>        \\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">fetchData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">prepare</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> server <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">express</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    server<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities/v1/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> app<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> data<span class=\\\"token punctuation\\\">:</span> res<span class=\\\"token punctuation\\\">.</span>locals<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>The code explains it a bit, but I had to nest the middleware function inside another function in order to pass the endpoint parameter. It's the way that JS works, similar to when you use <code class=\\\"language-text\\\">.map()</code> or <code class=\\\"language-text\\\">.filter()</code> on an array and you want to pass a parameter but can't. It's an encapsulation issue caused by the way Express interprets it's middleware, forcing you to wrap it what the React community calls a \\\"HOC\\\", or a function that returns another function (so you can pass additional \\\"props\\\" to the child function - or component in React's case).</p>\\n<p>Now in any route we simply add the middleware <code class=\\\"language-text\\\">getData(endpoint)</code>.</p>\\n<blockquote>\\n<p>You could also just do a fetch in the middleware <strong>without the async</strong> and rely on <code class=\\\"language-text\\\">next()</code> function in the promise chain. It'll hold the progress until the loading is complete and then provide the \\\"next\\\" function (usually the render function). I just left everything async just in case I refactor it out of the middleware.</p>\\n</blockquote>\\n<h3>Super middleware</h3>\\n<p>You could take this middleware and apply it to the entire application (rather than a single route), and use the <code class=\\\"language-text\\\">req.params</code> object to grab dynamic route variables (like a blog post ID, or in this case, a string that describes an endpoint). </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> endpoint <span class=\\\"token operator\\\">=</span> req<span class=\\\"token punctuation\\\">.</span>params<span class=\\\"token punctuation\\\">.</span>endpoint\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    \\n    <span class=\\\"token comment\\\">/**\\n     * Here we create an async function so\\n     * we can load the data before the page renders\\n     */</span>\\n    <span class=\\\"token keyword\\\">const</span> fetchData <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetchApi</span><span class=\\\"token punctuation\\\">(</span>endpoint<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token comment\\\">// We place the data in res.locals to access in the route later</span>\\n          res<span class=\\\"token punctuation\\\">.</span>locals<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token operator\\\">=</span> data\\n          <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>        \\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">fetchData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n   <span class=\\\"token comment\\\">// later in the app...</span>\\n    server<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/:endpoint'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> app<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> req<span class=\\\"token punctuation\\\">.</span>params<span class=\\\"token punctuation\\\">.</span>endpoint<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> data<span class=\\\"token punctuation\\\">:</span> res<span class=\\\"token punctuation\\\">.</span>locals<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>This allows for a completely dynamic connection to whichever API you're using, so depending on how large (and preferably simple) it is to access, you can use <strong>one middleware to rule them all.</strong></p>\\n<h2>I ❤️ middleware</h2>\\n<p>Middleware makes life so much easier, and makes application code so much slimmer. If you can find a way to simplify this code (without getting too deep into ES6 land), I challenge you to post it up in the comments! I'm always interested in discovering and sharing the most efficient solutions to common problems.</p>\\n<p>Hope that helps! ✌️\\nRyo </p>\\n<hr>\\n<p><strong>References</strong>:</p>\\n<ul>\\n<li><a href=\\\"https://expressjs.com/en/guide/using-middleware.html\\\">ExpressJS Middleware</a></li>\\n<li><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\\\">MDN: async function</a></li>\\n<li><a href=\\\"https://hackernoon.com/middleware-the-core-of-node-js-apps-ab01fee39200\\\">Middleware: THE core of node.js backend apps</a></li>\\n<li><a href=\\\"https://medium.com/@Abazhenov/using-async-await-in-express-with-node-8-b8af872c0016\\\">Async Express routes</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Express Middleware for API Requests\",\"cover_image\":{\"publicURL\":\"/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b.jpg\",\"childImageSharp\":{\"sizes\":{\"tracedSVG\":\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='267' viewBox='0 0 400 267' version='1'%3E%3Cpath d='M0 74c0 50 0 73 1 72l3-2c2 0 2 0 1-1-2-2-1-3 2-3 1 1 4 0 6-1h3l2-1 2-2 4-2 8-4 5-2 3-1h4l2-2c2-1 3-1 2-4 0-2 0-3 2-4 1-1 2-2 1-3l1-2h1l2-3 2-2 2-1 4 1c4 1 7 4 7 6l2-4 2-1 2-1h1l1 2 3 3 2-2c1-3 3-4 2-1h1l3-1 2-1 2-1 2 1 3 1c2 0 2 0 1-1v-1l-1-1c-2-1-1-1 3-1l5 1h6c1-1 1 0 1 1s0 2 1 1 6 0 6 1h4l3 1h4l-2-2-4-1c-2 1-5 1-5-1l2-1 1 1h2c3-2 5-1 5 1 1 2 1 2 3 2 5-2 9-2 9-1v1l2-1-1-1-1-1 2-1c2 1 2 1 2 3l1 2 1-1 1-1v2h2l1-2 10 1 1-1-3-1v-1h10l2 1v1h4c5 0 6-1 3-1l-3-1 7-1c3 0 5 0 4 1l-2 1-2 1c-2 0-2 0-1 1l4 4 1 1 1-2h1v3l1 1 1-2c1-2 2-2 17-2h24l4-1 4-1 4-1 4-1 2-1 3-1-2-1c-2 0-3-1-3-2l2-2a189 189 0 0 0 10 0l-4 1h4c5 0 8-2 5-3s-1-2 3-2c3 1 4 1 5-1v-3l-1 1c-1 2-8 1-8-1s1-2 4-2l4-1 4-1c4 1 7 0 7-2l3-3c5-2 7-4 7-5-1-1 0-2 2-3 3-1 4-2 5-4 0-2 2-3 2-3l2-2 2-2c1 0 3-1 4-5a64 64 0 0 1 7-11l1-3 1-4c1-2-1-7-3-9l-1-4-3-4-2-1 5-1 5-1-5-1c-5 0-5 0-4-2l1-2-2 1-3 1c-3 0-3 0-3-5V8h16V0H0v74' fill='lightgray' fill-rule='evenodd'/%3E%3C/svg%3E\",\"src\":\"/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-4e8db.jpg\",\"srcSet\":\"/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-7cc04.jpg 310w,\\n/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-69042.jpg 620w,\\n/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-4e8db.jpg 1240w,\\n/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-50ab1.jpg 1860w,\\n/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-e738f.jpg 1920w\"}}},\"date\":\"23 July, 2018\",\"tags\":[\"nextjs\",\"express\",\"js\",\"api\",\"es6\",\"tips\"],\"section\":\"blog\"},\"fields\":{\"slug\":\"/blog/2018/express-middleware-for-api-requests/\"}},\"relatedPosts\":{\"edges\":[{\"node\":{\"html\":\"<p>As I'm starting to prepare for delivering talks and presentations, I've decided to upgrade my slideshow game to use React components 📈💁‍♀️</p>\\n<p>As a React developer, it's only natural to want to include real example of my work inside my presentations, and <a href=\\\"https://github.com/mdx-js/mdx\\\">MDX</a> makes that possible using a mix of Markdown and JSX.</p>\\n<p>But rather than building my own slideshow framework in React, I decided to utilize <a href=\\\"https://github.com/jxnblk/mdx-deck\\\"><strong>mdx-deck</strong></a>, a framework and CLI for creating MDX-powered slideshows. It makes creating slide decks as simple as writing Markdown, and provides indispensable features:</p>\\n<ul>\\n<li>📝 Write presentations in markdown</li>\\n<li>⚛️ Import and use React components</li>\\n<li>💅 Customizable themes and components</li>\\n<li>0️⃣ Zero-config CLI</li>\\n<li>💁 Presenter mode</li>\\n<li>📓 Speaker notes</li>\\n<li><a href=\\\"https://dazzling-kepler-4cc40d.netlify.com/\\\">See the demo site here</a></li>\\n</ul>\\n<img src=\\\"/mdx-deck boilerplate 3-9bdbc1b85f47dc9534799424244ca8df.gif\\\" alt=\\\"Example of the slide deck in action\\\">\\n<p>To make my presentation as accessible as possible, I opted to use <a href=\\\"http://netlify.com\\\"><strong>Netlify</strong></a> to host it. However, the <a href=\\\"https://github.com/jxnblk/mdx-deck/blob/master/docs/exporting.md\\\">mdx-deck export docs</a> are missing some key details. To deploy on Netlify, you point it to a distribution folder that all static assets get compiled to. I couldn't find that export folder in the docs, and had to <a href=\\\"https://github.com/jxnblk/mdx-deck/blob/master/cli.js\\\">hunt it down in the CLI's default Webpack configuration.</a></p>\\n<p>After a bit of research, I present - Deploying mdx-deck in 4 steps (or less!):</p>\\n<h2>📄 Setting up your project</h2>\\n<p>I just used the example MDX deck provided by in the mdx-deck repo. I copied it into a new folder, created a new git repo, and pushed it to Github.</p>\\n<p>You can clone my project to get started.</p>\\n<ol>\\n<li>Clone the project and add to your Github</li>\\n<li>Add the repo to Netlify</li>\\n</ol>\\n<p>or</p>\\n<ol>\\n<li><a href=\\\"https://app.netlify.com/start/deploy?repository=https://github.com/whoisryosuke/mdx-deck-netlify\\\">Click deploy here to Netlify</a></li>\\n</ol>\\n<h2>⚙️ Netlify settings</h2>\\n<p>In order to make sure our deck deploys properly using continuous integration, we have to configure Netlify to build and display our app.  </p>\\n<p>Go to your Deploy Settings (under the Deploys tab in your Netlify project/repo) and add the following settings:</p>\\n<ol>\\n<li>Set the build script to <code class=\\\"language-text\\\">npm run build</code></li>\\n<li>Set the deploy folder to <code class=\\\"language-text\\\">dist</code></li>\\n</ol>\\n<p>We give Netlify a build script to run each time we make a commit to the repo. And the deploy folder is the place where mdx-deck exports the static HTML/JS version, and by pointing Netlify there it displays our deck after building.</p>\\n<h2>Why Netlify? 🤨</h2>\\n<p>I found myself in a situation where I didn't have immediate access to a development environment (Node/NPM specifically). I thought of using something like <a href=\\\"http://codesandbox.io\\\">CodeSandbox</a>, but since I was running build scripts and not just importing modules, it wasn't suitable for projects like mdx-deck.</p>\\n<p>Hosting on Netlify allows me to utilize <a href=\\\"http://github.com\\\">Github</a> as an code editor/IDE, make changes to my deck's repo, and deploy those to Netlify immediately. It gives me the power of a development environment <em>(on a delay)</em> in the cloud. </p>\\n<p>This way, if I need to make quick changes to my talk, I can deploy them easily through web interfaces 👏👌</p>\\n<p><a href=\\\"https://dazzling-kepler-4cc40d.netlify.com/\\\">See the demo site here</a> | <a href=\\\"https://github.com/whoisryosuke/mdx-deck-netlify\\\">Source code</a></p>\\n<p>Hope that helps!\\nRyo</p>\\n<hr>\\n<p><strong>References</strong>:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/jxnblk/mdx-deck\\\">mdx-deck</a></li>\\n<li><a href=\\\"https://github.com/jxnblk/mdx-deck/blob/master/cli.js\\\">mdx-deck CLI (where you find the default export folder)</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Deploy MDX-Deck to Netlify 🚀\",\"cover_image\":{\"publicURL\":\"/static/mdx-deck-on-netlify-1900px-a24f9e73e297b6183318c3e2df10842c.jpg\",\"childImageSharp\":{\"sizes\":{\"src\":\"/static/mdx-deck-on-netlify-1900px-a24f9e73e297b6183318c3e2df10842c-4e8db.jpg\",\"srcSet\":\"/static/mdx-deck-on-netlify-1900px-a24f9e73e297b6183318c3e2df10842c-7cc04.jpg 310w,\\n/static/mdx-deck-on-netlify-1900px-a24f9e73e297b6183318c3e2df10842c-69042.jpg 620w,\\n/static/mdx-deck-on-netlify-1900px-a24f9e73e297b6183318c3e2df10842c-4e8db.jpg 1240w,\\n/static/mdx-deck-on-netlify-1900px-a24f9e73e297b6183318c3e2df10842c-50ab1.jpg 1860w,\\n/static/mdx-deck-on-netlify-1900px-a24f9e73e297b6183318c3e2df10842c-3a8b6.jpg 1900w\"}}},\"date\":\"13 September, 2018\",\"tags\":[\"react\",\"mdx\",\"javascript\",\"jsx\",\"guide\",\"tips\"]},\"fields\":{\"slug\":\"/blog/2018/mdx-deck-on-netlify/\"}}},{\"node\":{\"html\":\"<p>Recently the Kushy API finally reached a beta release of v1, and I redesigned the Kushy API documentation to use GatsbyJS. The documentation itself was hand-written in Markdown, with a structure inspired by most API docs (endpoints with descriptions, code snippets, and response examples). </p>\\n<p>This got pretty tedious pretty quick, and immediately becomes an issue when any small updates occur to the API and require manual modification of a separate doc repo. It became time to auto-generate our docs from our codebase, and discovering the best way to accomplish that within the Laravel framework.</p>\\n<p>The options were fairly slim after some research: </p>\\n<ol>\\n<li>Use <strong>Swagger</strong>, an API specification, to document our code and output a Swagger JSON file.</li>\\n<li>Document our code using <strong>docblocks</strong>, and find a generator to scan the code and convert those to Markdown. </li>\\n</ol>\\n<h2>Say No to Swagger</h2>\\n<p>I'm not a fan of the Swagger implementation in PHP. Writing documentation looks <em>atrocious</em>, makes it more difficult to read, and adds excessive code to my production codebase. I'd rather write standard docblocks for PHP and use those as the basis for the API documentation.</p>\\n<h3>\\\"Screw You, I Prefer Swagger\\\"</h3>\\n<p>It's cool, I understand the ease of the Swagger specification. It was awesome being able to run a script and generating a JSON file I could import into other libraries/frameworks/generators. If you prefer using Swagger, I recommend using the <a href=\\\"https://github.com/InfyOmLabs/laravel-generator\\\">InfyOm Laravel Generator</a>. </p>\\n<p>You can generate your entire API with a fairly simple CLI. In a single <code class=\\\"language-text\\\">artisan</code> command, and a few answered questions, you have yourself a controller, model, migration, resource, validation, and testing for your API. It also can generate Swagger-approved documentation for the API controllers it creates with a simple change of the config.</p>\\n<h2>Easy to write docs</h2>\\n<p>Luckily there's a package that kind of accomplishes what we need - <a href=\\\"https://github.com/mpociot/laravel-apidoc-generator\\\">Laravel API Documentation Generator</a>. It scans your API endpoints and actually runs them to generate the documentation (automatically creating JSON response objects for your docs). It combines the PHP docblocks your write above the controller's classes/methods with request validation, JSON responses, and a table of contents.</p>\\n<p>If you're running Laravel 5.5+, just run this line to install the package:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">composer require mpociot/laravel-apidoc-generator\\n</code></pre>\\n      </div>\\n<p>And start generating docs using the Artisan CLI command:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">php artisan api:generate --routePrefix<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"api/*\\\"</span>\\n</code></pre>\\n      </div>\\n<p>There are plenty of benefits of using this package:</p>\\n<h3>Custom written content</h3>\\n<p>You're not limited to auto-generated docs, this package is also capable of appending other Markdown file's content. Great for writing additional docs for authentication.</p>\\n<h3>Authenticating API requests</h3>\\n<p>It even handles dirty processes, like authenticating API calls:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">php artisan api:generate --routePrefix<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"api/*\\\"</span> --actAsUserId<span class=\\\"token operator\\\">=</span>1\\n</code></pre>\\n      </div>\\n<h3>Postman</h3>\\n<p>This package also generates a JSON 'collection' file for <a href=\\\"https://www.getpostman.com/\\\">Postman</a>, an app for querying APIs. Handy if you're like me and you test your API with it. <a href=\\\"https://www.getpostman.com/docs/v6/postman/collections/creating_collections\\\">You can import the collection</a> and have a folder full of all your endpoints.</p>\\n<h3>Don't comment code? Don't worry!</h3>\\n<p>Since this package analyzed your entire route file and queries each route for data, it'll generate API docs for every single route -- even if it doesn't have documentation/docblocks/comments! The generator creates a  \\\"general\\\" section which contains all the endpoints you didn't group inside <em>\\\"resources\\\"</em>.</p>\\n<h2>Issues with Auto-generation</h2>\\n<p>From the beginning, I was trepidatious about integrating a documentation generator. There are several pitfalls with automation that lend to more work being done by devs, or worse, code getting refactored immensely for it.</p>\\n<h3>One giant markdown file</h3>\\n<p>Despite being able to separate things into \\\"Resources\\\" with the API generator, the generator creates one massive Markdown file. Each \\\"resource\\\" or API controller is separated into sections, but without separate files, it makes parsing with frameworks like GatsbyJS more difficult.</p>\\n<h3>No comment blocks? Inaccurate docs.</h3>\\n<p>The initial issue I encountered with docblock, and <em>even Swagger documentation</em>, was the need for a physical file with comments for each endpoint. </p>\\n<p>What if I use a base class to extend my API controllers? All my major endpoints (index, store, etc) are all stored in the base controller, and I only add a couple extra endpoints to the actual endpoint controller. </p>\\n<p>The base controller:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n\\n<span class=\\\"token keyword\\\">namespace</span> <span class=\\\"token package\\\">App<span class=\\\"token punctuation\\\">\\\\</span>Http<span class=\\\"token punctuation\\\">\\\\</span>Controllers</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Illuminate<span class=\\\"token punctuation\\\">\\\\</span>Http<span class=\\\"token punctuation\\\">\\\\</span>Request</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">App<span class=\\\"token punctuation\\\">\\\\</span>Http<span class=\\\"token punctuation\\\">\\\\</span>Controllers<span class=\\\"token punctuation\\\">\\\\</span>Controller</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ApiController</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Controller</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">/**\\n     * Display a listing of the resource.\\n     *\\n     * @return \\\\Illuminate\\\\Http\\\\Response\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">index</span><span class=\\\"token punctuation\\\">(</span>Request <span class=\\\"token variable\\\">$request</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// Does API stuff</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>The generator combines comments from the extended classes, using docblocks from the base class. The issue? We get generic comments for any endpoint extended off the base class unless we re-instate the method in the endpoint controller.</p>\\n<p>This leads to the repeated code, excess code, and limitations on innovation.</p>\\n<h2>Hand-written > Docblocks > Swagger</h2>\\n<p>Unless you API is setup for it, or you're working with an immense API that's constantly changing -- it's better to just write docs by hand. </p>\\n<p><strong>It's great to use a generator as a start,</strong> since it'll generate all the endpoints/request objects/etc. But for <em>long-term</em> maintenance, it seems like even the generators aren't completely automated - and require so much maintenance that it overrides it's usefulness.</p>\\n<p>However, if you are looking for a generator that <strong>isn't Swagger based</strong>, the <a href=\\\"https://github.com/mpociot/laravel-apidoc-generator\\\">laravel-apidoc-generator by mpociot</a> does a solid enough job of generating docs. And <strong>if you're cool with Swagger</strong>, the Laravel Generator by InfyOmLabs does a great job of creating everything you need for an API (controller, validation, models, migrations, tests, everything!).</p>\\n<h2>Making it work (for me)</h2>\\n<p>The primary issue I had was the generated format of the Markdown. It was a single massive file that was compatible with doc generators like Slate, but not my GatsbyJS setup. For my Gatsby docs, they're generated from a <code class=\\\"language-text\\\">docs</code> folder with sub-folder for each resource group (<code class=\\\"language-text\\\">docs/endpoint/</code>). Then we create a file for each route (<code class=\\\"language-text\\\">docs/posts/get-all-posts.md</code>).</p>\\n<h3>Using Javascript</h3>\\n<p>My first instinct was to write a NodeJS script to parse through the massive Markdown file and split it up into the chunks I needed. I used NodeJS to read the file contents, markdown-js to parse the MD into a walkable tree - then into HTML, and turndown to convert the HTML back to MD.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> markdown <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"markdown\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>markdown<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> TurndownService <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"turndown\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> turndownService <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">TurndownService</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Grab API markdown master file and dump file into variable</span>\\n<span class=\\\"token keyword\\\">let</span> docs <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'public/docs/source/index.md'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'utf8'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Parse the markdown into a JSONML tree </span>\\n<span class=\\\"token comment\\\">// (giant array with objects that contain MD data)</span>\\n<span class=\\\"token comment\\\">// [</span>\\n<span class=\\\"token comment\\\">//     {</span>\\n<span class=\\\"token comment\\\">//         'header',</span>\\n<span class=\\\"token comment\\\">//         {</span>\\n<span class=\\\"token comment\\\">//             level: 1</span>\\n<span class=\\\"token comment\\\">//         },</span>\\n<span class=\\\"token comment\\\">//         'The actual header content'</span>\\n<span class=\\\"token comment\\\">//     },</span>\\n<span class=\\\"token comment\\\">// ]</span>\\n<span class=\\\"token keyword\\\">var</span> tree <span class=\\\"token operator\\\">=</span> markdown<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>docs<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> separateDocs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Loop through tree to find headers</span>\\n<span class=\\\"token comment\\\">// Whenever header is found, insert last collection, </span>\\n<span class=\\\"token comment\\\">// and make new collection variable to insert ongoing data into</span>\\n<span class=\\\"token comment\\\">// Each collection should contain name (used for filename) and data</span>\\n<span class=\\\"token keyword\\\">var</span> collection <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\ntree<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>element<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>element<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'header'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>element<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>level <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// Put collection the main doc array</span>\\n            <span class=\\\"token comment\\\">// Then wipe it out and start fresh</span>\\n            separateDocs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>collection<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n            collection <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n                <span class=\\\"token string\\\">'markdown'</span>\\n            <span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    collection<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>element<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    i<span class=\\\"token operator\\\">++</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// console.log(separateDocs);</span>\\n\\n<span class=\\\"token comment\\\">// Convert from JSONML to HTML then to MD</span>\\n<span class=\\\"token comment\\\">// Then save the file</span>\\n<span class=\\\"token keyword\\\">var</span> convertedDocs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\nseparateDocs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">var</span> header\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'header'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        header <span class=\\\"token operator\\\">=</span> doc<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        header <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'index'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">var</span> html <span class=\\\"token operator\\\">=</span> markdown<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">renderJsonML</span><span class=\\\"token punctuation\\\">(</span>markdown<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toHTMLTree</span><span class=\\\"token punctuation\\\">(</span>doc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> convertedMarkdown <span class=\\\"token operator\\\">=</span> turndownService<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">turndown</span><span class=\\\"token punctuation\\\">(</span>html<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    convertedDocs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>convertedMarkdown<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n    fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFile</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`tmp/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>header<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">.md`</span></span><span class=\\\"token punctuation\\\">,</span> convertedMarkdown<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The file was saved!\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>You can run this script using the CLI: <code class=\\\"language-text\\\">node generate-api-docs.js</code></p>\\n<p>After a bit of tinkering, I discovered that I could accomplish what I needed, but the source material became degraded. The conversion from MD -> JSON -> HTML -> MD was causing formatting issues.</p>\\n<h3>Back to the source</h3>\\n<p>I realized that altering the final product wasn't the way to go, and it'd be easier just to edit the generator's output code. After snooping around the source code, I found the method I needed: <code class=\\\"language-text\\\">writeMarkdown()</code>. With a bit of altering, here's what I ended up with:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\">    <span class=\\\"token comment\\\">/**\\n     * @param  Collection $parsedRoutes\\n     *\\n     * @return void\\n     */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">writeMarkdown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$parsedRoutes</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token variable\\\">$outputPath</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'output'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token variable\\\">$infoText</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">view</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'apidoc::partials.info'</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'outputPath'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">ltrim</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">'public/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'showPostmanCollectionButton'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">!</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'noPostmanCollection'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token variable\\\">$parsedRouteOutput</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$parsedRoutes</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$routeGroup</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token variable\\\">$routeGroup</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'output'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>string<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token function\\\">view</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'apidoc::partials.route'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'parsedRoute'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token variable\\\">$documentarian</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Documentarian</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token variable\\\">$parsedRouteOutput</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">each</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$routeGroup</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">use</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$infoText</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token variable\\\">$routeGroup</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">each</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">use</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$infoText</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">// dd($route);</span>\\n\\n                <span class=\\\"token comment\\\">// $cleanResource = preg_replace('/\\\\s+/', '', $route['resource']);</span>\\n                <span class=\\\"token variable\\\">$routeUrl</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">str_replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'api/v1/'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">''</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'uri'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$safeUrl</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">str_replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'/'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">'-'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$routeUrl</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$safeUrl</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">str_replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'{'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">''</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$safeUrl</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$safeUrl</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">str_replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'}'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token single-quoted-string string\\\">''</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$safeUrl</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$cleanResource</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">explode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'\\\\n'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'resource'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$cleanResource</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$cleanResource</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token comment\\\">// $cleanResource = trim(preg_replace('/\\\\s+/', ' ', $route['resource']));</span>\\n                <span class=\\\"token variable\\\">$title</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">strtolower</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'methods'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">.</span> <span class=\\\"token single-quoted-string string\\\">'-'</span> <span class=\\\"token punctuation\\\">.</span> <span class=\\\"token variable\\\">$safeUrl</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token variable\\\">$folder</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">DIRECTORY_SEPARATOR</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token single-quoted-string string\\\">'dist'</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">DIRECTORY_SEPARATOR</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">strtolower</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$cleanResource</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">createFolder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$folder</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token variable\\\">$targetFile</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$folder</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">DIRECTORY_SEPARATOR</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token variable\\\">$title</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token single-quoted-string string\\\">'.md'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token variable\\\">$frontmatter</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">view</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'apidoc::partials.frontmatter'</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'method'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'methods'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'route'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$routeUrl</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'title'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token single-quoted-string string\\\">'title'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'date'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'Y-m-d'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token variable\\\">$markdown</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">view</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'apidoc::singledoc'</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'writeCompareFile'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'frontmatter'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$frontmatter</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'infoText'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$infoText</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'outputPath'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'output'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'showPostmanCollectionButton'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">!</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'noPostmanCollection'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'route'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$route</span><span class=\\\"token punctuation\\\">)</span>\\n                    <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">with</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'group'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$cleanResource</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token comment\\\">// Write output file</span>\\n                <span class=\\\"token function\\\">file_put_contents</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$targetFile</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$markdown</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n                <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'Wrote '</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token variable\\\">$title</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token single-quoted-string string\\\">' to: '</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'noPostmanCollection'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!==</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'Generating Postman collection'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n            <span class=\\\"token function\\\">file_put_contents</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$outputPath</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">DIRECTORY_SEPARATOR</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token single-quoted-string string\\\">'collection.json'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">generatePostmanCollection</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$parsedRoutes</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Make sure to add this helper method to the <code class=\\\"language-text\\\">GenerateDocumentation</code> class (I threw it on the bottom):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\">    <span class=\\\"token comment\\\">/**\\n     * Create folder if none exists\\n     *\\n     * @param string $folder\\n     * @return void\\n     */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">createFolder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$folder</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">file_exists</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$folder</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">mkdir</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$folder</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0777</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>And here's the view file <code class=\\\"language-text\\\">singledoc.blade.php</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-blade\\\"><code class=\\\"language-blade\\\">---\\n{!! $frontmatter !!}\\n---\\n\\n@if($group)\\n# {{$group}}\\n@endif\\n@if($writeCompareFile === true)\\n{!! $route[&#39;output&#39;]!!}\\n@else\\n{!! isset($route[&#39;modified_output&#39;]) ? $route[&#39;modified_output&#39;] : $route[&#39;output&#39;]!!}\\n@endif</code></pre>\\n      </div>\\n<ol>\\n<li>We loop through the <code class=\\\"language-text\\\">$routeGroupsOutput</code>, which is a collection of routes sorted by group name. </li>\\n<li>Then we loop through each group to get the routes for each resource (each section labeled <code class=\\\"language-text\\\">@Resource</code> in your docblocks). </li>\\n<li>We fill a view file with our route data, and then save the view to a Markdown file (using <code class=\\\"language-text\\\">file_put_contents()</code>).</li>\\n</ol>\\n<blockquote>\\n<p>I removed the compare functionality temporarily. Usually this package creates two Markdown files and compares for differences on generation, but I haven't tried getting it to work with the new setup.</p>\\n</blockquote>\\n<h3>Results</h3>\\n<p>After editing the package a bit, I was able to accomplish what I needed, and create - at the very least - a basis for my API docs. Ideally, if I work out the kinks, this could work as an automated solution to generate docs on the fly.But hey, we'll see how well that works in practice. Things always work different when pushed past thought and into motion.</p>\\n<p><strong>The kinks so far</strong>:</p>\\n<ul>\\n<li>Local development URL shows in queried JSON results</li>\\n<li>Can't authenticate requests using User ID. Not sure if it's because I use UUIDs or my middleware setup.</li>\\n<li>Getting rid of HTML comparison comments</li>\\n<li>Delete <code class=\\\"language-text\\\">public/docs/</code> folder and make sure it doesn't generate</li>\\n<li>Installing the forked package (or creating a new package to <code class=\\\"language-text\\\">composer install</code>)</li>\\n</ul>\\n<p>You can find <a href=\\\"https://github.com/whoisryosuke/laravel-apidoc-generator\\\">my fork of the Laravel API Doc Generator here</a>.</p>\\n<p>Hope this helped with your API automation search! 🍻\\nRyo</p>\\n<hr>\\n<p><strong>References</strong>:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/mpociot/laravel-apidoc-generator\\\">laravel-apidoc-generator</a></li>\\n<li><a href=\\\"https://github.com/InfyOmLabs/laravel-generator\\\">InfyOmLabs Laravel Generator</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"2 ways to auto-generate documentation for Laravel APIs 📄⚙️\",\"cover_image\":{\"publicURL\":\"/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51.jpg\",\"childImageSharp\":{\"sizes\":{\"src\":\"/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-4e8db.jpg\",\"srcSet\":\"/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-7cc04.jpg 310w,\\n/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-69042.jpg 620w,\\n/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-4e8db.jpg 1240w,\\n/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-50ab1.jpg 1860w,\\n/static/Adding-auto-generated-documentation-for-a-Laravel-API-1920px-b777629eb1740a8fc18cbfca4bd9bb51-e738f.jpg 1920w\"}}},\"date\":\"06 August, 2018\",\"tags\":[\"laravel\",\"api\",\"documentation\",\"workflow\",\"guide\",\"tips\"]},\"fields\":{\"slug\":\"/blog/2018/adding-auto-generated-docs-to-laravel-api-kushy/\"}}}]}},\"pathContext\":{\"tag\":\"tips\",\"slug\":\"/blog/2018/express-middleware-for-api-requests/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-2018-express-middleware-for-api-requests.json\n// module id = 558\n// module chunks = 113968665129187"],"sourceRoot":""}