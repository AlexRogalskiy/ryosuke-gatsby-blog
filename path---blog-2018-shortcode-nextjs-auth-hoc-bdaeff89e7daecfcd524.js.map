{"version":3,"sources":["webpack:///path---blog-2018-shortcode-nextjs-auth-hoc-bdaeff89e7daecfcd524.js","webpack:///./.cache/json/blog-2018-shortcode-nextjs-auth-hoc.json"],"names":["webpackJsonp","568","module","exports","data","blog","html","frontmatter","title","cover_image","publicURL","childImageSharp","sizes","tracedSVG","src","srcSet","date","tags","section","fields","slug","relatedPosts","edges","node","pathContext","tag"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,KAAA,gpQAA+gQC,aAAgdC,MAAA,+DAAAC,aAAsFC,UAAA,uEAAAC,iBAAsGC,OAASC,UAAA,olDAAAC,IAAA,6EAAAC,OAAA,gaAA2lEC,KAAA,gBAAAC,MAAA,uDAAAC,QAAA,QAAwGC,QAAWC,KAAA,0CAAgDC,cAAiBC,QAAUC,MAAQjB,KAAA,o+JAAkgJC,aAA2oBC,MAAA,gDAAAC,aAAuEC,UAAA,0EAAAC,iBAAyGC,OAASE,IAAA,gFAAAC,OAAA,+aAA6gBC,KAAA,gBAAAC,MAAA,uCAAsEE,QAAWC,KAAA,+DAAsEG,MAAQjB,KAAA;AAA+rnBC,aAA4uCC,MAAA,sCAAAC,aAA6DC,UAAA,0FAAAC,iBAAyHC,OAASE,IAAA,gGAAAC,OAAA,+fAA6mBC,KAAA,gBAAAC,MAAA,6CAA4EE,QAAWC,KAAA,wDAA8DI,aAAgBC,IAAA,KAAAL,KAAA","file":"path---blog-2018-shortcode-nextjs-auth-hoc-bdaeff89e7daecfcd524.js","sourcesContent":["webpackJsonp([91820612913845],{\n\n/***/ 568:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"blog\":{\"html\":\"<p>Need to protect your NextJS pages behind a login? Use a HOC (higher-order component) to wrap your page components, check the #API token, and redirect users if it fails üôÖ‚Äç‚ôÇÔ∏è </p>\\n<p>Bonus: You can grab things from SSR like cookies or session data using the child's getInitialProps in the HOC üôå </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>Component<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span>\\n<span class=\\\"token keyword\\\">import</span> Router <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'next/router'</span>\\n<span class=\\\"token keyword\\\">import</span> AuthService <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./AuthService'</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">withAuth</span><span class=\\\"token punctuation\\\">(</span>AuthComponent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> Auth <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">AuthService</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://localhost'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Authenticated</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n      <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token function\\\">getInitialProps</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// Check if Page has a `getInitialProps`; if so, call it.</span>\\n        <span class=\\\"token keyword\\\">const</span> pageProps <span class=\\\"token operator\\\">=</span> AuthComponent<span class=\\\"token punctuation\\\">.</span>getInitialProps <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token keyword\\\">await</span> AuthComponent<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getInitialProps</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// Return props.</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>pageProps <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n\\n      <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n          isLoading<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n\\n      <span class=\\\"token function\\\">componentDidMount</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>Auth<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">loggedIn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          Router<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> isLoading<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n\\n      <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n          <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n          <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>isLoading <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">(</span>\\n              <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>LOADING<span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n              <span class=\\\"token operator\\\">&lt;</span>AuthComponent <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">}</span>  auth<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>Auth<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<blockquote class=\\\"twitter-tweet\\\" data-lang=\\\"en\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">üîê Need to protect your <a href=\\\"https://twitter.com/hashtag/NextJS?src=hash&amp;ref_src=twsrc%5Etfw\\\">#NextJS</a> pages behind a login? Use a <a href=\\\"https://twitter.com/hashtag/HOC?src=hash&amp;ref_src=twsrc%5Etfw\\\">#HOC</a> to wrap your page components, check the <a href=\\\"https://twitter.com/hashtag/API?src=hash&amp;ref_src=twsrc%5Etfw\\\">#API</a> token, and redirect users if it fails üôÖ‚Äç‚ôÇÔ∏è Bonus: <a href=\\\"https://twitter.com/hashtag/SSR?src=hash&amp;ref_src=twsrc%5Etfw\\\">#SSR</a> data fetching using the child&#39;s getInitialProps in the HOC üôå <a href=\\\"https://t.co/EEaNPRXTIx\\\">https://t.co/EEaNPRXTIx</a> <a href=\\\"https://twitter.com/hashtag/ReactJS?src=hash&amp;ref_src=twsrc%5Etfw\\\">#ReactJS</a> <a href=\\\"https://twitter.com/hashtag/javascript?src=hash&amp;ref_src=twsrc%5Etfw\\\">#javascript</a> <a href=\\\"https://t.co/naJR9mNBo4\\\">pic.twitter.com/naJR9mNBo4</a></p>&mdash; Ryosuke (@whoisryosuke) <a href=\\\"https://twitter.com/whoisryosuke/status/1011738754355089408?ref_src=twsrc%5Etfw\\\">June 26, 2018</a></blockquote>\\n<p>Hope that helps,\\nRyo</p>\\n<hr>\\n<p><strong>References</strong></p>\\n<ul>\\n<li><a href=\\\"https://twitter.com/whoisryosuke/status/1011738754355089408\\\">Original tweet</a></li>\\n<li><a href=\\\"https://gist.github.com/whoisryosuke/d034d3eaa0556e86349fb2634788a7a1\\\">See the code gist</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"shortcode - Protect NextJS pages with a authorization HOC üîê\",\"cover_image\":{\"publicURL\":\"/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac.jpg\",\"childImageSharp\":{\"sizes\":{\"tracedSVG\":\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='267' viewBox='0 0 400 267' version='1'%3E%3Cpath d='M0 134v133h10c11 0 14-1 14-6l1-1c1 0 3-5 3-9 0-2 0-3 2-3s2-1 2-4v-4h4l4-1h8l5-3 6-4c2 0 2-1 2-4v-4h6c4 0 5 0 5-2s1-2 4-2c4 0 7 2 7 3 0 3 4 5 8 5h5v-12h8v-8h16v-8h4c4 0 4 0 4-2 0-3 0-3 4-3l4-1c0-2 1-2 4-2l4-1c0-2 2-2 8-2 8 0 8 0 8-2 0-3 0-3 4-3 3 0 4 0 4 2l1 2 3-2 3-2 1-3c0-3 2-4 4-2l2 1c2 0 4-3 3-4l3-6 2 3 2 4v-9h8v4l1 4 1-4c0-3 0-4 2-4l1-4c0-3 0-4 2-4l1-1 4-1 8-2c3-2 4-2 4-1 0 2 1 2 4 2l4-1c0-2 1-2 4-2l4-1h2c2 2 2 2 3 0 2-1 2-2-1-3l-8-2-4-1h4l9-1 7-2c4 0 4 0 4-3s0-3 4-3 4 0 4-2c0-3 0-3 4-3l4-1 4-1h4v-4c0-5 0-5 3-4l4-1c2-2 3-4 1-3s-7-1-5-2c1-1 1-1-1-1-2 1-5-4-4-9l1-5c1-3 12-1 12 3h2l1-2 4-4-1 2v1l2-2h4c2-3 1-3-3-3l-4 1-1 1-1-1c0-3 10-3 12 0 1 1 1 1 2-1 1-1 1-1 1 1-1 2 0 3 2 3l2 3 2-1 4-3 4-2v3l2 4c0 2 0 2-1 1l-1-1 1 3v3l1 3 1-5c0-8 1-9 5-9h1c-3 0-2-3 1-2 2 0 2 0 1-1s-1-1 2-1 3 0 2 1l-2 1-1 1 2 1v1l1 2 1 1c0-3 2-2 2 1s0 3 1 1l1-4c1 0 1-1-1-1-1-1-1-1 1-1 3 0 3-2 0-3h-2l2-1 3 1h1l3 2h2l-1-2 3-3c1 1 2 2 2 5v5l1-4c0-4 0-4 1-2v4l1 1 1-2 2-3c1-1 1-1-1-1-2 1-2 0-2-1 0-2 0-2 1-1l4 1 4 1h-2l-1 1 3 1h1c0 2 4 1 5-1l1-2 1-1c0-2 1-2 4-2 4 0 4 0 4-2l1-3 1-4-1-4-1-1c0-2 1-2 4-2s4 0 4 2l4 1h4v93c0 81 1 75 1-40V0H0v134m263-36l-1 3v10c-1 1-1 1-2-2l-2-2h-3c-3-2-3-4-1-4v1l1 1h1v1l1-2v-1c3 1 3-1 1-2-3-1-10 2-10 5 0 2 0 2 1 1l1-1c1 1 2 3 4 3l3 3c-1 3-3 4-6 1l-3-2 1 2v3a1139 1139 0 0 1 9 0c2-1 2-1 2 1s2 0 2-3c1-2 1-2 1 0 0 5 2 3 3-3 0-6 1-8 4-8 2 1 2 1 2 5v8c2 5 4 5 3-1 0-3 0-3 1 0l1 1v-3l-1-5c1-5-2-7-7-7-3 1-4 1-3-1v-5c-1-1-2 0-3 3' fill='lightgray' fill-rule='evenodd'/%3E%3C/svg%3E\",\"src\":\"/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-4e8db.jpg\",\"srcSet\":\"/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-7cc04.jpg 310w,\\n/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-69042.jpg 620w,\\n/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-4e8db.jpg 1240w,\\n/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-50ab1.jpg 1860w,\\n/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-e738f.jpg 1920w\"}}},\"date\":\"26 June, 2018\",\"tags\":[\"nextjs\",\"api\",\"js\",\"shortcode\",\"code snippet\",\"tips\"],\"section\":\"blog\"},\"fields\":{\"slug\":\"/blog/2018/shortcode-nextjs-auth-hoc/\"}},\"relatedPosts\":{\"edges\":[{\"node\":{\"html\":\"<p>Have you been developing a <a href=\\\"http://nextjs.org\\\">NextJS</a> app with dynamic routing (using maybe Express), and found that every time you make a change you have to do the tedious process of shutting down the server (CTRL+C) and restarting it? (<code class=\\\"language-text\\\">npm run dev</code>).</p>\\n<p>If you're used to working with <a href=\\\"http://nodejs.org\\\">NodeJS</a>, or <a href=\\\"https://expressjs.com/\\\">ExpressJS</a>, you've probably come across <a href=\\\"https://github.com/remy/nodemon\\\">nodemon</a>. It's a utility that enables hot reloading on Node-based servers, so that whenever you make a change to a server file and save -- it instantly starts to restart without any prompt from your part.</p>\\n<p>But <strong>nodemon doesn't work out of the box with NextJS</strong> and requires a <em>small amount</em> of configuration. If you try running nodemon without a config or the proper CLI params, you'll find that your server will start acting <em>real wonky</em>. My server started restarting infinitely, because it was detecting changes each time NextJS compiled, triggering an infinite loop of compilations.</p>\\n<blockquote>\\n<p>This guide assumes you have a NextJS project with dynamic routing setup. You can find a few in <a href=\\\"https://github.com/zeit/next.js/tree/master/examples\\\">the examples section of the NextJS repo</a> </p>\\n</blockquote>\\n<h2>The solution?</h2>\\n<p>Nodemon accepts a configuration file, which allows you have a greater degree of control over the process. By adding a few values to this file, we can solve all our issues.</p>\\n<h3>Install nodemon</h3>\\n<p>If you haven't already, install nodemon:</p>\\n<p><code class=\\\"language-text\\\">npm install --save-dev nodemon</code></p>\\n<h3>Create the config file</h3>\\n<p>Create a <code class=\\\"language-text\\\">nodemon.json</code> file in the project root and paste the following into it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"verbose\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"ignore\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"node_modules\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\".next\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"server/**/*\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"server.js\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"ext\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"js json\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>This tells nodemon to ignore the <code class=\\\"language-text\\\">.next</code> folder, which is used as a cache for the Next compiler (and triggers the infinite reload). And we also tell it which file to watch for changes from. I keep my server file in a separate server folder, since I have stuff like routes/middleware/etc that need separate files and folders.</p>\\n<h3>Update your npm dev script</h3>\\n<p>Now you can modify your <code class=\\\"language-text\\\">package.json</code> and update the 'dev' script value to use nodemon instead of the default <code class=\\\"language-text\\\">node server.js</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">  <span class=\\\"token string\\\">\\\"scripts\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">\\\"dev\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"nodemon -w server/server.js server/server.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"build\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"next build\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"start\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"NODE_ENV=production node server.js\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</code></pre>\\n      </div>\\n<p>Now you can run <code class=\\\"language-text\\\">npm run dev</code> and you'll have yourself a hot-reloading server.</p>\\n<p>I found this solution on <a href=\\\"https://github.com/zeit/next.js/issues/791\\\">the NextJS Github issues</a>, where a people were having - go figure - the same issue.</p>\\n<p>Hope that helps ‚úåÔ∏è\\nRyo</p>\\n<hr>\\n<p><strong>References</strong>:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/remy/nodemon\\\">nodemon</a></li>\\n<li><a href=\\\"https://github.com/zeit/next.js/issues/791\\\">NextJS Github issue - hot reloading</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"NextJS Tip: Hot reloading for dynamic servers\",\"cover_image\":{\"publicURL\":\"/static/NextJS-Tips-Nodemon-1920px-6a346c8ffe4684585c23388268cc5d1f.jpg\",\"childImageSharp\":{\"sizes\":{\"src\":\"/static/NextJS-Tips-Nodemon-1920px-6a346c8ffe4684585c23388268cc5d1f-4e8db.jpg\",\"srcSet\":\"/static/NextJS-Tips-Nodemon-1920px-6a346c8ffe4684585c23388268cc5d1f-7cc04.jpg 310w,\\n/static/NextJS-Tips-Nodemon-1920px-6a346c8ffe4684585c23388268cc5d1f-69042.jpg 620w,\\n/static/NextJS-Tips-Nodemon-1920px-6a346c8ffe4684585c23388268cc5d1f-4e8db.jpg 1240w,\\n/static/NextJS-Tips-Nodemon-1920px-6a346c8ffe4684585c23388268cc5d1f-50ab1.jpg 1860w,\\n/static/NextJS-Tips-Nodemon-1920px-6a346c8ffe4684585c23388268cc5d1f-e738f.jpg 1920w\"}}},\"date\":\"25 July, 2018\",\"tags\":[\"nextjs\",\"express\",\"js\",\"es6\",\"tips\"]},\"fields\":{\"slug\":\"/blog/2018/nextjs-tip-hot-reloading-for-dynamic-servers/\"}}},{\"node\":{\"html\":\"<p>Recently I needed to create a NextJS app that made authenticated API calls, and couldn't reveal it's credentials to the client. The solution was simple, I had to integrate Express into the app. But how do you fetch data from the API and pass it down to a page?</p>\\n<blockquote>\\n<p>This process assumes you have an environment setup with NextJS, Express, an isomorphic fetch solution, and dotenv (for ENV variables). If you follow the NextJS guide for dynamic routing you be mostly there. But it should be pretty easy to adapt to other server frameworks.</p>\\n</blockquote>\\n<h2>Async or bust</h2>\\n<p>I tried to first fetch the data in a separate function and call it before the page was rendered in the route:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> credentials <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  method<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'get'</span><span class=\\\"token punctuation\\\">,</span>\\n  headers<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'Content-Type'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'application/json'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'Authorization'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Basic '</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token function\\\">btoa</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_USER <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\":\\\"</span> <span class=\\\"token operator\\\">+</span> process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_VENDOR<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fetchApi</span> <span class=\\\"token punctuation\\\">(</span>endpoint<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_URL <span class=\\\"token operator\\\">+</span> endpoint<span class=\\\"token punctuation\\\">,</span> credentials<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>r <span class=\\\"token operator\\\">=></span> r<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n    server<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">fetchApi</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities/v1/'</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">return</span> data<span class=\\\"token punctuation\\\">)</span>\\n\\n      <span class=\\\"token keyword\\\">return</span> app<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>This resulted in the page rendering and loading, and the data loading afterwards. Simple mistake, especially if you come from a background that isn't asynchronous. </p>\\n<p>But how do you create an async Express route? Shockingly easily apparently:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    server<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetchApi</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities/v1/'</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">return</span> data<span class=\\\"token punctuation\\\">)</span>\\n\\n      <span class=\\\"token keyword\\\">return</span> app<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Add an async before the function that renders your route -- *because don't stress it, it's easy to forget that you're working <strong>inside</strong> a function*. Now you just slap an await on Promise you want to fetch before page load.</p>\\n<h2>But can we make it reusable?</h2>\\n<p>I needed to fetch data across many routes, with many different requests to different endpoints. Rather than repeating code in every route to make the API request, we make a <strong>middleware</strong> that does it and dumps the data in the <code class=\\\"language-text\\\">res.locals</code> (which is accessible in our route).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// Credentials for authenticated fetch calls to API</span>\\n<span class=\\\"token keyword\\\">const</span> credentials <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  method<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'get'</span><span class=\\\"token punctuation\\\">,</span>\\n  headers<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'Content-Type'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'application/json'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'Authorization'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Basic '</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token function\\\">btoa</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_USER <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\":\\\"</span> <span class=\\\"token operator\\\">+</span> process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_VENDOR<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Facade for fetch preloaded with authentication credentials\\n * to easily use in any other function\\n */</span>\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fetchApi</span> <span class=\\\"token punctuation\\\">(</span>endpoint<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_URL <span class=\\\"token operator\\\">+</span> endpoint<span class=\\\"token punctuation\\\">,</span> credentials<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>r <span class=\\\"token operator\\\">=></span> r<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * A function that returns the middleware function\\n * We nest the middleware in a function so we can \\n * pass an endpoint, making the middleware more reusable\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span>endpoint<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    \\n    <span class=\\\"token comment\\\">/**\\n     * Here we create an async function so\\n     * we can load the data before the page renders\\n     */</span>\\n    <span class=\\\"token keyword\\\">const</span> fetchData <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetchApi</span><span class=\\\"token punctuation\\\">(</span>endpoint<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token comment\\\">// We place the data in res.locals to access in the route later</span>\\n          res<span class=\\\"token punctuation\\\">.</span>locals<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token operator\\\">=</span> data\\n          <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>        \\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">fetchData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">prepare</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> server <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">express</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    server<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities/v1/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> app<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> data<span class=\\\"token punctuation\\\">:</span> res<span class=\\\"token punctuation\\\">.</span>locals<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>The code explains it a bit, but I had to nest the middleware function inside another function in order to pass the endpoint parameter. It's the way that JS works, similar to when you use <code class=\\\"language-text\\\">.map()</code> or <code class=\\\"language-text\\\">.filter()</code> on an array and you want to pass a parameter but can't. It's an encapsulation issue caused by the way Express interprets it's middleware, forcing you to wrap it what the React community calls a \\\"HOC\\\", or a function that returns another function (so you can pass additional \\\"props\\\" to the child function - or component in React's case).</p>\\n<p>Now in any route we simply add the middleware <code class=\\\"language-text\\\">getData(endpoint)</code>.</p>\\n<blockquote>\\n<p>You could also just do a fetch in the middleware <strong>without the async</strong> and rely on <code class=\\\"language-text\\\">next()</code> function in the promise chain. It'll hold the progress until the loading is complete and then provide the \\\"next\\\" function (usually the render function). I just left everything async just in case I refactor it out of the middleware.</p>\\n</blockquote>\\n<h3>Super middleware</h3>\\n<p>You could take this middleware and apply it to the entire application (rather than a single route), and use the <code class=\\\"language-text\\\">req.params</code> object to grab dynamic route variables (like a blog post ID, or in this case, a string that describes an endpoint). </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> endpoint <span class=\\\"token operator\\\">=</span> req<span class=\\\"token punctuation\\\">.</span>params<span class=\\\"token punctuation\\\">.</span>endpoint\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    \\n    <span class=\\\"token comment\\\">/**\\n     * Here we create an async function so\\n     * we can load the data before the page renders\\n     */</span>\\n    <span class=\\\"token keyword\\\">const</span> fetchData <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetchApi</span><span class=\\\"token punctuation\\\">(</span>endpoint<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token comment\\\">// We place the data in res.locals to access in the route later</span>\\n          res<span class=\\\"token punctuation\\\">.</span>locals<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token operator\\\">=</span> data\\n          <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>        \\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">fetchData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n   <span class=\\\"token comment\\\">// later in the app...</span>\\n    server<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/:endpoint'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> app<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> req<span class=\\\"token punctuation\\\">.</span>params<span class=\\\"token punctuation\\\">.</span>endpoint<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> data<span class=\\\"token punctuation\\\">:</span> res<span class=\\\"token punctuation\\\">.</span>locals<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>This allows for a completely dynamic connection to whichever API you're using, so depending on how large (and preferably simple) it is to access, you can use <strong>one middleware to rule them all.</strong></p>\\n<h2>I ‚ù§Ô∏è middleware</h2>\\n<p>Middleware makes life so much easier, and makes application code so much slimmer. If you can find a way to simplify this code (without getting too deep into ES6 land), I challenge you to post it up in the comments! I'm always interested in discovering and sharing the most efficient solutions to common problems.</p>\\n<p>Hope that helps! ‚úåÔ∏è\\nRyo </p>\\n<hr>\\n<p><strong>References</strong>:</p>\\n<ul>\\n<li><a href=\\\"https://expressjs.com/en/guide/using-middleware.html\\\">ExpressJS Middleware</a></li>\\n<li><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\\\">MDN: async function</a></li>\\n<li><a href=\\\"https://hackernoon.com/middleware-the-core-of-node-js-apps-ab01fee39200\\\">Middleware: THE core of node.js backend apps</a></li>\\n<li><a href=\\\"https://medium.com/@Abazhenov/using-async-await-in-express-with-node-8-b8af872c0016\\\">Async Express routes</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Express Middleware for API Requests\",\"cover_image\":{\"publicURL\":\"/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b.jpg\",\"childImageSharp\":{\"sizes\":{\"src\":\"/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-4e8db.jpg\",\"srcSet\":\"/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-7cc04.jpg 310w,\\n/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-69042.jpg 620w,\\n/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-4e8db.jpg 1240w,\\n/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-50ab1.jpg 1860w,\\n/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-e738f.jpg 1920w\"}}},\"date\":\"23 July, 2018\",\"tags\":[\"nextjs\",\"express\",\"js\",\"api\",\"es6\",\"tips\"]},\"fields\":{\"slug\":\"/blog/2018/express-middleware-for-api-requests/\"}}}]}},\"pathContext\":{\"tag\":\"js\",\"slug\":\"/blog/2018/shortcode-nextjs-auth-hoc/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-2018-shortcode-nextjs-auth-hoc-bdaeff89e7daecfcd524.js","module.exports = {\"data\":{\"blog\":{\"html\":\"<p>Need to protect your NextJS pages behind a login? Use a HOC (higher-order component) to wrap your page components, check the #API token, and redirect users if it fails üôÖ‚Äç‚ôÇÔ∏è </p>\\n<p>Bonus: You can grab things from SSR like cookies or session data using the child's getInitialProps in the HOC üôå </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>Component<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span>\\n<span class=\\\"token keyword\\\">import</span> Router <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'next/router'</span>\\n<span class=\\\"token keyword\\\">import</span> AuthService <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./AuthService'</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">withAuth</span><span class=\\\"token punctuation\\\">(</span>AuthComponent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> Auth <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">AuthService</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://localhost'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Authenticated</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n      <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token function\\\">getInitialProps</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// Check if Page has a `getInitialProps`; if so, call it.</span>\\n        <span class=\\\"token keyword\\\">const</span> pageProps <span class=\\\"token operator\\\">=</span> AuthComponent<span class=\\\"token punctuation\\\">.</span>getInitialProps <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token keyword\\\">await</span> AuthComponent<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getInitialProps</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// Return props.</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>pageProps <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n\\n      <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n          isLoading<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n\\n      <span class=\\\"token function\\\">componentDidMount</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>Auth<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">loggedIn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          Router<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> isLoading<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n\\n      <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n          <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n          <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>isLoading <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">(</span>\\n              <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>LOADING<span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n              <span class=\\\"token operator\\\">&lt;</span>AuthComponent <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">}</span>  auth<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>Auth<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<blockquote class=\\\"twitter-tweet\\\" data-lang=\\\"en\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">üîê Need to protect your <a href=\\\"https://twitter.com/hashtag/NextJS?src=hash&amp;ref_src=twsrc%5Etfw\\\">#NextJS</a> pages behind a login? Use a <a href=\\\"https://twitter.com/hashtag/HOC?src=hash&amp;ref_src=twsrc%5Etfw\\\">#HOC</a> to wrap your page components, check the <a href=\\\"https://twitter.com/hashtag/API?src=hash&amp;ref_src=twsrc%5Etfw\\\">#API</a> token, and redirect users if it fails üôÖ‚Äç‚ôÇÔ∏è Bonus: <a href=\\\"https://twitter.com/hashtag/SSR?src=hash&amp;ref_src=twsrc%5Etfw\\\">#SSR</a> data fetching using the child&#39;s getInitialProps in the HOC üôå <a href=\\\"https://t.co/EEaNPRXTIx\\\">https://t.co/EEaNPRXTIx</a> <a href=\\\"https://twitter.com/hashtag/ReactJS?src=hash&amp;ref_src=twsrc%5Etfw\\\">#ReactJS</a> <a href=\\\"https://twitter.com/hashtag/javascript?src=hash&amp;ref_src=twsrc%5Etfw\\\">#javascript</a> <a href=\\\"https://t.co/naJR9mNBo4\\\">pic.twitter.com/naJR9mNBo4</a></p>&mdash; Ryosuke (@whoisryosuke) <a href=\\\"https://twitter.com/whoisryosuke/status/1011738754355089408?ref_src=twsrc%5Etfw\\\">June 26, 2018</a></blockquote>\\n<p>Hope that helps,\\nRyo</p>\\n<hr>\\n<p><strong>References</strong></p>\\n<ul>\\n<li><a href=\\\"https://twitter.com/whoisryosuke/status/1011738754355089408\\\">Original tweet</a></li>\\n<li><a href=\\\"https://gist.github.com/whoisryosuke/d034d3eaa0556e86349fb2634788a7a1\\\">See the code gist</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"shortcode - Protect NextJS pages with a authorization HOC üîê\",\"cover_image\":{\"publicURL\":\"/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac.jpg\",\"childImageSharp\":{\"sizes\":{\"tracedSVG\":\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='267' viewBox='0 0 400 267' version='1'%3E%3Cpath d='M0 134v133h10c11 0 14-1 14-6l1-1c1 0 3-5 3-9 0-2 0-3 2-3s2-1 2-4v-4h4l4-1h8l5-3 6-4c2 0 2-1 2-4v-4h6c4 0 5 0 5-2s1-2 4-2c4 0 7 2 7 3 0 3 4 5 8 5h5v-12h8v-8h16v-8h4c4 0 4 0 4-2 0-3 0-3 4-3l4-1c0-2 1-2 4-2l4-1c0-2 2-2 8-2 8 0 8 0 8-2 0-3 0-3 4-3 3 0 4 0 4 2l1 2 3-2 3-2 1-3c0-3 2-4 4-2l2 1c2 0 4-3 3-4l3-6 2 3 2 4v-9h8v4l1 4 1-4c0-3 0-4 2-4l1-4c0-3 0-4 2-4l1-1 4-1 8-2c3-2 4-2 4-1 0 2 1 2 4 2l4-1c0-2 1-2 4-2l4-1h2c2 2 2 2 3 0 2-1 2-2-1-3l-8-2-4-1h4l9-1 7-2c4 0 4 0 4-3s0-3 4-3 4 0 4-2c0-3 0-3 4-3l4-1 4-1h4v-4c0-5 0-5 3-4l4-1c2-2 3-4 1-3s-7-1-5-2c1-1 1-1-1-1-2 1-5-4-4-9l1-5c1-3 12-1 12 3h2l1-2 4-4-1 2v1l2-2h4c2-3 1-3-3-3l-4 1-1 1-1-1c0-3 10-3 12 0 1 1 1 1 2-1 1-1 1-1 1 1-1 2 0 3 2 3l2 3 2-1 4-3 4-2v3l2 4c0 2 0 2-1 1l-1-1 1 3v3l1 3 1-5c0-8 1-9 5-9h1c-3 0-2-3 1-2 2 0 2 0 1-1s-1-1 2-1 3 0 2 1l-2 1-1 1 2 1v1l1 2 1 1c0-3 2-2 2 1s0 3 1 1l1-4c1 0 1-1-1-1-1-1-1-1 1-1 3 0 3-2 0-3h-2l2-1 3 1h1l3 2h2l-1-2 3-3c1 1 2 2 2 5v5l1-4c0-4 0-4 1-2v4l1 1 1-2 2-3c1-1 1-1-1-1-2 1-2 0-2-1 0-2 0-2 1-1l4 1 4 1h-2l-1 1 3 1h1c0 2 4 1 5-1l1-2 1-1c0-2 1-2 4-2 4 0 4 0 4-2l1-3 1-4-1-4-1-1c0-2 1-2 4-2s4 0 4 2l4 1h4v93c0 81 1 75 1-40V0H0v134m263-36l-1 3v10c-1 1-1 1-2-2l-2-2h-3c-3-2-3-4-1-4v1l1 1h1v1l1-2v-1c3 1 3-1 1-2-3-1-10 2-10 5 0 2 0 2 1 1l1-1c1 1 2 3 4 3l3 3c-1 3-3 4-6 1l-3-2 1 2v3a1139 1139 0 0 1 9 0c2-1 2-1 2 1s2 0 2-3c1-2 1-2 1 0 0 5 2 3 3-3 0-6 1-8 4-8 2 1 2 1 2 5v8c2 5 4 5 3-1 0-3 0-3 1 0l1 1v-3l-1-5c1-5-2-7-7-7-3 1-4 1-3-1v-5c-1-1-2 0-3 3' fill='lightgray' fill-rule='evenodd'/%3E%3C/svg%3E\",\"src\":\"/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-4e8db.jpg\",\"srcSet\":\"/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-7cc04.jpg 310w,\\n/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-69042.jpg 620w,\\n/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-4e8db.jpg 1240w,\\n/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-50ab1.jpg 1860w,\\n/static/shortcode-code-snippets-88148405a821950263064ed5b62734ac-e738f.jpg 1920w\"}}},\"date\":\"26 June, 2018\",\"tags\":[\"nextjs\",\"api\",\"js\",\"shortcode\",\"code snippet\",\"tips\"],\"section\":\"blog\"},\"fields\":{\"slug\":\"/blog/2018/shortcode-nextjs-auth-hoc/\"}},\"relatedPosts\":{\"edges\":[{\"node\":{\"html\":\"<p>Have you been developing a <a href=\\\"http://nextjs.org\\\">NextJS</a> app with dynamic routing (using maybe Express), and found that every time you make a change you have to do the tedious process of shutting down the server (CTRL+C) and restarting it? (<code class=\\\"language-text\\\">npm run dev</code>).</p>\\n<p>If you're used to working with <a href=\\\"http://nodejs.org\\\">NodeJS</a>, or <a href=\\\"https://expressjs.com/\\\">ExpressJS</a>, you've probably come across <a href=\\\"https://github.com/remy/nodemon\\\">nodemon</a>. It's a utility that enables hot reloading on Node-based servers, so that whenever you make a change to a server file and save -- it instantly starts to restart without any prompt from your part.</p>\\n<p>But <strong>nodemon doesn't work out of the box with NextJS</strong> and requires a <em>small amount</em> of configuration. If you try running nodemon without a config or the proper CLI params, you'll find that your server will start acting <em>real wonky</em>. My server started restarting infinitely, because it was detecting changes each time NextJS compiled, triggering an infinite loop of compilations.</p>\\n<blockquote>\\n<p>This guide assumes you have a NextJS project with dynamic routing setup. You can find a few in <a href=\\\"https://github.com/zeit/next.js/tree/master/examples\\\">the examples section of the NextJS repo</a> </p>\\n</blockquote>\\n<h2>The solution?</h2>\\n<p>Nodemon accepts a configuration file, which allows you have a greater degree of control over the process. By adding a few values to this file, we can solve all our issues.</p>\\n<h3>Install nodemon</h3>\\n<p>If you haven't already, install nodemon:</p>\\n<p><code class=\\\"language-text\\\">npm install --save-dev nodemon</code></p>\\n<h3>Create the config file</h3>\\n<p>Create a <code class=\\\"language-text\\\">nodemon.json</code> file in the project root and paste the following into it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"verbose\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"ignore\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"node_modules\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\".next\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"watch\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"server/**/*\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"server.js\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"ext\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"js json\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>This tells nodemon to ignore the <code class=\\\"language-text\\\">.next</code> folder, which is used as a cache for the Next compiler (and triggers the infinite reload). And we also tell it which file to watch for changes from. I keep my server file in a separate server folder, since I have stuff like routes/middleware/etc that need separate files and folders.</p>\\n<h3>Update your npm dev script</h3>\\n<p>Now you can modify your <code class=\\\"language-text\\\">package.json</code> and update the 'dev' script value to use nodemon instead of the default <code class=\\\"language-text\\\">node server.js</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">  <span class=\\\"token string\\\">\\\"scripts\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">\\\"dev\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"nodemon -w server/server.js server/server.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"build\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"next build\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"start\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"NODE_ENV=production node server.js\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</code></pre>\\n      </div>\\n<p>Now you can run <code class=\\\"language-text\\\">npm run dev</code> and you'll have yourself a hot-reloading server.</p>\\n<p>I found this solution on <a href=\\\"https://github.com/zeit/next.js/issues/791\\\">the NextJS Github issues</a>, where a people were having - go figure - the same issue.</p>\\n<p>Hope that helps ‚úåÔ∏è\\nRyo</p>\\n<hr>\\n<p><strong>References</strong>:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/remy/nodemon\\\">nodemon</a></li>\\n<li><a href=\\\"https://github.com/zeit/next.js/issues/791\\\">NextJS Github issue - hot reloading</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"NextJS Tip: Hot reloading for dynamic servers\",\"cover_image\":{\"publicURL\":\"/static/NextJS-Tips-Nodemon-1920px-6a346c8ffe4684585c23388268cc5d1f.jpg\",\"childImageSharp\":{\"sizes\":{\"src\":\"/static/NextJS-Tips-Nodemon-1920px-6a346c8ffe4684585c23388268cc5d1f-4e8db.jpg\",\"srcSet\":\"/static/NextJS-Tips-Nodemon-1920px-6a346c8ffe4684585c23388268cc5d1f-7cc04.jpg 310w,\\n/static/NextJS-Tips-Nodemon-1920px-6a346c8ffe4684585c23388268cc5d1f-69042.jpg 620w,\\n/static/NextJS-Tips-Nodemon-1920px-6a346c8ffe4684585c23388268cc5d1f-4e8db.jpg 1240w,\\n/static/NextJS-Tips-Nodemon-1920px-6a346c8ffe4684585c23388268cc5d1f-50ab1.jpg 1860w,\\n/static/NextJS-Tips-Nodemon-1920px-6a346c8ffe4684585c23388268cc5d1f-e738f.jpg 1920w\"}}},\"date\":\"25 July, 2018\",\"tags\":[\"nextjs\",\"express\",\"js\",\"es6\",\"tips\"]},\"fields\":{\"slug\":\"/blog/2018/nextjs-tip-hot-reloading-for-dynamic-servers/\"}}},{\"node\":{\"html\":\"<p>Recently I needed to create a NextJS app that made authenticated API calls, and couldn't reveal it's credentials to the client. The solution was simple, I had to integrate Express into the app. But how do you fetch data from the API and pass it down to a page?</p>\\n<blockquote>\\n<p>This process assumes you have an environment setup with NextJS, Express, an isomorphic fetch solution, and dotenv (for ENV variables). If you follow the NextJS guide for dynamic routing you be mostly there. But it should be pretty easy to adapt to other server frameworks.</p>\\n</blockquote>\\n<h2>Async or bust</h2>\\n<p>I tried to first fetch the data in a separate function and call it before the page was rendered in the route:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> credentials <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  method<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'get'</span><span class=\\\"token punctuation\\\">,</span>\\n  headers<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'Content-Type'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'application/json'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'Authorization'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Basic '</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token function\\\">btoa</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_USER <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\":\\\"</span> <span class=\\\"token operator\\\">+</span> process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_VENDOR<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fetchApi</span> <span class=\\\"token punctuation\\\">(</span>endpoint<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_URL <span class=\\\"token operator\\\">+</span> endpoint<span class=\\\"token punctuation\\\">,</span> credentials<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>r <span class=\\\"token operator\\\">=></span> r<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n    server<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">fetchApi</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities/v1/'</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">return</span> data<span class=\\\"token punctuation\\\">)</span>\\n\\n      <span class=\\\"token keyword\\\">return</span> app<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>This resulted in the page rendering and loading, and the data loading afterwards. Simple mistake, especially if you come from a background that isn't asynchronous. </p>\\n<p>But how do you create an async Express route? Shockingly easily apparently:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">    server<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetchApi</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities/v1/'</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">return</span> data<span class=\\\"token punctuation\\\">)</span>\\n\\n      <span class=\\\"token keyword\\\">return</span> app<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Add an async before the function that renders your route -- *because don't stress it, it's easy to forget that you're working <strong>inside</strong> a function*. Now you just slap an await on Promise you want to fetch before page load.</p>\\n<h2>But can we make it reusable?</h2>\\n<p>I needed to fetch data across many routes, with many different requests to different endpoints. Rather than repeating code in every route to make the API request, we make a <strong>middleware</strong> that does it and dumps the data in the <code class=\\\"language-text\\\">res.locals</code> (which is accessible in our route).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// Credentials for authenticated fetch calls to API</span>\\n<span class=\\\"token keyword\\\">const</span> credentials <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  method<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'get'</span><span class=\\\"token punctuation\\\">,</span>\\n  headers<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'Content-Type'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'application/json'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'Authorization'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Basic '</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token function\\\">btoa</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_USER <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\":\\\"</span> <span class=\\\"token operator\\\">+</span> process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_VENDOR<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Facade for fetch preloaded with authentication credentials\\n * to easily use in any other function\\n */</span>\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fetchApi</span> <span class=\\\"token punctuation\\\">(</span>endpoint<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>API_URL <span class=\\\"token operator\\\">+</span> endpoint<span class=\\\"token punctuation\\\">,</span> credentials<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>r <span class=\\\"token operator\\\">=></span> r<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * A function that returns the middleware function\\n * We nest the middleware in a function so we can \\n * pass an endpoint, making the middleware more reusable\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span>endpoint<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    \\n    <span class=\\\"token comment\\\">/**\\n     * Here we create an async function so\\n     * we can load the data before the page renders\\n     */</span>\\n    <span class=\\\"token keyword\\\">const</span> fetchData <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetchApi</span><span class=\\\"token punctuation\\\">(</span>endpoint<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token comment\\\">// We place the data in res.locals to access in the route later</span>\\n          res<span class=\\\"token punctuation\\\">.</span>locals<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token operator\\\">=</span> data\\n          <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>        \\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">fetchData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">prepare</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> server <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">express</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    server<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/facilities/v1/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> app<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'/facilities'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> data<span class=\\\"token punctuation\\\">:</span> res<span class=\\\"token punctuation\\\">.</span>locals<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>The code explains it a bit, but I had to nest the middleware function inside another function in order to pass the endpoint parameter. It's the way that JS works, similar to when you use <code class=\\\"language-text\\\">.map()</code> or <code class=\\\"language-text\\\">.filter()</code> on an array and you want to pass a parameter but can't. It's an encapsulation issue caused by the way Express interprets it's middleware, forcing you to wrap it what the React community calls a \\\"HOC\\\", or a function that returns another function (so you can pass additional \\\"props\\\" to the child function - or component in React's case).</p>\\n<p>Now in any route we simply add the middleware <code class=\\\"language-text\\\">getData(endpoint)</code>.</p>\\n<blockquote>\\n<p>You could also just do a fetch in the middleware <strong>without the async</strong> and rely on <code class=\\\"language-text\\\">next()</code> function in the promise chain. It'll hold the progress until the loading is complete and then provide the \\\"next\\\" function (usually the render function). I just left everything async just in case I refactor it out of the middleware.</p>\\n</blockquote>\\n<h3>Super middleware</h3>\\n<p>You could take this middleware and apply it to the entire application (rather than a single route), and use the <code class=\\\"language-text\\\">req.params</code> object to grab dynamic route variables (like a blog post ID, or in this case, a string that describes an endpoint). </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> endpoint <span class=\\\"token operator\\\">=</span> req<span class=\\\"token punctuation\\\">.</span>params<span class=\\\"token punctuation\\\">.</span>endpoint\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    \\n    <span class=\\\"token comment\\\">/**\\n     * Here we create an async function so\\n     * we can load the data before the page renders\\n     */</span>\\n    <span class=\\\"token keyword\\\">const</span> fetchData <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetchApi</span><span class=\\\"token punctuation\\\">(</span>endpoint<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token comment\\\">// We place the data in res.locals to access in the route later</span>\\n          res<span class=\\\"token punctuation\\\">.</span>locals<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token operator\\\">=</span> data\\n          <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>        \\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">fetchData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n   <span class=\\\"token comment\\\">// later in the app...</span>\\n    server<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/:endpoint'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> app<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> req<span class=\\\"token punctuation\\\">.</span>params<span class=\\\"token punctuation\\\">.</span>endpoint<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> data<span class=\\\"token punctuation\\\">:</span> res<span class=\\\"token punctuation\\\">.</span>locals<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>This allows for a completely dynamic connection to whichever API you're using, so depending on how large (and preferably simple) it is to access, you can use <strong>one middleware to rule them all.</strong></p>\\n<h2>I ‚ù§Ô∏è middleware</h2>\\n<p>Middleware makes life so much easier, and makes application code so much slimmer. If you can find a way to simplify this code (without getting too deep into ES6 land), I challenge you to post it up in the comments! I'm always interested in discovering and sharing the most efficient solutions to common problems.</p>\\n<p>Hope that helps! ‚úåÔ∏è\\nRyo </p>\\n<hr>\\n<p><strong>References</strong>:</p>\\n<ul>\\n<li><a href=\\\"https://expressjs.com/en/guide/using-middleware.html\\\">ExpressJS Middleware</a></li>\\n<li><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\\\">MDN: async function</a></li>\\n<li><a href=\\\"https://hackernoon.com/middleware-the-core-of-node-js-apps-ab01fee39200\\\">Middleware: THE core of node.js backend apps</a></li>\\n<li><a href=\\\"https://medium.com/@Abazhenov/using-async-await-in-express-with-node-8-b8af872c0016\\\">Async Express routes</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Express Middleware for API Requests\",\"cover_image\":{\"publicURL\":\"/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b.jpg\",\"childImageSharp\":{\"sizes\":{\"src\":\"/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-4e8db.jpg\",\"srcSet\":\"/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-7cc04.jpg 310w,\\n/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-69042.jpg 620w,\\n/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-4e8db.jpg 1240w,\\n/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-50ab1.jpg 1860w,\\n/static/Express-Middleware-for-API-Requests-1920px-52330e681ae16f3c2210acb276021f1b-e738f.jpg 1920w\"}}},\"date\":\"23 July, 2018\",\"tags\":[\"nextjs\",\"express\",\"js\",\"api\",\"es6\",\"tips\"]},\"fields\":{\"slug\":\"/blog/2018/express-middleware-for-api-requests/\"}}}]}},\"pathContext\":{\"tag\":\"js\",\"slug\":\"/blog/2018/shortcode-nextjs-auth-hoc/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-2018-shortcode-nextjs-auth-hoc.json\n// module id = 568\n// module chunks = 91820612913845"],"sourceRoot":""}